{"version":3,"sources":["./src/addons/competency/pages/plan/plan.html","./src/addons/competency/pages/planlist/planlist.html","./src/addons/competency/classes/competency-plans-source.ts","./src/addons/competency/competency-learning-plans-lazy.module.ts","./src/addons/competency/pages/plan/plan.ts","./src/addons/competency/pages/planlist/planlist.ts"],"names":[],"mappings":"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","file":"competency-learning-plans-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"plan\\\">{{plan.plan.name}}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [core-swipe-navigation]=\\\"plans\\\" class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!competencies.loaded\\\" (ionRefresh)=\\\"refreshLearningPlan($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"competencies.loaded\\\">\\r\\n        <ion-card *ngIf=\\\"user\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <core-user-avatar [user]=\\\"user\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                    <h2>{{ user.fullname }}</h2>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n        <ion-card *ngIf=\\\"plan\\\">\\r\\n            <ion-list>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"plan.plan.description\\\">\\r\\n                    <ion-label>\\r\\n                        <p>\\r\\n                            <core-format-text [text]=\\\"plan.plan.description\\\" contextLevel=\\\"user\\\" [contextInstanceId]=\\\"plan.plan.userid\\\">\\r\\n                            </core-format-text>\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.status' | translate }}</p>\\r\\n                        <p>{{ plan.plan.statusname }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"plan.plan.duedate > 0\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.duedate' | translate }}</p>\\r\\n                        <p>{{ plan.plan.duedate * 1000 | coreFormatDate }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"plan.plan.template\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.template' | translate }}</p>\\r\\n                        <p>{{ plan.plan.template.shortname }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label id=\\\"addon-competency-plan-{{plan.plan.id}}-progress\\\">\\r\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.progress' | translate }}</p>\\r\\n                        <p>\\r\\n                            {{ 'addon.competency.xcompetenciesproficientoutofy' | translate:\\r\\n                            {$a: {x: plan.proficientcompetencycount, y: plan.competencycount} } }}\\r\\n                        </p>\\r\\n                        <core-progress-bar [progress]=\\\"plan.proficientcompetencypercentage\\\"\\r\\n                            [text]=\\\"plan.proficientcompetencypercentageformatted\\\"\\r\\n                            ariaDescribedBy=\\\"addon-competency-plan-{{plan.plan.id}}-progress\\\">\\r\\n                        </core-progress-bar>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n        </ion-card>\\r\\n        <ion-card *ngIf=\\\"plan\\\">\\r\\n            <ion-card-header class=\\\"ion-text-wrap\\\">\\r\\n                <ion-card-title>{{ 'addon.competency.learningplancompetencies' | translate }}</ion-card-title>\\r\\n            </ion-card-header>\\r\\n            <ion-list>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"plan.competencycount == 0\\\">\\r\\n                    <ion-label>\\r\\n                        <p>{{ 'addon.competency.nocompetencies' | translate }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let competency of competencies.items\\\" (click)=\\\"competencies.select(competency)\\\"\\r\\n                    [attr.aria-label]=\\\"competency.competency.shortname\\\" detail=\\\"true\\\" button>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{competency.competency.shortname}} <em>{{competency.competency.idnumber}}</em></p>\\r\\n                    </ion-label>\\r\\n                    <ion-badge *ngIf=\\\"competency.usercompetencyplan\\\" slot=\\\"end\\\"\\r\\n                        [color]=\\\"competency.usercompetencyplan.proficiency ? 'success' : 'danger'\\\">\\r\\n                        {{ competency.usercompetencyplan.gradename }}\\r\\n                    </ion-badge>\\r\\n                    <ion-badge *ngIf=\\\"!competency.usercompetencyplan\\\" slot=\\\"end\\\"\\r\\n                        [color]=\\\"competency.usercompetency.proficiency ? 'success' : 'danger'\\\">\\r\\n                        {{ competency.usercompetency.gradename }}\\r\\n                    </ion-badge>\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n        </ion-card>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.competency.userplans' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!plans.loaded\\\" (ionRefresh)=\\\"refreshLearningPlans($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n        <core-loading [hideUntil]=\\\"plans.loaded\\\">\\r\\n            <core-empty-box *ngIf=\\\"plans.empty\\\" icon=\\\"fas-route\\\" [message]=\\\"'addon.competency.noplanswerecreated' | translate\\\">\\r\\n\\r\\n            </core-empty-box>\\r\\n            <ion-list *ngIf=\\\"!plans.empty\\\" class=\\\"ion-no-margin\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let plan of plans.items\\\" [attr.aria-label]=\\\"plan.name\\\" (click)=\\\"plans.select(plan)\\\"\\r\\n                    [attr.aria-current]=\\\"plans.getItemAriaCurrent(plan)\\\" button detail=\\\"true\\\">\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">{{ plan.name }}</p>\\r\\n                        <p *ngIf=\\\"plan.duedate > 0\\\">\\r\\n                            {{ 'addon.competency.duedate' | translate }}:&nbsp;\\r\\n                            {{ plan.duedate * 1000 | coreFormatDate :'strftimedatetimeshort' }}\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                    <ion-badge slot=\\\"end\\\" class=\\\"ion-text-wrap\\\" [color]=\\\"plan.statuscolor\\\">{{ plan.statusname }}</ion-badge>\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Params } from '@angular/router';\nimport { CoreRoutedItemsManagerSource } from '@classes/items-management/routed-items-manager-source';\nimport { ADDON_COMPETENCY_COMPETENCIES_PAGE } from '../competency.module';\nimport { AddonCompetency, AddonCompetencyPlan, AddonCompetencyProvider } from '../services/competency';\nimport { AddonCompetencyHelper } from '../services/competency-helper';\n\n/**\n * Provides a collection of learning plans.\n */\nexport class AddonCompetencyPlansSource extends CoreRoutedItemsManagerSource<AddonCompetencyPlanFormatted> {\n\n    /**\n     * @inheritdoc\n     */\n    static getSourceId(userId?: number): string {\n        return userId ? String(userId) : 'current-user';\n    }\n\n    readonly USER_ID?: number;\n\n    constructor(userId?: number) {\n        super();\n\n        this.USER_ID = userId;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemPath(plan: AddonCompetencyPlanFormatted): string {\n        return `${plan.id}/${ADDON_COMPETENCY_COMPETENCIES_PAGE}`;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemQueryParams(): Params {\n        if (this.USER_ID) {\n            return { userId: this.USER_ID };\n        }\n\n        return {};\n    }\n\n    /**\n     * Invalidate learning plans cache.\n     */\n    async invalidateCache(): Promise<void> {\n        await AddonCompetency.invalidateLearningPlans(this.USER_ID);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async loadPageItems(): Promise<{ items: AddonCompetencyPlanFormatted[] }> {\n        const plans = await AddonCompetency.getLearningPlans(this.USER_ID);\n\n        plans.forEach((plan: AddonCompetencyPlanFormatted) => {\n            plan.statusname = AddonCompetencyHelper.getPlanStatusName(plan.status);\n            switch (plan.status) {\n                case AddonCompetencyProvider.STATUS_ACTIVE:\n                    plan.statuscolor = 'success';\n                    break;\n                case AddonCompetencyProvider.STATUS_COMPLETE:\n                    plan.statuscolor = 'danger';\n                    break;\n                default:\n                    plan.statuscolor = 'warning';\n                    break;\n            }\n        });\n\n        return { items: plans };\n    }\n\n}\n\n/**\n * Competency plan with some calculated data.\n */\nexport type AddonCompetencyPlanFormatted = AddonCompetencyPlan & {\n    statuscolor?: string; // Calculated in the app. Color of the plan's status.\n};\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonCompetencyPlanPage } from './pages/plan/plan';\nimport { AddonCompetencyPlanListPage } from './pages/planlist/planlist';\nimport { AddonCompetencyCompetencyPage } from './pages/competency/competency.page';\nimport { AddonCompetencyCompetencySummaryPage } from './pages/competencysummary/competencysummary.page';\nimport { ADDON_COMPETENCY_COMPETENCIES_PAGE, ADDON_COMPETENCY_SUMMARY_PAGE } from './competency.module';\nimport { AddonCompetencyCompetencyPageModule } from './pages/competency/competency.module';\nimport { AddonCompetencyCompetencySummaryPageModule } from './pages/competencysummary/competencysummary.module';\nimport { AddonCompetencyCompetenciesPage } from './pages/competencies/competencies.page';\nimport { AddonCompetencyCompetenciesPageModule } from './pages/competencies/competencies.module';\n\nconst mobileRoutes: Routes = [\n    {\n        path: '',\n        pathMatch: 'full',\n        component: AddonCompetencyPlanListPage,\n    },\n    {\n        path: `:planId/${ADDON_COMPETENCY_COMPETENCIES_PAGE}`,\n        component: AddonCompetencyPlanPage,\n    },\n    {\n        path: `:planId/${ADDON_COMPETENCY_COMPETENCIES_PAGE}/:competencyId`,\n        component: AddonCompetencyCompetencyPage,\n    },\n];\n\nconst tabletRoutes: Routes = [\n    {\n        path: '',\n        component: AddonCompetencyPlanListPage,\n        children: [\n            {\n                path: `:planId/${ADDON_COMPETENCY_COMPETENCIES_PAGE}`,\n                component: AddonCompetencyPlanPage,\n            },\n        ],\n    },\n    {\n        path: `:planId/${ADDON_COMPETENCY_COMPETENCIES_PAGE}`,\n        component: AddonCompetencyCompetenciesPage,\n        children: [\n            {\n                path: ':competencyId',\n                component: AddonCompetencyCompetencyPage,\n            },\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n    {\n        path: `:planId/${ADDON_COMPETENCY_COMPETENCIES_PAGE}/:competencyId/${ADDON_COMPETENCY_SUMMARY_PAGE}`,\n        component: AddonCompetencyCompetencySummaryPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonCompetencyCompetenciesPageModule,\n        AddonCompetencyCompetencyPageModule,\n        AddonCompetencyCompetencySummaryPageModule,\n    ],\n    declarations: [\n        AddonCompetencyPlanPage,\n        AddonCompetencyPlanListPage,\n    ],\n})\nexport class AddonCompetencyLearningPlansLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { AddonCompetencyDataForPlanPageCompetency, AddonCompetencyDataForPlanPageWSResponse } from '../../services/competency';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUserProfile } from '@features/user/services/user';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { AddonCompetencyPlansSource } from '@addons/competency/classes/competency-plans-source';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { AddonCompetencyPlanCompetenciesSource } from '@addons/competency/classes/competency-plan-competencies-source';\n\n/**\n * Page that displays a learning plan.\n */\n@Component({\n    selector: 'page-addon-competency-plan',\n    templateUrl: 'plan.html',\n})\nexport class AddonCompetencyPlanPage implements OnInit, OnDestroy {\n\n    plans!: CoreSwipeNavigationItemsManager;\n    competencies!: CoreListItemsManager<AddonCompetencyDataForPlanPageCompetency, AddonCompetencyPlanCompetenciesSource>;\n\n    constructor() {\n        try {\n            const planId = CoreNavigator.getRequiredRouteNumberParam('planId');\n            const userId = CoreNavigator.getRouteNumberParam('userId');\n            const plansSource = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                AddonCompetencyPlansSource,\n                [userId],\n            );\n            const competenciesSource = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                AddonCompetencyPlanCompetenciesSource,\n                [planId],\n            );\n\n            this.competencies = new CoreListItemsManager(competenciesSource, AddonCompetencyPlanPage);\n            this.plans = new CoreSwipeNavigationItemsManager(plansSource);\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n    }\n\n    get plan(): AddonCompetencyDataForPlanPageWSResponse | undefined {\n        return this.competencies.getSource().plan;\n    }\n\n    get user(): CoreUserProfile | undefined {\n        return this.competencies.getSource().user;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        await this.fetchLearningPlan();\n        await this.plans.start();\n        await this.competencies.start();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.plans.destroy();\n        this.competencies.destroy();\n    }\n\n    /**\n     * Fetches the learning plan and updates the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchLearningPlan(): Promise<void> {\n        try {\n            await this.competencies.getSource().reload();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting learning plan data.');\n        }\n    }\n\n    /**\n     * Refreshes the learning plan.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshLearningPlan(refresher: IonRefresher): Promise<void> {\n        await this.competencies.getSource().invalidateCache();\n\n        this.fetchLearningPlan().finally(() => {\n            refresher?.complete();\n        });\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreNavigator } from '@services/navigator';\nimport { AddonCompetencyPlanFormatted, AddonCompetencyPlansSource } from '@addons/competency/classes/competency-plans-source';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\n\n/**\n * Page that displays the list of learning plans.\n */\n@Component({\n    selector: 'page-addon-competency-planlist',\n    templateUrl: 'planlist.html',\n})\nexport class AddonCompetencyPlanListPage implements AfterViewInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    plans: CoreListItemsManager<AddonCompetencyPlanFormatted, AddonCompetencyPlansSource>;\n\n    constructor() {\n        const userId = CoreNavigator.getRouteNumberParam('userId');\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(AddonCompetencyPlansSource, [userId]);\n\n        this.plans = new CoreListItemsManager(source, AddonCompetencyPlanListPage);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchLearningPlans();\n\n        this.plans.start(this.splitView);\n    }\n\n    /**\n     * Fetches the learning plans and updates the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchLearningPlans(): Promise<void> {\n        try {\n            await this.plans.load();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting learning plans data.');\n        }\n    }\n\n    /**\n     * Refreshes the learning plans.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshLearningPlans(refresher: IonRefresher): Promise<void> {\n        await this.plans.getSource().invalidateCache();\n\n        this.plans.getSource().setDirty(true);\n        this.fetchLearningPlans().finally(() => {\n            refresher?.complete();\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.plans.destroy();\n    }\n\n}\n"],"sourceRoot":"webpack:///"}