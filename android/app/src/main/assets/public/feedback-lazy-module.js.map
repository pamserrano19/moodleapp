{"version":3,"sources":["./src/addons/mod/feedback/pages/attempts/attempts.html","./src/addons/mod/feedback/pages/index/index.html","./src/addons/mod/feedback/feedback-lazy.module.ts","./src/addons/mod/feedback/pages/attempts/attempts.ts","./src/addons/mod/feedback/pages/index/index.ts"],"names":[],"mappings":"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","file":"feedback-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.mod_feedback.responses' |translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!attempts || !attempts.loaded\\\" (ionRefresh)=\\\"refreshFeedback($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n        <core-loading [hideUntil]=\\\"attempts && attempts.loaded\\\">\\r\\n            <ion-list class=\\\"ion-no-margin\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap core-group-selector\\\"\\r\\n                    *ngIf=\\\"groupInfo && (groupInfo.separateGroups || groupInfo.visibleGroups)\\\">\\r\\n                    <ion-label id=\\\"addon-feedback-groupslabel\\\">\\r\\n                        <ng-container *ngIf=\\\"groupInfo.separateGroups\\\">{{'core.groupsseparate' | translate }}</ng-container>\\r\\n                        <ng-container *ngIf=\\\"groupInfo.visibleGroups\\\">{{'core.groupsvisible' | translate }}</ng-container>\\r\\n                    </ion-label>\\r\\n                    <ion-select [(ngModel)]=\\\"selectedGroup\\\" (ionChange)=\\\"reloadAttempts()\\\" aria-labelledby=\\\"addon-feedback-groupslabel\\\"\\r\\n                        interface=\\\"action-sheet\\\" [interfaceOptions]=\\\"{header: 'core.group' | translate}\\\">\\r\\n                        <ion-select-option *ngFor=\\\"let groupOpt of groupInfo.groups\\\" [value]=\\\"groupOpt.id\\\">\\r\\n                            {{groupOpt.name}}\\r\\n                        </ion-select-option>\\r\\n                    </ion-select>\\r\\n                </ion-item>\\r\\n\\r\\n                <ng-container *ngIf=\\\"identifiableAttemptsTotal > 0\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label>\\r\\n                            <h2>{{ 'addon.mod_feedback.non_anonymous_entries' | translate : {$a: identifiableAttemptsTotal } }}</h2>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <ion-item *ngFor=\\\"let attempt of identifiableAttempts\\\" class=\\\"ion-text-wrap\\\" button detail=\\\"true\\\"\\r\\n                        (click)=\\\"attempts?.select(attempt)\\\" [attr.aria-current]=\\\"attempts?.getItemAriaCurrent(attempt)\\\">\\r\\n                        <core-user-avatar [user]=\\\"attempt\\\" [linkProfile]=\\\"false\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ attempt.fullname }}</p>\\r\\n                            <p *ngIf=\\\"attempt.timemodified\\\">{{ attempt.timemodified * 1000 | coreFormatDate }}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n\\r\\n                <ng-container *ngIf=\\\"identifiableAttemptsTotal === identifiableAttempts.length && anonymousAttemptsTotal > 0\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label>\\r\\n                            <h2>{{ 'addon.mod_feedback.anonymous_entries' | translate : {$a: anonymousAttemptsTotal } }}</h2>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <ion-item *ngFor=\\\"let attempt of anonymousAttempts\\\" class=\\\"ion-text-wrap\\\" button detail=\\\"true\\\"\\r\\n                        (click)=\\\"attempts?.select(attempt)\\\" [attr.aria-current]=\\\"attempts?.getItemAriaCurrent(attempt)\\\">\\r\\n                        <core-user-avatar [linkProfile]=\\\"false\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.mod_feedback.anonymous_user' | translate }}</p>\\r\\n                            <p>{{ 'addon.mod_feedback.response_nr' | translate }}: {{attempt.number}}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n\\r\\n                <core-infinite-loading [enabled]=\\\"attempts && attempts.loaded && !attempts.completed\\\" [error]=\\\"fetchFailed\\\"\\r\\n                    (action)=\\\"fetchMoreAttempts($event)\\\">\\r\\n                </core-infinite-loading>\\r\\n            </ion-list>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header collapsible>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module?.id\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <!-- The buttons defined by the component will be added in here. -->\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"activityComponent?.showLoading\\\" (ionRefresh)=\\\"activityComponent?.doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <addon-mod-feedback-index [module]=\\\"module\\\" [courseId]=\\\"courseId\\\" [group]=\\\"selectedGroup\\\" [tab]=\\\"selectedTab\\\"\\r\\n        (dataRetrieved)=\\\"updateData($event)\\\"></addon-mod-feedback-index>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModFeedbackComponentsModule } from './components/components.module';\nimport { AddonModFeedbackIndexPage } from './pages/index/index';\nimport { AddonModFeedbackAttemptsPage } from './pages/attempts/attempts';\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\n\nconst commonRoutes: Routes = [\n    {\n        path: ':courseId/:cmId',\n        component: AddonModFeedbackIndexPage,\n    },\n    {\n        path: ':courseId/:cmId/form',\n        loadChildren: () => import('./pages/form/form.module').then(m => m.AddonModFeedbackFormPageModule),\n    },\n    {\n        path: ':courseId/:cmId/nonrespondents',\n        loadChildren: () => import('./pages/nonrespondents/nonrespondents.module')\n            .then(m => m.AddonModFeedbackNonRespondentsPageModule),\n    },\n];\n\nconst mobileRoutes: Routes = [\n    ...commonRoutes,\n    {\n        path: ':courseId/:cmId/attempts',\n        component: AddonModFeedbackAttemptsPage,\n    },\n    {\n        path: ':courseId/:cmId/attempts/:attemptId',\n        loadChildren: () => import('./pages/attempt/attempt.module').then(m => m.AddonModFeedbackAttemptPageModule),\n    },\n];\n\nconst tabletRoutes: Routes = [\n    ...commonRoutes,\n    {\n        path: ':courseId/:cmId/attempts',\n        component: AddonModFeedbackAttemptsPage,\n        children: [\n            {\n                path: ':attemptId',\n                loadChildren: () => import('./pages/attempt/attempt.module').then(m => m.AddonModFeedbackAttemptPageModule),\n            },\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonModFeedbackComponentsModule,\n    ],\n    declarations: [\n        AddonModFeedbackIndexPage,\n        AddonModFeedbackAttemptsPage,\n    ],\n})\nexport class AddonModFeedbackLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreListItemsManager } from '@classes/items-management/list-items-manager';\nimport { CorePromisedValue } from '@classes/promised-value';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreGroupInfo } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModFeedbackAttemptItem, AddonModFeedbackAttemptsSource } from '../../classes/feedback-attempts-source';\nimport { AddonModFeedbackWSAnonAttempt, AddonModFeedbackWSAttempt } from '../../services/feedback';\n\n/**\n * Page that displays feedback attempts.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-attempts',\n    templateUrl: 'attempts.html',\n})\nexport class AddonModFeedbackAttemptsPage implements AfterViewInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    promisedAttempts: CorePromisedValue<AddonModFeedbackAttemptsManager>;\n    fetchFailed = false;\n\n    constructor(protected route: ActivatedRoute) {\n        this.promisedAttempts = new CorePromisedValue();\n    }\n\n    get attempts(): AddonModFeedbackAttemptsManager | null {\n        return this.promisedAttempts.value;\n    }\n\n    get groupInfo(): CoreGroupInfo | undefined {\n        return this.attempts?.getSource().groupInfo;\n    }\n\n    get selectedGroup(): number | undefined {\n        return this.attempts?.getSource().selectedGroup;\n    }\n\n    set selectedGroup(group: number | undefined) {\n        if (!this.attempts) {\n            return;\n        }\n\n        this.attempts.getSource().selectedGroup = group;\n        this.attempts.getSource().setDirty(true);\n    }\n\n    get identifiableAttempts(): AddonModFeedbackWSAttempt[] {\n        return this.attempts?.getSource().identifiable ?? [];\n    }\n\n    get identifiableAttemptsTotal(): number {\n        return this.attempts?.getSource().identifiableTotal ?? 0;\n    }\n\n    get anonymousAttempts(): AddonModFeedbackWSAnonAttempt[] {\n        return this.attempts?.getSource().anonymous ?? [];\n    }\n\n    get anonymousAttemptsTotal(): number {\n        return this.attempts?.getSource().anonymousTotal ?? 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        try {\n            const cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            const courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                AddonModFeedbackAttemptsSource,\n                [courseId, cmId],\n            );\n\n            source.selectedGroup = CoreNavigator.getRouteNumberParam('group') || 0;\n\n            this.promisedAttempts.resolve(new AddonModFeedbackAttemptsManager(source, this.route.component));\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        const attempts = await this.promisedAttempts;\n\n        try {\n            this.fetchFailed = false;\n\n            await attempts.getSource().loadFeedback();\n            await attempts.load();\n        } catch (error) {\n            this.fetchFailed = true;\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        }\n\n        await attempts.start(this.splitView);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.attempts?.destroy();\n    }\n\n    /**\n     * Fetch more attempts, if any.\n     *\n     * @param infiniteComplete Complete callback for infinite loader.\n     */\n    async fetchMoreAttempts(infiniteComplete?: () => void): Promise<void> {\n        const attempts = await this.promisedAttempts;\n\n        try {\n            this.fetchFailed = false;\n\n            await attempts.load();\n        } catch (error) {\n            this.fetchFailed = true;\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        } finally {\n            infiniteComplete && infiniteComplete();\n        }\n    }\n\n    /**\n     * Refresh the attempts.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshFeedback(refresher: IonRefresher): Promise<void> {\n        const attempts = await this.promisedAttempts;\n\n        try {\n            this.fetchFailed = false;\n\n            await CoreUtils.ignoreErrors(attempts.getSource().invalidateCache());\n            await attempts.getSource().loadFeedback();\n            await attempts.reload();\n        } catch (error) {\n            this.fetchFailed = true;\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        } finally {\n            refresher.complete();\n        }\n    }\n\n    /**\n     * Reload attempts list.\n     */\n    async reloadAttempts(): Promise<void> {\n        const attempts = await this.promisedAttempts;\n\n        await attempts.reload();\n    }\n\n}\n\n/**\n * Attempts manager.\n */\nclass AddonModFeedbackAttemptsManager extends CoreListItemsManager<AddonModFeedbackAttemptItem, AddonModFeedbackAttemptsSource> {\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { CoreCourseModuleMainActivityPage } from '@features/course/classes/main-activity-page';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { AddonModFeedbackIndexComponent } from '../../components/index/index';\r\n\r\n/**\r\n * Page that displays a feedback.\r\n */\r\n@Component({\r\n    selector: 'page-addon-mod-feedback-index',\r\n    templateUrl: 'index.html',\r\n})\r\nexport class AddonModFeedbackIndexPage extends CoreCourseModuleMainActivityPage<AddonModFeedbackIndexComponent> implements OnInit {\r\n\r\n    @ViewChild(AddonModFeedbackIndexComponent) activityComponent?: AddonModFeedbackIndexComponent;\r\n\r\n    selectedTab?: string;\r\n    selectedGroup?: number;\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.selectedTab = CoreNavigator.getRouteParam('tab');\r\n        this.selectedGroup = CoreNavigator.getRouteNumberParam('group');\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}