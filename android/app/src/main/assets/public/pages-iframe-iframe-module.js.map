{"version":3,"sources":["./src/core/features/viewer/pages/iframe/iframe.html","./src/core/features/viewer/pages/iframe/iframe.module.ts","./src/core/features/viewer/pages/iframe/iframe.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,sSAAuO,SAAS,+PAA+P,E;;;;;;;;;;;;ACA9f;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEQ;AACc;AAEC;AACR;AAEhD,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,4DAAoB;KAClC;CACJ,CAAC;IAYW,0BAA0B,SAA1B,0BAA0B;CAAG;AAA7B,0BAA0B;IAVtC,8DAAQ,CAAC;QACN,OAAO,EAAE;YACL,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC7B,oEAAgB;SACnB;QACD,YAAY,EAAE;YACV,4DAAoB;SACvB;QACD,OAAO,EAAE,CAAC,4DAAY,CAAC;KAC1B,CAAC;GACW,0BAA0B,CAAG;AAAH;;;;;;;;;;;;;ACrCvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEiB;AACE;AAER;AAE5C;;GAEG;IAKU,oBAAoB,SAApB,oBAAoB;IAWvB,QAAQ;;YACV,IAAI,CAAC,KAAK,GAAG,iEAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAClD,IAAI,CAAC,GAAG,GAAG,iEAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC9C,IAAI,CAAC,SAAS,GAAG,iEAAa,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC;YAErE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACX,OAAO;aACV;YAED,MAAM,WAAW,GAAG,yDAAS,CAAC,cAAc,EAAE,CAAC;YAE/C,IAAI,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,OAAO,IAAI,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAC9G,oCAAoC;gBACpC,IAAI,CAAC,QAAQ,GAAG,MAAM,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;aACtE;iBAAM;gBACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC;aAC5B;QACL,CAAC;KAAA;CAEJ;AA9BY,oBAAoB;IAJhC,+DAAS,CAAC;QACP,QAAQ,EAAE,oBAAoB;QAC9B,iOAA0B;KAC7B,CAAC;GACW,oBAAoB,CA8BhC;AA9BgC","file":"pages-iframe-iframe-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ title }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-loading [hideUntil]=\\\"finalUrl\\\">\\r\\n        <core-iframe *ngIf=\\\"finalUrl\\\" [src]=\\\"finalUrl\\\"></core-iframe>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreViewerIframePage } from './iframe';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreViewerIframePage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        CoreViewerIframePage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class CoreViewerIframePageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { CoreNavigator } from '@services/navigator';\r\n\r\nimport { CoreSites } from '@services/sites';\r\n\r\n/**\r\n * Page to display a URL in an iframe.\r\n */\r\n@Component({\r\n    selector: 'core-viewer-iframe',\r\n    templateUrl: 'iframe.html',\r\n})\r\nexport class CoreViewerIframePage implements OnInit {\r\n\r\n    title?: string; // Page title.\r\n    url?: string; // Iframe URL.\r\n    /* Whether the URL should be open with auto-login. Accepts the following values:\r\n        \"yes\" -> Always auto-login.\r\n        \"no\" -> Never auto-login.\r\n        \"check\" -> Auto-login only if it points to the current site. Default value. */\r\n    autoLogin?: string;\r\n    finalUrl?: string;\r\n\r\n    async ngOnInit(): Promise<void> {\r\n        this.title = CoreNavigator.getRouteParam('title');\r\n        this.url = CoreNavigator.getRouteParam('url');\r\n        this.autoLogin = CoreNavigator.getRouteParam('autoLogin') || 'check';\r\n\r\n        if (!this.url) {\r\n            return;\r\n        }\r\n\r\n        const currentSite = CoreSites.getCurrentSite();\r\n\r\n        if (currentSite && (this.autoLogin == 'yes' || (this.autoLogin == 'check' && currentSite.containsUrl(this.url)))) {\r\n            // Format the URL to add auto-login.\r\n            this.finalUrl = await currentSite.getAutoLoginUrl(this.url, false);\r\n        } else {\r\n            this.finalUrl = this.url;\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}