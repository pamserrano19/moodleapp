{"version":3,"sources":["./src/addons/mod/glossary/pages/entry/entry.html","./src/addons/mod/glossary/pages/entry/entry.module.ts","./src/addons/mod/glossary/pages/entry/entry.ts","./src/core/classes/items-management/swipe-navigation-items-manager.ts"],"names":[],"mappings":"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","file":"pages-entry-entry-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"entry\\\">\\r\\n                <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [core-swipe-navigation]=\\\"entries\\\" class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ng-container *ngIf=\\\"entry && loaded\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"showAuthor\\\">\\r\\n                <core-user-avatar [user]=\\\"entry\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>\\r\\n                        <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\"\\r\\n                            [courseId]=\\\"courseId\\\">\\r\\n                        </core-format-text>\\r\\n                    </h2>\\r\\n                    <p>{{ entry.userfullname }}</p>\\r\\n                </ion-label>\\r\\n                <ion-note slot=\\\"end\\\" *ngIf=\\\"showDate\\\">{{ entry.timemodified | coreDateDayOrTime }}</ion-note>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!showAuthor\\\">\\r\\n                <ion-label>\\r\\n                    <p class=\\\"item-heading\\\">\\r\\n                        <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\">\\r\\n                        </core-format-text>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n                <ion-note slot=\\\"end\\\" *ngIf=\\\"showDate\\\">{{ entry.timemodified | coreDateDayOrTime }}</ion-note>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"componentId\\\" [text]=\\\"entry.definition\\\" contextLevel=\\\"module\\\"\\r\\n                        [contextInstanceId]=\\\"componentId\\\" [courseId]=\\\"courseId\\\">\\r\\n                    </core-format-text>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <div *ngIf=\\\"entry.attachment\\\">\\r\\n                <core-file *ngFor=\\\"let file of entry.attachments\\\" [file]=\\\"file\\\" [component]=\\\"component\\\" [componentId]=\\\"componentId\\\">\\r\\n                </core-file>\\r\\n            </div>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"tagsEnabled && entry && entry.tags && entry.tags.length > 0\\\">\\r\\n                <ion-label>\\r\\n                    <div slot=\\\"start\\\">{{ 'core.tag.tags' | translate }}:</div>\\r\\n                    <core-tag-list [tags]=\\\"entry.tags\\\"></core-tag-list>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!entry.approved\\\">\\r\\n                <ion-label>\\r\\n                    <p><em>{{ 'addon.mod_glossary.entrypendingapproval' | translate }}</em></p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <core-comments *ngIf=\\\"glossary && glossary.allowcomments && entry && entry.id > 0 && commentsEnabled\\\" contextLevel=\\\"module\\\"\\r\\n                [instanceId]=\\\"glossary.coursemodule\\\" component=\\\"mod_glossary\\\" [itemId]=\\\"entry.id\\\" area=\\\"glossary_entry\\\"\\r\\n                [courseId]=\\\"glossary.course\\\" [showItem]=\\\"true\\\">\\r\\n            </core-comments>\\r\\n            <core-rating-rate *ngIf=\\\"glossary && ratingInfo\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\r\\n                [instanceId]=\\\"glossary.coursemodule\\\" [itemId]=\\\"entry.id\\\" [itemSetId]=\\\"0\\\" [courseId]=\\\"glossary.course\\\"\\r\\n                [aggregateMethod]=\\\"glossary.assessed\\\" [scaleId]=\\\"glossary.scale\\\" [userId]=\\\"entry.userid\\\" (onUpdate)=\\\"ratingUpdated()\\\">\\r\\n            </core-rating-rate>\\r\\n            <core-rating-aggregate *ngIf=\\\"glossary && ratingInfo\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\r\\n                [instanceId]=\\\"glossary.coursemodule\\\" [itemId]=\\\"entry.id\\\" [courseId]=\\\"glossary.course\\\" [aggregateMethod]=\\\"glossary.assessed\\\"\\r\\n                [scaleId]=\\\"glossary.scale\\\">\\r\\n            </core-rating-aggregate>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-card *ngIf=\\\"!entry\\\" class=\\\"core-warning-card\\\">\\r\\n            <ion-item>\\r\\n                <ion-label>{{ 'addon.mod_glossary.errorloadingentry' | translate }}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonModGlossaryEntryPage } from './entry';\r\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\r\nimport { CoreRatingComponentsModule } from '@features/rating/components/components.module';\r\nimport { CoreTagComponentsModule } from '@features/tag/components/components.module';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [{\r\n    path: '',\r\n    component: AddonModGlossaryEntryPage,\r\n}];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonModGlossaryEntryPage,\r\n    ],\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreCommentsComponentsModule,\r\n        CoreRatingComponentsModule,\r\n        CoreTagComponentsModule,\r\n    ],\r\n})\r\nexport class AddonModGlossaryEntryPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreCommentsCommentsComponent } from '@features/comments/components/comments/comments';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreRatingInfo } from '@features/rating/services/rating';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModGlossaryEntriesSource } from '../../classes/glossary-entries-source';\nimport { AddonModGlossaryEntriesSwipeManager } from '../../classes/glossary-entries-swipe-manager';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryEntry,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryProvider,\n} from '../../services/glossary';\n\n/**\n * Page that displays a glossary entry.\n */\n@Component({\n    selector: 'page-addon-mod-glossary-entry',\n    templateUrl: 'entry.html',\n})\nexport class AddonModGlossaryEntryPage implements OnInit, OnDestroy {\n\n    @ViewChild(CoreCommentsCommentsComponent) comments?: CoreCommentsCommentsComponent;\n\n    component = AddonModGlossaryProvider.COMPONENT;\n    componentId?: number;\n    entry?: AddonModGlossaryEntry;\n    entries?: AddonModGlossaryEntryEntriesSwipeManager;\n    glossary?: AddonModGlossaryGlossary;\n    loaded = false;\n    showAuthor = false;\n    showDate = false;\n    ratingInfo?: CoreRatingInfo;\n    tagsEnabled = false;\n    commentsEnabled = false;\n    courseId!: number;\n    cmId?: number;\n\n    protected entryId!: number;\n\n    constructor(protected route: ActivatedRoute) {}\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            const routeData = this.route.snapshot.data;\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.entryId = CoreNavigator.getRequiredRouteNumberParam('entryId');\n            this.tagsEnabled = CoreTag.areTagsAvailableInSite();\n            this.commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n\n            if (routeData.swipeEnabled ?? true) {\n                this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n                const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                    AddonModGlossaryEntriesSource,\n                    [this.courseId, this.cmId, routeData.glossaryPathPrefix ?? ''],\n                );\n\n                this.entries = new AddonModGlossaryEntryEntriesSwipeManager(source);\n\n                await this.entries.start();\n            } else {\n                this.cmId = CoreNavigator.getRouteNumberParam('cmId');\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        try {\n            await this.fetchEntry();\n\n            if (!this.glossary || !this.componentId) {\n                return;\n            }\n\n            await CoreUtils.ignoreErrors(AddonModGlossary.logEntryView(this.entryId, this.componentId, this.glossary.name));\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.entries?.destroy();\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    async doRefresh(refresher?: IonRefresher): Promise<void> {\n        if (this.glossary?.allowcomments && this.entry && this.entry.id > 0 && this.commentsEnabled && this.comments) {\n            // Refresh comments. Don't add it to promises because we don't want the comments fetch to block the entry fetch.\n            CoreUtils.ignoreErrors(this.comments.doRefresh());\n        }\n\n        try {\n            await CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(this.entryId));\n\n            await this.fetchEntry();\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Convenience function to get the glossary entry.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchEntry(): Promise<void> {\n        try {\n            const result = await AddonModGlossary.getEntry(this.entryId);\n\n            this.entry = result.entry;\n            this.ratingInfo = result.ratinginfo;\n\n            if (this.glossary) {\n                // Glossary already loaded, nothing else to load.\n                return;\n            }\n\n            // Load the glossary.\n            this.glossary = await AddonModGlossary.getGlossaryById(this.courseId, this.entry.glossaryid);\n            this.componentId = this.glossary.coursemodule;\n\n            switch (this.glossary.displayformat) {\n                case 'fullwithauthor':\n                case 'encyclopedia':\n                    this.showAuthor = true;\n                    this.showDate = true;\n                    break;\n                case 'fullwithoutauthor':\n                    this.showAuthor = false;\n                    this.showDate = true;\n                    break;\n                default: // Default, and faq, simple, entrylist, continuous.\n                    this.showAuthor = false;\n                    this.showDate = false;\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n        }\n    }\n\n    /**\n     * Function called when rating is updated online.\n     */\n    ratingUpdated(): void {\n        AddonModGlossary.invalidateEntry(this.entryId);\n    }\n\n}\n\n/**\n * Helper to manage swiping within a collection of glossary entries.\n */\nclass AddonModGlossaryEntryEntriesSwipeManager extends AddonModGlossaryEntriesSwipeManager {\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        return `${this.getSource().GLOSSARY_PATH_PREFIX}entry/${route.params.entryId}`;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\n\nimport { CoreNavigator } from '@services/navigator';\n\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\n\n/**\n * Helper class to manage the state and routing of a swipeable page.\n */\nexport class CoreSwipeNavigationItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>\n>\n    extends CoreRoutedItemsManager<Item, Source> {\n\n    /**\n     * Process page started operations.\n     */\n    async start(): Promise<void> {\n        this.updateSelectedItem();\n    }\n\n    /**\n     * Navigate to the next item.\n     */\n    async navigateToNextItem(): Promise<void> {\n        await this.navigateToItemBy(1, 'forward');\n    }\n\n    /**\n     * Navigate to the previous item.\n     */\n    async navigateToPreviousItem(): Promise<void> {\n        await this.navigateToItemBy(-1, 'back');\n    }\n\n    /**\n     * Has a next item.\n     */\n    async hasNextItem(): Promise<boolean> {\n        const item = await this.getItemBy(1);\n\n        return !!item;\n    }\n\n    /**\n     * Has a previous item.\n     */\n    async hasPreviousItem(): Promise<boolean> {\n        const item = await this.getItemBy(-1);\n\n        return !!item;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getCurrentPageRoute(): ActivatedRoute | null {\n        return CoreNavigator.getCurrentRoute();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        const segments: UrlSegment[] = [];\n\n        while (route) {\n            segments.push(...route.url);\n\n            if (!route.firstChild) {\n                break;\n            }\n\n            route = route.firstChild;\n        }\n\n        return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n    }\n\n    /**\n     * Navigate to an item by an offset.\n     *\n     * @param delta Index offset.\n     * @param animationDirection Animation direction.\n     */\n    protected async navigateToItemBy(delta: number, animationDirection: 'forward' | 'back'): Promise<void> {\n        const item = await this.getItemBy(delta);\n\n        if (!item) {\n            return;\n        }\n\n        await this.navigateToItem(item, { animationDirection, replace: true });\n    }\n\n    /**\n     * Get item by an offset.\n     *\n     * @param delta Index offset.\n     */\n    protected async getItemBy(delta: number): Promise<Item | null> {\n        const items = this.getSource().getItems();\n        const selectedIndex = (this.selectedItem && items?.indexOf(this.selectedItem)) ?? -1;\n\n        if (selectedIndex === -1 || items === null) {\n            return null;\n        }\n\n        const deltaStep = delta > 0 ? 1 : -1;\n        let nextIndex = selectedIndex;\n        let deltaMoved = 0;\n\n        while (deltaMoved !== delta) {\n            nextIndex += deltaStep;\n\n            if (nextIndex < 0 || nextIndex >= items.length) {\n                break;\n            }\n\n            if (this.skipItemInSwipe(items[nextIndex])) {\n                continue;\n            }\n\n            deltaMoved += deltaStep;\n        }\n\n        if (deltaMoved === delta) {\n            return items[nextIndex];\n        }\n\n        if (!this.getSource().isCompleted()) {\n            await this.getSource().load();\n\n            return this.getItemBy(delta);\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if an item should be skipped during swipe navigation.\n     *\n     * @param item Item.\n     * @returns Whether to skip this item during swipe navigation.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected skipItemInSwipe(item: Item): boolean {\n        return false;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}