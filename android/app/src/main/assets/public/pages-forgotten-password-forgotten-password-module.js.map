{"version":3,"sources":["./src/core/features/login/pages/forgotten-password/forgotten-password.html","./src/core/features/login/pages/forgotten-password/forgotten-password.module.ts","./src/core/features/login/pages/forgotten-password/forgotten-password.ts"],"names":[],"mappings":"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","file":"pages-forgotten-password-forgotten-password-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-title>\\r\\n            <h1>{{ 'core.login.passwordforgotten' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <div class=\\\"list-item-limited-width\\\">\\r\\n\\r\\n        <ion-list>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>{{ 'core.login.passwordforgotteninstructions2' | translate }}</ion-label>\\r\\n            </ion-item>\\r\\n        </ion-list>\\r\\n        <ion-card>\\r\\n            <form [formGroup]=\\\"myForm\\\" (ngSubmit)=\\\"resetPassword($event)\\\" #resetPasswordForm>\\r\\n                <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'core.login.searchby' | translate }}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-radio-group formControlName=\\\"field\\\">\\r\\n                    <ion-item>\\r\\n                        <ion-label>{{ 'core.login.username' | translate }}</ion-label>\\r\\n                        <ion-radio slot=\\\"end\\\" value=\\\"username\\\"></ion-radio>\\r\\n                    </ion-item>\\r\\n                    <ion-item>\\r\\n                        <ion-label>{{ 'core.user.email' | translate }}</ion-label>\\r\\n                        <ion-radio slot=\\\"end\\\" value=\\\"email\\\"></ion-radio>\\r\\n                    </ion-item>\\r\\n                </ion-radio-group>\\r\\n                <ion-item>\\r\\n                    <ion-label class=\\\"sr-only\\\">{{ 'core.login.usernameoremail' | translate }}</ion-label>\\r\\n                    <ion-input type=\\\"text\\\" name=\\\"value\\\" placeholder=\\\"{{ 'core.login.usernameoremail' | translate }}\\\" formControlName=\\\"value\\\"\\r\\n                        autocapitalize=\\\"none\\\" autocorrect=\\\"off\\\" [core-auto-focus]=\\\"autoFocus\\\">\\r\\n                    </ion-input>\\r\\n                </ion-item>\\r\\n                <ion-button type=\\\"submit\\\" class=\\\"ion-margin\\\" expand=\\\"block\\\" [disabled]=\\\"!myForm.valid\\\">\\r\\n                    {{ 'core.courses.search' | translate }}\\r\\n                </ion-button>\\r\\n            </form>\\r\\n        </ion-card>\\r\\n    </div>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreLoginForgottenPasswordPage } from './forgotten-password';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreLoginForgottenPasswordPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        CoreLoginForgottenPasswordPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class CoreLoginForgottenPasswordPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\r\nimport { Translate, Platform } from '@singletons';\r\nimport { CoreWSExternalWarning } from '@services/ws';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreForms } from '@singletons/form';\r\n\r\n/**\r\n * Page to recover a forgotten password.\r\n */\r\n@Component({\r\n    selector: 'page-core-login-forgotten-password',\r\n    templateUrl: 'forgotten-password.html',\r\n})\r\nexport class CoreLoginForgottenPasswordPage implements OnInit {\r\n\r\n    @ViewChild('resetPasswordForm') formElement?: ElementRef;\r\n\r\n    myForm!: FormGroup;\r\n    siteUrl!: string;\r\n    autoFocus!: boolean;\r\n\r\n    constructor(\r\n        protected formBuilder: FormBuilder,\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * Initialize the component.\r\n     */\r\n    ngOnInit(): void {\r\n        const siteUrl = CoreNavigator.getRouteParam<string>('siteUrl');\r\n        if (!siteUrl) {\r\n            CoreDomUtils.showErrorModal('Site URL not supplied.');\r\n            CoreNavigator.back();\r\n\r\n            return;\r\n        }\r\n\r\n        this.siteUrl = siteUrl;\r\n        this.autoFocus = Platform.is('tablet');\r\n        this.myForm = this.formBuilder.group({\r\n            field: ['username', Validators.required],\r\n            value: [CoreNavigator.getRouteParam<string>('username') || '', Validators.required],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Request to reset the password.\r\n     *\r\n     * @param e Event.\r\n     */\r\n    async resetPassword(e: Event): Promise<void> {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        const field = this.myForm.value.field;\r\n        const value = this.myForm.value.value;\r\n\r\n        if (!value) {\r\n            CoreDomUtils.showErrorModal('core.login.usernameoremail', true);\r\n\r\n            return;\r\n        }\r\n\r\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\r\n        const isMail = field == 'email';\r\n\r\n        try {\r\n            const response = await CoreLoginHelper.requestPasswordReset(\r\n                this.siteUrl,\r\n                isMail ? '' : value,\r\n                isMail ? value : '',\r\n            );\r\n\r\n            if (response.status == 'dataerror') {\r\n                // Error in the data sent.\r\n                this.showError(isMail, response.warnings!);\r\n            } else if (response.status == 'emailpasswordconfirmnotsent' || response.status == 'emailpasswordconfirmnoemail') {\r\n                // Error, not found.\r\n                CoreDomUtils.showErrorModal(response.notice);\r\n            } else {\r\n                // Success.\r\n                CoreForms.triggerFormSubmittedEvent(this.formElement, true);\r\n\r\n                CoreDomUtils.showAlert(Translate.instant('core.success'), response.notice);\r\n                CoreNavigator.back();\r\n            }\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModal(error);\r\n        } finally {\r\n            modal.dismiss();\r\n        }\r\n    }\r\n\r\n    // Show an error from the warnings.\r\n    protected showError(isMail: boolean, warnings: CoreWSExternalWarning[]): void {\r\n        for (let i = 0; i < warnings.length; i++) {\r\n            const warning = warnings[i];\r\n            if ((warning.item == 'email' && isMail) || (warning.item == 'username' && !isMail)) {\r\n                CoreDomUtils.showErrorModal(warning.message);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}