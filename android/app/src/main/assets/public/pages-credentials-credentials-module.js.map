{"version":3,"sources":["./src/core/features/login/pages/credentials/credentials.html","./src/core/features/login/pages/credentials/credentials.module.ts","./src/core/features/login/pages/credentials/credentials.ts"],"names":[],"mappings":"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","file":"pages-credentials-credentials-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-title>\\r\\n            <h1>{{ 'core.login.login' | translate }}</h1>\\r\\n        </ion-title>\\r\\n\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"openSettings()\\\" [attr.aria-label]=\\\"'core.settings.appsettings' | translate\\\">\\r\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"fas-cog\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"ion-padding limited-width\\\">\\r\\n    <core-loading [hideUntil]=\\\"pageLoaded\\\">\\r\\n        <div class=\\\"ion-text-wrap ion-text-center ion-margin-bottom\\\">\\r\\n            <div class=\\\"core-login-site-logo\\\">\\r\\n                <!-- Show site logo or a default image. -->\\r\\n                <img *ngIf=\\\"logoUrl\\\" [src]=\\\"logoUrl\\\" role=\\\"presentation\\\" alt=\\\"\\\" onError=\\\"this.src='assets/img/login_logo.png'\\\">\\r\\n                <img *ngIf=\\\"!logoUrl\\\" src=\\\"assets/img/login_logo.png\\\" role=\\\"presentation\\\" alt=\\\"\\\">\\r\\n            </div>\\r\\n\\r\\n            <h3 *ngIf=\\\"siteName\\\" class=\\\"ion-padding core-sitename\\\">\\r\\n                <core-format-text [text]=\\\"siteName\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n            </h3>\\r\\n            <p class=\\\"core-siteurl\\\">{{siteUrl}}</p>\\r\\n        </div>\\r\\n\\r\\n        <form [formGroup]=\\\"credForm\\\" (ngSubmit)=\\\"login($event)\\\" class=\\\"core-login-form\\\" #credentialsForm>\\r\\n            <ion-item *ngIf=\\\"siteChecked && !isBrowserSSO\\\">\\r\\n                <ion-label class=\\\"sr-only\\\">{{ 'core.login.username' | translate }}</ion-label>\\r\\n                <ion-input type=\\\"text\\\" name=\\\"username\\\" placeholder=\\\"{{ 'core.login.username' | translate }}\\\" formControlName=\\\"username\\\"\\r\\n                    autocapitalize=\\\"none\\\" autocorrect=\\\"off\\\" autocomplete=\\\"username\\\" enterkeyhint=\\\"next\\\" required=\\\"true\\\">\\r\\n                </ion-input>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"siteChecked && !isBrowserSSO\\\" class=\\\"ion-margin-bottom\\\">\\r\\n                <ion-label class=\\\"sr-only\\\">{{ 'core.login.password' | translate }}</ion-label>\\r\\n                <core-show-password name=\\\"password\\\">\\r\\n                    <ion-input name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"{{ 'core.login.password' | translate }}\\\"\\r\\n                        formControlName=\\\"password\\\" [clearOnEdit]=\\\"false\\\" autocomplete=\\\"current-password\\\" enterkeyhint=\\\"go\\\" required=\\\"true\\\">\\r\\n                    </ion-input>\\r\\n                </core-show-password>\\r\\n            </ion-item>\\r\\n            <ion-button expand=\\\"block\\\" type=\\\"submit\\\" [disabled]=\\\"siteChecked && !isBrowserSSO && !credForm.valid\\\"\\r\\n                class=\\\"ion-margin core-login-login-button ion-text-wrap\\\">\\r\\n                {{ 'core.login.loginbutton' | translate }}\\r\\n            </ion-button>\\r\\n            <!-- Remove this once Ionic fixes this bug: https://github.com/ionic-team/ionic-framework/issues/19368 -->\\r\\n            <input type=\\\"submit\\\" class=\\\"core-submit-hidden-enter\\\" />\\r\\n\\r\\n            <ng-container *ngIf=\\\"showScanQR\\\">\\r\\n                <div class=\\\"ion-text-center ion-padding\\\">{{ 'core.login.or' | translate }}</div>\\r\\n                <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" class=\\\"ion-margin\\\" (click)=\\\"showInstructionsAndScanQR()\\\">\\r\\n                    <ion-icon slot=\\\"start\\\" name=\\\"fas-qrcode\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    {{ 'core.scanqr' | translate }}\\r\\n                </ion-button>\\r\\n            </ng-container>\\r\\n        </form>\\r\\n\\r\\n        <!-- Forgotten password option. -->\\r\\n        <ion-button *ngIf=\\\"showForgottenPassword\\\" expand=\\\"block\\\" fill=\\\"clear\\\"\\r\\n            class=\\\"core-login-forgotten-password core-button-as-link ion-text-wrap\\\" (click)=\\\"forgottenPassword()\\\">\\r\\n            {{ 'core.login.forgotten' | translate }}\\r\\n        </ion-button>\\r\\n\\r\\n        <ion-list *ngIf=\\\"identityProviders && identityProviders.length\\\" class=\\\"ion-padding-top core-login-identity-providers\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h3 class=\\\"item-heading\\\">{{ 'core.login.potentialidps' | translate }}</h3>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-button fill=\\\"outline\\\" *ngFor=\\\"let provider of identityProviders\\\" class=\\\"ion-text-wrap ion-margin core-oauth-provider\\\"\\r\\n                (click)=\\\"oauthClicked(provider)\\\" [attr.aria-label]=\\\"provider.name\\\" expand=\\\"block\\\">\\r\\n                <img [src]=\\\"provider.iconurl\\\" alt=\\\"\\\" width=\\\"32\\\" height=\\\"32\\\" slot=\\\"start\\\">\\r\\n                <ion-label>{{provider.name}}</ion-label>\\r\\n            </ion-button>\\r\\n        </ion-list>\\r\\n\\r\\n        <ion-list *ngIf=\\\"canSignup\\\" class=\\\"ion-padding-top core-login-sign-up\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h3 class=\\\"item-heading\\\">{{ 'core.login.firsttime' | translate }}</h3>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"authInstructions\\\">\\r\\n                <ion-label>\\r\\n                    <p>\\r\\n                        <core-format-text [text]=\\\"authInstructions\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-button expand=\\\"block\\\" class=\\\"ion-margin ion-text-wrap\\\" fill=\\\"outline\\\" (click)=\\\"openEmailSignup()\\\">\\r\\n                {{ 'core.login.startsignup' | translate }}\\r\\n            </ion-button>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreLoginCredentialsPage } from './credentials';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreLoginCredentialsPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        CoreLoginCredentialsPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class CoreLoginCredentialsPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { CoreApp } from '@services/app';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreConstants } from '@/core/constants';\nimport { Translate } from '@singletons';\nimport { CoreSiteIdentityProvider, CoreSitePublicConfigResponse } from '@classes/site';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreForms } from '@singletons/form';\n\n/**\n * Page to enter the user credentials.\n */\n@Component({\n    selector: 'page-core-login-credentials',\n    templateUrl: 'credentials.html',\n    styleUrls: ['../../login.scss'],\n})\nexport class CoreLoginCredentialsPage implements OnInit, OnDestroy {\n\n    @ViewChild('credentialsForm') formElement?: ElementRef<HTMLFormElement>;\n\n    credForm!: FormGroup;\n    siteUrl!: string;\n    siteChecked = false;\n    siteName?: string;\n    logoUrl?: string;\n    authInstructions?: string;\n    canSignup?: boolean;\n    identityProviders?: CoreSiteIdentityProvider[];\n    pageLoaded = false;\n    isBrowserSSO = false;\n    isFixedUrlSet = false;\n    showForgottenPassword = true;\n    showScanQR = false;\n\n    protected siteConfig?: CoreSitePublicConfigResponse;\n    protected eventThrown = false;\n    protected viewLeft = false;\n    protected siteId?: string;\n    protected urlToOpen?: string;\n    protected valueChangeSubscription?: Subscription;\n\n    constructor(\n        protected fb: FormBuilder,\n    ) {}\n\n    /**\n     * Initialize the component.\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            this.siteUrl = CoreNavigator.getRequiredRouteParam<string>('siteUrl');\n\n            this.siteName = CoreNavigator.getRouteParam('siteName');\n            this.logoUrl = !CoreConstants.CONFIG.forceLoginLogo && CoreNavigator.getRouteParam('logoUrl') || undefined;\n            this.siteConfig = CoreNavigator.getRouteParam('siteConfig');\n            this.urlToOpen = CoreNavigator.getRouteParam('urlToOpen');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            return CoreNavigator.back();\n        }\n\n        this.credForm = this.fb.group({\n            username: [CoreNavigator.getRouteParam<string>('username') || '', Validators.required],\n            password: ['', Validators.required],\n        });\n\n        if (this.siteConfig) {\n            this.treatSiteConfig();\n        }\n        this.isFixedUrlSet = CoreLoginHelper.isFixedUrlSet();\n\n        if (this.isFixedUrlSet || !this.siteConfig) {\n            // Fixed URL or not siteConfig retrieved from params, we need to check if it uses browser SSO login.\n            this.checkSite(this.siteUrl, true);\n        } else {\n            this.siteChecked = true;\n            this.pageLoaded = true;\n        }\n\n        if (CoreApp.isIOS()) {\n            // Make iOS auto-fill work. The field that isn't focused doesn't get updated, do it manually.\n            // Debounce it to prevent triggering this function too often when the user is typing.\n            this.valueChangeSubscription = this.credForm.valueChanges.pipe(debounceTime(1000)).subscribe((changes) => {\n                if (!this.formElement || !this.formElement.nativeElement) {\n                    return;\n                }\n\n                const usernameInput = this.formElement.nativeElement.querySelector<HTMLInputElement>('input[name=\"username\"]');\n                const passwordInput = this.formElement.nativeElement.querySelector<HTMLInputElement>('input[name=\"password\"]');\n                const usernameValue = usernameInput?.value;\n                const passwordValue = passwordInput?.value;\n\n                if (usernameValue !== undefined && usernameValue !== changes.username) {\n                    this.credForm.get('username')?.setValue(usernameValue);\n                }\n                if (passwordValue !== undefined && passwordValue !== changes.password) {\n                    this.credForm.get('password')?.setValue(passwordValue);\n                }\n            });\n        }\n    }\n\n    /**\n     * Get site config and check if it requires SSO login.\n     * This should be used only if a fixed URL is set, otherwise this check is already performed in CoreLoginSitePage.\n     *\n     * @param siteUrl Site URL to check.\n     * @param onInit Whether the check site is done when initializing the page.\n     * @return Promise resolved when done.\n     */\n    protected async checkSite(siteUrl: string, onInit = false): Promise<void> {\n        this.pageLoaded = false;\n\n        // If the site is configured with http:// protocol we force that one, otherwise we use default mode.\n        const protocol = siteUrl.indexOf('http://') === 0 ? 'http://' : undefined;\n\n        try {\n            const result = await CoreSites.checkSite(siteUrl, protocol);\n\n            this.siteChecked = true;\n            this.siteUrl = result.siteUrl;\n\n            this.siteConfig = result.config;\n            this.treatSiteConfig();\n\n            if (CoreLoginHelper.isSSOLoginNeeded(result.code)) {\n                // SSO. User needs to authenticate in a browser.\n                this.isBrowserSSO = true;\n\n                if (this.showScanQR && onInit) {\n                    // Don't open browser automatically, let the user view the scan QR button.\n                    return;\n                }\n\n                // Check that there's no SSO authentication ongoing and the view hasn't changed.\n                if (!CoreApp.isSSOAuthenticationOngoing() && !this.viewLeft) {\n                    CoreLoginHelper.confirmAndOpenBrowserForSSOLogin(\n                        result.siteUrl,\n                        result.code,\n                        result.service,\n                        result.config?.launchurl,\n                    );\n                }\n            } else {\n                this.isBrowserSSO = false;\n            }\n\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        } finally {\n            this.pageLoaded = true;\n        }\n    }\n\n    /**\n     * Treat the site configuration (if it exists).\n     */\n    protected treatSiteConfig(): void {\n        if (this.siteConfig) {\n            this.siteName = CoreConstants.CONFIG.sitename ? CoreConstants.CONFIG.sitename : this.siteConfig.sitename;\n            this.logoUrl = CoreLoginHelper.getLogoUrl(this.siteConfig);\n            this.authInstructions = this.siteConfig.authinstructions || Translate.instant('core.login.loginsteps');\n            this.showScanQR = CoreLoginHelper.displayQRInCredentialsScreen(this.siteConfig.tool_mobile_qrcodetype);\n\n            const disabledFeatures = CoreLoginHelper.getDisabledFeatures(this.siteConfig);\n            this.identityProviders = CoreLoginHelper.getValidIdentityProviders(this.siteConfig, disabledFeatures);\n            this.canSignup = this.siteConfig.registerauth == 'email' &&\n                    !CoreLoginHelper.isEmailSignupDisabled(this.siteConfig, disabledFeatures);\n            this.showForgottenPassword = !CoreLoginHelper.isForgottenPasswordDisabled(this.siteConfig, disabledFeatures);\n\n            if (!this.eventThrown && !this.viewLeft) {\n                this.eventThrown = true;\n                CoreEvents.trigger(CoreEvents.LOGIN_SITE_CHECKED, { config: this.siteConfig });\n            }\n        } else {\n            this.authInstructions = undefined;\n            this.canSignup = false;\n            this.identityProviders = [];\n        }\n    }\n\n    /**\n     * Tries to authenticate the user.\n     *\n     * @param e Event.\n     * @return Promise resolved when done.\n     */\n    async login(e?: Event): Promise<void> {\n        if (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        CoreApp.closeKeyboard();\n\n        // Get input data.\n        const siteUrl = this.siteUrl;\n        const username = this.credForm.value.username;\n        const password = this.credForm.value.password;\n\n        if (!this.siteChecked || this.isBrowserSSO) {\n            // Site wasn't checked (it failed) or a previous check determined it was SSO. Let's check again.\n            await this.checkSite(siteUrl);\n\n            if (!this.isBrowserSSO) {\n                // Site doesn't use browser SSO, throw app's login again.\n                return this.login();\n            }\n\n            return;\n        }\n\n        if (!username) {\n            CoreDomUtils.showErrorModal('core.login.usernamerequired', true);\n\n            return;\n        }\n        if (!password) {\n            CoreDomUtils.showErrorModal('core.login.passwordrequired', true);\n\n            return;\n        }\n\n        if (!CoreApp.isOnline()) {\n            CoreDomUtils.showErrorModal('core.networkerrormsg', true);\n\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        // Start the authentication process.\n        try {\n            const data = await CoreSites.getUserToken(siteUrl, username, password);\n\n            const id = await CoreSites.newSite(data.siteUrl, data.token, data.privateToken);\n\n            // Reset fields so the data is not in the view anymore.\n            this.credForm.controls['username'].reset();\n            this.credForm.controls['password'].reset();\n\n            this.siteId = id;\n\n            await CoreNavigator.navigateToSiteHome({ params: { urlToOpen: this.urlToOpen } });\n        } catch (error) {\n            CoreLoginHelper.treatUserTokenError(siteUrl, error, username, password);\n\n            if (error.loggedout) {\n                CoreNavigator.navigate('/login/sites', { reset: true });\n            } else if (error.errorcode == 'forcepasswordchangenotice') {\n                // Reset password field.\n                this.credForm.controls.password.reset();\n            }\n        } finally {\n            modal.dismiss();\n\n            CoreForms.triggerFormSubmittedEvent(this.formElement, true);\n        }\n    }\n\n    /**\n     * Forgotten password button clicked.\n     */\n    forgottenPassword(): void {\n        CoreLoginHelper.forgottenPasswordClicked(this.siteUrl, this.credForm.value.username, this.siteConfig);\n    }\n\n    /**\n     * An OAuth button was clicked.\n     *\n     * @param provider The provider that was clicked.\n     */\n    oauthClicked(provider: CoreSiteIdentityProvider): void {\n        if (!CoreLoginHelper.openBrowserForOAuthLogin(this.siteUrl, provider, this.siteConfig?.launchurl)) {\n            CoreDomUtils.showErrorModal('Invalid data.');\n        }\n    }\n\n    /**\n     * Show instructions and scan QR code.\n     *\n     * @return Promise resolved when done.\n     */\n    async showInstructionsAndScanQR(): Promise<void> {\n        try {\n            await CoreLoginHelper.showScanQRInstructions();\n\n            await CoreLoginHelper.scanQR();\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n    /**\n     * Open email signup page.\n     */\n    openEmailSignup(): void {\n        CoreNavigator.navigate('/login/emailsignup', { params: { siteUrl: this.siteUrl } });\n    }\n\n    /**\n     * Open settings page.\n     */\n    openSettings(): void {\n        CoreNavigator.navigate('/settings');\n    }\n\n    /**\n     * View destroyed.\n     */\n    ngOnDestroy(): void {\n        this.viewLeft = true;\n        CoreEvents.trigger(\n            CoreEvents.LOGIN_SITE_UNCHECKED,\n            {\n                config: this.siteConfig,\n                loginSuccessful: !!this.siteId,\n            },\n            this.siteId,\n        );\n        this.valueChangeSubscription?.unsubscribe();\n    }\n\n}\n"],"sourceRoot":"webpack:///"}