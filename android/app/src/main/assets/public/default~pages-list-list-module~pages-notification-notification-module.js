(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~pages-list-list-module~pages-notification-notification-module"],{

/***/ "./src/addons/notifications/notifications.scss":
/*!*****************************************************!*\
  !*** ./src/addons/notifications/notifications.scss ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("/**\n * App Global variables SCSS\n * ----------------------------------------------------------------------------\n * Place here the different files you should import to use global variables.\n */\n/**\n * Imported ionic string functions for SCSS\n * ----------------------------------------------------------------------------\n * Extracted from\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.string.scss\n */\n/**\n * Imported ionic color functions for SCSS\n * ----------------------------------------------------------------------------\n * Extracted from\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.color.scss\n */\n/**\n * Imported ionic mixins for SCSS\n * ----------------------------------------------------------------------------\n * Extracted from\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\n */\n/**\n * Imported ionic mixins for SCSS from different components\n * ----------------------------------------------------------------------------\n * Extracted from\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/grid/grid.mixins.scss\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/item/item.mixins.scss\n */\n/**\n * App custom mixins for SCSS\n * ----------------------------------------------------------------------------\n * Place here our custom mixins.\n */\n/**\n * Same as item-push-svg-url but admits flip-rtl\n */\n/*\n * App Custom App variables SCSS\n * ----------------------------------------------------------------------------\n * Place here all custom app variables.\n */\n/*\n * App Global variables SCSS\n * ----------------------------------------------------------------------------\n * Place here all global variables.\n */\n/**\n * Layout Breakpoints\n *\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\n */\n:host {\n  --extra-icon-size: 16px;\n  --icon-size: 24px;\n}\n:host ::ng-deep core-user-avatar .core-avatar-extra-img,\n:host ::ng-deep core-user-avatar core-mod-icon {\n  margin: 0 !important;\n  position: absolute;\n  right: -4px;\n  bottom: -4px;\n  padding: 0.2rem;\n}\n:host ::ng-deep core-user-avatar .core-avatar-extra-img {\n  background: var(--background-color);\n  border-radius: var(--medium-radius);\n}\n:host ::ng-deep core-user-avatar .core-avatar-extra-img img {\n  max-width: var(--extra-icon-size);\n  max-height: var(--extra-icon-size);\n  display: block;\n}\n:host ::ng-deep core-user-avatar core-mod-icon {\n  --size: var(--extra-icon-size);\n}\n:host div.core-notification-icon {\n  padding: 0.7rem;\n  background: var(--background-color);\n  border-radius: var(--small-radius);\n}\n:host div.core-notification-icon img {\n  width: var(--icon-size);\n  height: var(--icon-size);\n}\n:host .core-notification-icon {\n  --module-icon-size: var(--icon-size);\n  margin-left: 0px;\n  margin-right: 8px;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\n  :host .core-notification-icon {\n    margin-left: unset;\n    margin-right: unset;\n    -webkit-margin-start: 0px;\n    margin-inline-start: 0px;\n    -webkit-margin-end: 8px;\n    margin-inline-end: 8px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */");

/***/ })

}]);
//# sourceMappingURL=default~pages-list-list-module~pages-notification-notification-module.js.map