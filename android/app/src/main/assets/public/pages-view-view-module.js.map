{"version":3,"sources":["./src/addons/mod/imscp/pages/view/view.html","./src/addons/mod/imscp/pages/view/view.module.ts","./src/addons/mod/imscp/pages/view/view.ts"],"names":[],"mappings":"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","file":"pages-view-view-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button *ngIf=\\\"loaded\\\" (click)=\\\"showToc()\\\" aria-haspopup=\\\"true\\\" [attr.aria-label]=\\\"'addon.mod_imscp.toc' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-bookmark\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <!-- Content. -->\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n\\r\\n        <ion-card class=\\\"core-warning-card\\\" *ngIf=\\\"warning\\\">\\r\\n            <ion-item>\\r\\n                <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                <ion-label><span [innerHTML]=\\\"warning\\\"></span></ion-label>\\r\\n            </ion-item>\\r\\n        </ion-card>\\r\\n\\r\\n        <div class=\\\"addon-mod-imscp-container\\\">\\r\\n            <core-iframe *ngIf=\\\"loaded\\\" [src]=\\\"src\\\" [showFullscreenOnToolbar]=\\\"true\\\" [autoFullscreenOnRotate]=\\\"true\\\"></core-iframe>\\r\\n        </div>\\r\\n    </core-loading>\\r\\n\\r\\n    <core-navigation-bar collapsible-footer appearOnBottom *ngIf=\\\"loaded && navigationItems.length > 1\\\" [items]=\\\"navigationItems\\\"\\r\\n        (action)=\\\"loadItem($event)\\\">\\r\\n    </core-navigation-bar>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModImscpViewPage } from './view';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonModImscpViewPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonModImscpViewPage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonModImscpViewPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreConstants } from '@/core/constants';\nimport { Component, OnInit } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreNavigationBarItem } from '@components/navigation-bar/navigation-bar';\nimport { CoreCourseResourceDownloadResult } from '@features/course/classes/main-resource-component';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseModuleData } from '@features/course/services/course-helper';\nimport { CoreCourseModulePrefetchDelegate } from '@features/course/services/module-prefetch-delegate';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreApp } from '@services/app';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { AddonModImscpTocComponent } from '../../components/toc/toc';\nimport { AddonModImscp, AddonModImscpImscp, AddonModImscpTocItem } from '../../services/imscp';\n\n/**\n * Page that displays a IMSCP content.\n */\n@Component({\n    selector: 'page-addon-mod-imscp-view',\n    templateUrl: 'view.html',\n})\nexport class AddonModImscpViewPage implements OnInit {\n\n    title = '';\n    cmId!: number;\n    courseId!: number;\n    initialItemHref?: string;\n    src = '';\n    warning = '';\n    navigationItems: CoreNavigationBarItem<AddonModImscpTocItem>[] = [];\n    loaded = false;\n\n    protected module?: CoreCourseModuleData;\n    protected imscp?: AddonModImscpImscp;\n    protected items: AddonModImscpTocItem[] = [];\n    protected currentHref?: string;\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.initialItemHref = CoreNavigator.getRouteParam('initialHref');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.fetchContent();\n    }\n\n    /**\n     * Download IMSCP contents and load the current item.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @return Promise resolved when done.\n     */\n    protected async fetchContent(refresh = false): Promise<void> {\n        try {\n            const { module, imscp } = await this.loadImscpData();\n\n            this.title = imscp.name;\n\n            const downloadResult = await this.downloadResourceIfNeeded(module, refresh);\n\n            // Get contents. No need to refresh, it has been done in downloadResourceIfNeeded.\n            const contents = await CoreCourse.getModuleContents(module, this.courseId);\n\n            this.items = AddonModImscp.createItemList(contents);\n\n            if (this.items.length) {\n                if (this.initialItemHref) {\n                    // Check it's valid.\n                    if (this.items.some(item => item.href === this.initialItemHref)) {\n                        this.currentHref = this.initialItemHref;\n                    }\n                }\n\n                if (this.currentHref === undefined) {\n                    // Get last viewed.\n                    const lastViewedHref = await AddonModImscp.getLastItemViewed(imscp.id);\n\n                    if (lastViewedHref !== undefined) {\n                        this.currentHref = lastViewedHref;\n                    } else {\n                        // Use first one.\n                        this.currentHref = this.items[0].href;\n                    }\n                }\n            }\n\n            if (this.currentHref === undefined) {\n                throw new CoreError('Empty TOC');\n            }\n\n            try {\n                await this.loadItemHref(this.currentHref);\n            } catch (error) {\n                CoreDomUtils.showErrorModalDefault(error, 'addon.mod_imscp.deploymenterror', true);\n\n                return;\n            }\n\n            if (downloadResult?.failed) {\n                const error = CoreTextUtils.getErrorMessageFromError(downloadResult.error) || downloadResult.error;\n                this.warning = Translate.instant('core.errordownloadingsomefiles') + (error ? ' ' + error : '');\n            } else {\n                this.warning = '';\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Load IMSCP data from WS.\n     *\n     * @return Promise resolved when done.\n     */\n    async loadImscpData(): Promise<{ module: CoreCourseModuleData; imscp: AddonModImscpImscp }> {\n        this.module = await CoreCourse.getModule(this.cmId, this.courseId);\n        this.imscp = await AddonModImscp.getImscp(this.courseId, this.cmId);\n\n        return {\n            module: this.module,\n            imscp: this.imscp,\n        };\n    }\n\n    /**\n     * Download a resource if needed.\n     * If the download call fails the promise won't be rejected, but the error will be included in the returned object.\n     * If module.contents cannot be loaded then the Promise will be rejected.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @return Promise resolved when done.\n     */\n    protected async downloadResourceIfNeeded(\n        module: CoreCourseModuleData,\n        refresh = false,\n    ): Promise<CoreCourseResourceDownloadResult> {\n\n        const result: CoreCourseResourceDownloadResult = {\n            failed: false,\n        };\n        let contentsAlreadyLoaded = false;\n\n        // Get module status to determine if it needs to be downloaded.\n        const status = await CoreCourseModulePrefetchDelegate.getModuleStatus(module, this.courseId, undefined, refresh);\n\n        if (status !== CoreConstants.DOWNLOADED) {\n            // Download content. This function also loads module contents if needed.\n            try {\n                await CoreCourseModulePrefetchDelegate.downloadModule(module, this.courseId);\n\n                // If we reach here it means the download process already loaded the contents, no need to do it again.\n                contentsAlreadyLoaded = true;\n            } catch (error) {\n                // Mark download as failed but go on since the main files could have been downloaded.\n                result.failed = true;\n                result.error = error;\n            }\n        }\n\n        if (!module.contents?.length || (refresh && !contentsAlreadyLoaded)) {\n            // Try to load the contents.\n            const ignoreCache = refresh && CoreApp.isOnline();\n\n            try {\n                await CoreCourse.loadModuleContents(module, undefined, undefined, false, ignoreCache);\n            } catch (error) {\n                // Error loading contents. If we ignored cache, try to get the cached value.\n                if (ignoreCache && !module.contents) {\n                    await CoreCourse.loadModuleContents(module);\n                } else if (!module.contents) {\n                    // Not able to load contents, throw the error.\n                    throw error;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    async doRefresh(refresher?: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(Promise.all([\n            AddonModImscp.invalidateContent(this.cmId, this.courseId),\n            CoreCourseModulePrefetchDelegate.invalidateCourseUpdates(this.courseId), // To detect if IMSCP was updated.\n        ]));\n\n        await CoreUtils.ignoreErrors(this.fetchContent(true));\n\n        refresher?.complete();\n    }\n\n    /**\n     * Loads an item.\n     *\n     * @param itemHref Item Href.\n     * @return Promise resolved when done.\n     */\n    async loadItemHref(itemHref: string): Promise<void> {\n        if (!this.module) {\n            return;\n        }\n\n        const src = await AddonModImscp.getIframeSrc(this.module, itemHref);\n        this.currentHref = itemHref;\n\n        this.navigationItems = this.items.map((item) => ({\n            item: item,\n            current: item.href == this.currentHref,\n            enabled: !!item.href,\n        }));\n\n        if (this.src && src == this.src) {\n            // Re-loading same page. Set it to empty and then re-set the src in the next digest so it detects it has changed.\n            this.src = '';\n            setTimeout(() => {\n                this.src = src;\n            });\n        } else {\n            this.src = src;\n        }\n\n        if (this.imscp) {\n            AddonModImscp.storeLastItemViewed(this.imscp.id, itemHref, this.courseId);\n        }\n    }\n\n    /**\n     * Loads an item.\n     *\n     * @param item Item.\n     */\n    loadItem(item: AddonModImscpTocItem): void {\n        this.loadItemHref(item.href);\n    }\n\n    /**\n     * Show the TOC.\n     */\n    async showToc(): Promise<void> {\n        // Create the toc modal.\n        const itemHref = await CoreDomUtils.openSideModal<string>({\n            component: AddonModImscpTocComponent,\n            componentProps: {\n                items: this.items,\n                selected: this.currentHref,\n            },\n        });\n\n        if (itemHref) {\n            this.loadItemHref(itemHref);\n        }\n    }\n\n}\n"],"sourceRoot":"webpack:///"}