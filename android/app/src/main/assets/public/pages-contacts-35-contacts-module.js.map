{"version":3,"sources":["./src/addons/messages/pages/contacts-35/contacts.html","./src/addons/messages/pages/contacts-35/contacts.module.ts","./src/addons/messages/pages/contacts-35/contacts.page.ts"],"names":[],"mappings":"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","file":"pages-contacts-35-contacts-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messages.contacts' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n        </ion-refresher>\\r\\n\\r\\n        <core-search-box (onSubmit)=\\\"search($event)\\\" (onClear)=\\\"clearSearch()\\\" [placeholder]=\\\"'addon.messages.contactname' | translate\\\"\\r\\n            autocorrect=\\\"off\\\" spellcheck=\\\"false\\\" lengthCheck=\\\"2\\\" [disabled]=\\\"!loaded\\\" searchArea=\\\"AddonMessagesContacts\\\"></core-search-box>\\r\\n\\r\\n        <core-loading [hideUntil]=\\\"loaded\\\" [message]=\\\"loadingMessage\\\">\\r\\n            <core-empty-box *ngIf=\\\"!hasContacts && searchString == ''\\\" icon=\\\"fas-address-book\\\"\\r\\n                [message]=\\\"'addon.messages.contactlistempty' | translate\\\"></core-empty-box>\\r\\n\\r\\n            <core-empty-box *ngIf=\\\"!hasContacts && searchString != ''\\\" icon=\\\"fas-address-book\\\"\\r\\n                [message]=\\\"'addon.messages.nousersfound' | translate\\\"></core-empty-box>\\r\\n\\r\\n            <ion-list *ngFor=\\\"let contactType of contactTypes\\\" class=\\\"ion-no-margin\\\">\\r\\n                <ng-container *ngIf=\\\"contacts[contactType] && (contacts[contactType].length > 0 || contactType === searchType)\\\">\\r\\n                    <ion-item-divider>\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ 'addon.messages.type_' + contactType | translate }}</p>\\r\\n                        </ion-label>\\r\\n                        <ion-note slot=\\\"end\\\" class=\\\"ion-padding-end\\\">\\r\\n                            <ion-badge>{{ contacts[contactType].length }}</ion-badge>\\r\\n                        </ion-note>\\r\\n                    </ion-item-divider>\\r\\n                    <ng-container *ngFor=\\\"let contact of contacts[contactType]\\\">\\r\\n                        <!-- Don't show deleted users -->\\r\\n                        <ion-item class=\\\"ion-text-wrap addon-messages-conversation-item\\\"\\r\\n                            *ngIf=\\\"contact.profileimageurl || contact.profileimageurlsmall\\\" [attr.aria-label]=\\\"contact.fullname\\\"\\r\\n                            (click)=\\\"gotoDiscussion(contact.id)\\\" detail=\\\"true\\\" button\\r\\n                            [attr.aria-current]=\\\"contact.id == discussionUserId ? 'page' : 'false'\\\">\\r\\n                            <core-user-avatar [user]=\\\"contact\\\" slot=\\\"start\\\" [checkOnline]=\\\"contact.showonlinestatus\\\"></core-user-avatar>\\r\\n                            <ion-label>\\r\\n                                <p class=\\\"item-heading\\\">{{ contact.fullname }}</p>\\r\\n                            </ion-label>\\r\\n                        </ion-item>\\r\\n                    </ng-container>\\r\\n                </ng-container>\\r\\n            </ion-list>\\r\\n        </core-loading>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { conditionalRoutes } from '@/app/app-routing.module';\r\nimport { AddonMessagesDiscussionRoute } from '@addons/messages/messages-lazy.module';\r\nimport { CoreScreen } from '@services/screen';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreSearchComponentsModule } from '@features/search/components/components.module';\r\n\r\nimport { AddonMessagesContacts35Page } from './contacts.page';\r\n\r\nconst mobileRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonMessagesContacts35Page,\r\n    },\r\n    AddonMessagesDiscussionRoute,\r\n];\r\n\r\nconst tabletRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonMessagesContacts35Page,\r\n        children: [\r\n            AddonMessagesDiscussionRoute,\r\n        ],\r\n    },\r\n];\r\n\r\nconst routes: Routes = [\r\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\r\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreSearchComponentsModule,\r\n    ],\r\n    declarations: [\r\n        AddonMessagesContacts35Page,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonMessagesContacts35PageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { IonRefresher } from '@ionic/angular';\r\nimport { CoreSites } from '@services/sites';\r\nimport {\r\n    AddonMessagesProvider,\r\n    AddonMessagesGetContactsWSResponse,\r\n    AddonMessagesSearchContactsContact,\r\n    AddonMessagesGetContactsContact,\r\n    AddonMessages,\r\n} from '../../services/messages';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CoreApp } from '@services/app';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { Translate } from '@singletons';\r\nimport { CoreScreen } from '@services/screen';\r\nimport { CoreNavigator } from '@services/navigator';\r\n\r\n/**\r\n * Page that displays the list of contacts.\r\n */\r\n@Component({\r\n    selector: 'addon-messages-contacts',\r\n    templateUrl: 'contacts.html',\r\n    styleUrls: ['../../messages-common.scss'],\r\n})\r\nexport class AddonMessagesContacts35Page implements OnInit, OnDestroy {\r\n\r\n    protected searchingMessages: string;\r\n    protected loadingMessages: string;\r\n    protected siteId: string;\r\n    protected noSearchTypes = ['online', 'offline', 'blocked', 'strangers'];\r\n    protected memberInfoObserver: CoreEventObserver;\r\n\r\n    loaded = false;\r\n    discussionUserId?: number;\r\n    contactTypes = ['online', 'offline', 'blocked', 'strangers'];\r\n    searchType = 'search';\r\n    loadingMessage = '';\r\n    hasContacts = false;\r\n    contacts: AddonMessagesGetContactsFormatted = {\r\n        online: [],\r\n        offline: [],\r\n        strangers: [],\r\n        search: [],\r\n    };\r\n\r\n    searchString = '';\r\n\r\n    constructor(\r\n        protected route: ActivatedRoute,\r\n    ) {\r\n        this.siteId = CoreSites.getCurrentSiteId();\r\n        this.searchingMessages = Translate.instant('core.searching');\r\n        this.loadingMessages = Translate.instant('core.loading');\r\n        this.loadingMessage = this.loadingMessages;\r\n\r\n        // Refresh the list when a contact request is confirmed.\r\n        this.memberInfoObserver = CoreEvents.on(\r\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\r\n            (data) => {\r\n                if (data.contactRequestConfirmed) {\r\n                    this.refreshData();\r\n                }\r\n            },\r\n            CoreSites.getCurrentSiteId(),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Component loaded.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        const discussionUserId = CoreNavigator.getRouteNumberParam('discussionUserId') ||\r\n            CoreNavigator.getRouteNumberParam('userId') || undefined;\r\n\r\n        if (this.loaded && this.discussionUserId == discussionUserId) {\r\n            return;\r\n        }\r\n\r\n        this.discussionUserId = discussionUserId;\r\n\r\n        if (this.discussionUserId) {\r\n            // There is a discussion to load, open the discussion in a new state.\r\n            this.gotoDiscussion(this.discussionUserId);\r\n        }\r\n\r\n        try {\r\n            await this.fetchData();\r\n            if (!this.discussionUserId && this.hasContacts && CoreScreen.isTablet) {\r\n                let contact: AddonMessagesGetContactsContact | undefined;\r\n                for (const x in this.contacts) {\r\n                    if (this.contacts[x].length > 0) {\r\n                        contact = this.contacts[x][0];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (contact) {\r\n                    // Take first and load it.\r\n                    this.gotoDiscussion(contact.id);\r\n                }\r\n            }\r\n        } finally {\r\n            this.loaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh the data.\r\n     *\r\n     * @param refresher Refresher.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async refreshData(refresher?: IonRefresher): Promise<void> {\r\n        try {\r\n            if (this.searchString) {\r\n                // User has searched, update the search.\r\n                await this.performSearch(this.searchString);\r\n            } else {\r\n                // Update contacts.\r\n                await AddonMessages.invalidateAllContactsCache();\r\n                await this.fetchData();\r\n            }\r\n        } finally {\r\n            refresher?.complete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch contacts.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchData(): Promise<void> {\r\n        this.loadingMessage = this.loadingMessages;\r\n\r\n        try {\r\n            const contacts = await AddonMessages.getAllContacts();\r\n            for (const x in contacts) {\r\n                if (contacts[x].length > 0) {\r\n                    this.contacts[x] = this.sortUsers(contacts[x]);\r\n                } else {\r\n                    this.contacts[x] = [];\r\n                }\r\n            }\r\n\r\n            this.clearSearch();\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sort user list by fullname\r\n     *\r\n     * @param list List to sort.\r\n     * @return Sorted list.\r\n     */\r\n    protected sortUsers(list: AddonMessagesSearchContactsContact[]): AddonMessagesSearchContactsContact[] {\r\n        return list.sort((a, b) => {\r\n            const compareA = a.fullname.toLowerCase();\r\n            const compareB = b.fullname.toLowerCase();\r\n\r\n            return compareA.localeCompare(compareB);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear search and show all contacts again.\r\n     */\r\n    clearSearch(): void {\r\n        this.searchString = ''; // Reset searched string.\r\n        this.contactTypes = this.noSearchTypes;\r\n\r\n        this.hasContacts = false;\r\n        for (const x in this.contacts) {\r\n            if (this.contacts[x].length > 0) {\r\n                this.hasContacts = true;\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Search users from the UI.\r\n     *\r\n     * @param query Text to search for.\r\n     * @return Resolved when done.\r\n     */\r\n    search(query: string): Promise<void> {\r\n        CoreApp.closeKeyboard();\r\n\r\n        this.loaded = false;\r\n        this.loadingMessage = this.searchingMessages;\r\n\r\n        return this.performSearch(query).finally(() => {\r\n            this.loaded = true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Perform the search of users.\r\n     *\r\n     * @param query Text to search for.\r\n     * @return Resolved when done.\r\n     */\r\n    protected async performSearch(query: string): Promise<void> {\r\n        try {\r\n            const result = await AddonMessages.searchContacts(query);\r\n            this.hasContacts = result.length > 0;\r\n            this.searchString = query;\r\n            this.contactTypes = ['search'];\r\n\r\n            this.contacts.search = this.sortUsers(result);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigate to a particular discussion.\r\n     *\r\n     * @param discussionUserId Discussion Id to load.\r\n     */\r\n    gotoDiscussion(discussionUserId: number): void {\r\n        this.discussionUserId = discussionUserId;\r\n\r\n        const params: Params = {\r\n            userId: discussionUserId,\r\n        };\r\n\r\n        const splitViewLoaded = CoreNavigator.isCurrentPathInTablet('**/messages/contacts-35/discussion');\r\n        const path = (splitViewLoaded ? '../' : '') + 'discussion';\r\n\r\n        // @todo Check why this is failing on ngInit.\r\n        CoreNavigator.navigate(path, { params });\r\n    }\r\n\r\n    /**\r\n     * Component destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.memberInfoObserver?.off();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Contacts with some calculated data.\r\n */\r\nexport type AddonMessagesGetContactsFormatted = AddonMessagesGetContactsWSResponse & {\r\n    search?: AddonMessagesSearchContactsContact[]; // Calculated in the app. Result of searching users.\r\n};\r\n"],"sourceRoot":"webpack:///"}