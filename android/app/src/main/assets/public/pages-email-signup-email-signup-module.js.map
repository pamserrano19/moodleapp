{"version":3,"sources":["./src/core/features/login/pages/email-signup/email-signup.html","./src/core/features/login/pages/email-signup/email-signup.module.ts","./src/core/features/login/pages/email-signup/email-signup.ts"],"names":[],"mappings":"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","file":"pages-email-signup-email-signup-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-title>\\r\\n            <h1>{{ 'core.login.newaccount' | translate }}</h1>\\r\\n        </ion-title>\\r\\n\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" *ngIf=\\\"authInstructions\\\" (click)=\\\"showAuthInstructions()\\\"\\r\\n                [attr.aria-label]=\\\"'core.login.instructions' | translate\\\">\\r\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"far-question-circle\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!settingsLoaded || isMinor\\\" (ionRefresh)=\\\"refreshSettings($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <div class=\\\"list-item-limited-width\\\">\\r\\n\\r\\n        <core-loading [hideUntil]=\\\"settingsLoaded\\\" *ngIf=\\\"!isMinor\\\">\\r\\n\\r\\n            <!-- Site has an unsupported required field. -->\\r\\n            <ion-list *ngIf=\\\"!allRequiredSupported\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        {{ 'core.login.signuprequiredfieldnotsupported' | translate }}\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-button expand=\\\"block\\\" class=\\\"ion-margin\\\" [href]=\\\"signupUrl\\\" core-link autoLogin=\\\"no\\\" [showBrowserWarning]=\\\"false\\\">\\r\\n                    {{ 'core.openinbrowser' | translate }}\\r\\n                </ion-button>\\r\\n            </ion-list>\\r\\n\\r\\n            <!-- Age verification. -->\\r\\n            <form *ngIf=\\\"allRequiredSupported && settingsLoaded && settings && ageDigitalConsentVerification\\\"\\r\\n                [formGroup]=\\\"ageVerificationForm\\\" (ngSubmit)=\\\"verifyAge($event)\\\" #ageForm>\\r\\n\\r\\n                <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <h3>{{ 'core.agelocationverification' | translate }}</h3>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">\\r\\n                        <span core-mark-required=\\\"true\\\">{{ 'core.whatisyourage' | translate }}</span>\\r\\n                    </ion-label>\\r\\n                    <ion-input type=\\\"number\\\" name=\\\"age\\\" placeholder=\\\"0\\\" formControlName=\\\"age\\\" autocapitalize=\\\"none\\\" autocorrect=\\\"off\\\">\\r\\n                    </ion-input>\\r\\n                </ion-item>\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">\\r\\n                        <span core-mark-required=\\\"true\\\">{{ 'core.wheredoyoulive' | translate }}</span>\\r\\n                    </ion-label>\\r\\n                    <ion-select name=\\\"country\\\" formControlName=\\\"country\\\" [placeholder]=\\\"'core.login.selectacountry' | translate\\\">\\r\\n                        <ion-select-option value=\\\"\\\">{{ 'core.login.selectacountry' | translate }}</ion-select-option>\\r\\n                        <ion-select-option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.code\\\">{{country.name}}</ion-select-option>\\r\\n                    </ion-select>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- Submit button. -->\\r\\n                <ion-button expand=\\\"block\\\" class=\\\"ion-margin\\\" type=\\\"submit\\\" [disabled]=\\\"!ageVerificationForm.valid\\\">\\r\\n                    {{ 'core.proceed' | translate }}\\r\\n                </ion-button>\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <h3 class=\\\"item-heading\\\">{{ 'core.whyisthisrequired' | translate }}</h3>\\r\\n                        <p>{{ 'core.explanationdigitalminor' | translate }}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n            </form>\\r\\n\\r\\n            <!-- Signup form. -->\\r\\n            <form *ngIf=\\\"allRequiredSupported && settingsLoaded && settings && !ageDigitalConsentVerification\\\" [formGroup]=\\\"signupForm\\\"\\r\\n                (ngSubmit)=\\\"create($event)\\\" #signupFormEl>\\r\\n\\r\\n                <ion-item class=\\\"ion-text-wrap ion-text-center\\\">\\r\\n                    <ion-label>\\r\\n                        <!-- If no sitename show big siteurl. -->\\r\\n                        <p *ngIf=\\\"!siteName\\\" class=\\\"ion-padding item-heading\\\">{{siteUrl}}</p>\\r\\n                        <!-- If sitename, show big sitename and small siteurl. -->\\r\\n                        <p *ngIf=\\\"siteName\\\" class=\\\"ion-padding item-heading\\\">\\r\\n                            <core-format-text [text]=\\\"siteName\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n                        </p>\\r\\n                        <p *ngIf=\\\"siteName\\\">{{siteUrl}}</p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- Username and password. -->\\r\\n                <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <h3>{{ 'core.login.createuserandpass' | translate }}</h3>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">\\r\\n                        <span core-mark-required=\\\"true\\\">{{ 'core.login.username' | translate }}</span>\\r\\n                    </ion-label>\\r\\n                    <ion-input type=\\\"text\\\" name=\\\"username\\\" placeholder=\\\"{{ 'core.login.username' | translate }}\\\" formControlName=\\\"username\\\"\\r\\n                        autocapitalize=\\\"none\\\" autocorrect=\\\"off\\\">\\r\\n                    </ion-input>\\r\\n                    <core-input-errors [control]=\\\"signupForm.controls.username\\\" [errorMessages]=\\\"usernameErrors\\\"></core-input-errors>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">\\r\\n                        <span core-mark-required=\\\"true\\\">{{ 'core.login.password' | translate }}</span>\\r\\n                    </ion-label>\\r\\n                    <core-show-password name=\\\"password\\\">\\r\\n                        <ion-input name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"{{ 'core.login.password' | translate }}\\\"\\r\\n                            formControlName=\\\"password\\\" [clearOnEdit]=\\\"false\\\" autocomplete=\\\"new-password\\\" required=\\\"true\\\">\\r\\n                        </ion-input>\\r\\n                    </core-show-password>\\r\\n                    <p *ngIf=\\\"settings.passwordpolicy\\\" class=\\\"core-input-footnote\\\">\\r\\n                        {{settings.passwordpolicy}}\\r\\n                    </p>\\r\\n                    <core-input-errors [control]=\\\"signupForm.controls.password\\\" [errorMessages]=\\\"passwordErrors\\\"></core-input-errors>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- More details. -->\\r\\n                <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>\\r\\n                        <h3>{{ 'core.login.supplyinfo' | translate }}</h3>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">\\r\\n                        <span core-mark-required=\\\"true\\\">{{ 'core.user.email' | translate }}</span>\\r\\n                    </ion-label>\\r\\n                    <ion-input type=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"{{ 'core.user.email' | translate }}\\\" formControlName=\\\"email\\\"\\r\\n                        autocapitalize=\\\"none\\\" autocorrect=\\\"off\\\">\\r\\n                    </ion-input>\\r\\n                    <core-input-errors [control]=\\\"signupForm.controls.email\\\" [errorMessages]=\\\"emailErrors\\\"></core-input-errors>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">\\r\\n                        <span core-mark-required=\\\"true\\\">{{ 'core.user.emailagain' | translate }}</span>\\r\\n                    </ion-label>\\r\\n                    <ion-input type=\\\"email\\\" name=\\\"email2\\\" placeholder=\\\"{{ 'core.user.emailagain' | translate }}\\\" autocapitalize=\\\"none\\\"\\r\\n                        formControlName=\\\"email2\\\" autocorrect=\\\"off\\\" [pattern]=\\\"escapeMail(signupForm.controls.email.value)\\\">\\r\\n                    </ion-input>\\r\\n                    <core-input-errors [control]=\\\"signupForm.controls.email2\\\" [errorMessages]=\\\"email2Errors\\\"></core-input-errors>\\r\\n                </ion-item>\\r\\n                <ion-item *ngFor=\\\"let nameField of settings.namefields\\\" class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">\\r\\n                        <span core-mark-required=\\\"true\\\">{{ 'core.user.' + nameField | translate }}</span>\\r\\n                    </ion-label>\\r\\n                    <ion-input type=\\\"text\\\" name=\\\"nameField\\\" placeholder=\\\"{{ 'core.user.' + nameField | translate }}\\\"\\r\\n                        formControlName=\\\"{{nameField}}\\\" autocorrect=\\\"off\\\">\\r\\n                    </ion-input>\\r\\n                    <core-input-errors [control]=\\\"signupForm.controls[nameField]\\\" [errorMessages]=\\\"namefieldsErrors![nameField]\\\">\\r\\n                    </core-input-errors>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\">{{ 'core.user.city' | translate }}</ion-label>\\r\\n                    <ion-input type=\\\"text\\\" name=\\\"city\\\" placeholder=\\\"{{ 'core.user.city' | translate }}\\\" formControlName=\\\"city\\\"\\r\\n                        autocorrect=\\\"off\\\">\\r\\n                    </ion-input>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label position=\\\"stacked\\\" id=\\\"core-login-signup-country\\\">{{ 'core.user.country' | translate }}</ion-label>\\r\\n                    <ion-select name=\\\"country\\\" formControlName=\\\"country\\\" aria-labelledby=\\\"core-login-signup-country\\\"\\r\\n                        [placeholder]=\\\"'core.login.selectacountry' | translate\\\">\\r\\n\\r\\n                        <ion-select-option value=\\\"\\\">{{ 'core.login.selectacountry' | translate }}</ion-select-option>\\r\\n                        <ion-select-option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.code\\\">{{country.name}}</ion-select-option>\\r\\n                    </ion-select>\\r\\n                </ion-item>\\r\\n\\r\\n                <!-- Other categories. -->\\r\\n                <ng-container *ngFor=\\\"let category of categories\\\">\\r\\n                    <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <p class=\\\"item-heading\\\">{{ category.name }}</p>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <core-user-profile-field *ngFor=\\\"let field of category.fields\\\" [field]=\\\"field\\\" [edit]=\\\"true\\\" [signup]=\\\"true\\\"\\r\\n                        registerAuth=\\\"email\\\" [form]=\\\"signupForm\\\"></core-user-profile-field>\\r\\n                </ng-container>\\r\\n\\r\\n                <!-- ReCAPTCHA -->\\r\\n                <ng-container *ngIf=\\\"settings.recaptchapublickey\\\">\\r\\n                    <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <h3><span [core-mark-required]=\\\"true\\\">{{ 'core.login.security_question' | translate }}</span></h3>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <core-recaptcha [publicKey]=\\\"settings.recaptchapublickey\\\" [model]=\\\"captcha\\\" [siteUrl]=\\\"siteUrl\\\"></core-recaptcha>\\r\\n                </ng-container>\\r\\n\\r\\n                <!-- Site policy (if any). -->\\r\\n                <ng-container *ngIf=\\\"settings.sitepolicy\\\">\\r\\n                    <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <h3>{{ 'core.login.policyagreement' | translate }}</h3>\\r\\n                        </ion-label>\\r\\n                    </ion-item-divider>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <a [href]=\\\"settings.sitepolicy\\\" core-link capture=\\\"false\\\">\\r\\n                                {{ 'core.login.policyagreementclick' | translate }}\\r\\n                            </a>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <span [core-mark-required]=\\\"true\\\">{{ 'core.login.policyacceptmandatory' | translate }}</span>\\r\\n                            <core-input-errors [control]=\\\"signupForm.controls.policyagreed\\\" [errorMessages]=\\\"policyErrors\\\">\\r\\n                            </core-input-errors>\\r\\n                        </ion-label>\\r\\n                        <ion-checkbox slot=\\\"end\\\" name=\\\"policyagreed\\\" formControlName=\\\"policyagreed\\\"></ion-checkbox>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n\\r\\n                <!-- Submit button. -->\\r\\n                <ion-button expand=\\\"block\\\" class=\\\"ion-margin\\\" type=\\\"submit\\\">{{ 'core.login.createaccount' | translate }}</ion-button>\\r\\n                <!-- Remove this once Ionic fixes this bug: https://github.com/ionic-team/ionic-framework/issues/19368 -->\\r\\n                <input type=\\\"submit\\\" class=\\\"core-submit-hidden-enter\\\" />\\r\\n            </form>\\r\\n        </core-loading>\\r\\n\\r\\n        <ion-list *ngIf=\\\"allRequiredSupported && isMinor\\\">\\r\\n            <ion-item-divider class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h3 *ngIf=\\\"siteName\\\" class=\\\"item-heading ion-padding\\\">\\r\\n                        <core-format-text [text]=\\\"siteName\\\" [filter]=\\\"false\\\"></core-format-text>\\r\\n                    </h3>\\r\\n                </ion-label>\\r\\n            </ion-item-divider>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h3 class=\\\"item-heading\\\">{{ 'core.considereddigitalminor' | translate }}</h3>\\r\\n                    <p>{{ 'core.digitalminor_desc' | translate }}</p>\\r\\n                    <p *ngIf=\\\"supportName\\\">{{ supportName }}</p>\\r\\n                    <p *ngIf=\\\"supportEmail\\\">{{ supportEmail }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-button *ngIf=\\\"!supportName && !supportEmail\\\" expand=\\\"block\\\" class=\\\"ion-margin\\\" (click)=\\\"showContactOnSite()\\\">\\r\\n                {{ 'core.openinbrowser' | translate }}\\r\\n            </ion-button>\\r\\n        </ion-list>\\r\\n    </div>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreUserComponentsModule } from '@features/user/components/components.module';\r\n\r\nimport { CoreLoginEmailSignupPage } from './email-signup';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreLoginEmailSignupPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreUserComponentsModule,\r\n    ],\r\n    declarations: [\r\n        CoreLoginEmailSignupPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class CoreLoginEmailSignupPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ViewChild, ElementRef, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { IonRefresher } from '@ionic/angular';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreCountry, CoreUtils } from '@services/utils/utils';\nimport { CoreWS, CoreWSExternalWarning } from '@services/ws';\nimport { CoreConstants } from '@/core/constants';\nimport { Translate } from '@singletons';\nimport { CoreSitePublicConfigResponse } from '@classes/site';\nimport { CoreUserProfileFieldDelegate } from '@features/user/services/user-profile-field-delegate';\n\nimport {\n    AuthEmailSignupProfileFieldsCategory,\n    AuthEmailSignupSettings,\n    CoreLoginHelper,\n} from '@features/login/services/login-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreForms } from '@singletons/form';\nimport { CoreRecaptchaComponent } from '@components/recaptcha/recaptcha';\nimport { CoreText } from '@singletons/text';\nimport { CoreDom } from '@singletons/dom';\n\n/**\n * Page to signup using email.\n */\n@Component({\n    selector: 'page-core-login-email-signup',\n    templateUrl: 'email-signup.html',\n    styleUrls: ['../../login.scss'],\n})\nexport class CoreLoginEmailSignupPage implements OnInit {\n\n    @ViewChild(CoreRecaptchaComponent) recaptchaComponent?: CoreRecaptchaComponent;\n    @ViewChild('ageForm') ageFormElement?: ElementRef;\n    @ViewChild('signupFormEl') signupFormElement?: ElementRef;\n\n    signupForm: FormGroup;\n    siteUrl!: string;\n    siteConfig?: CoreSitePublicConfigResponse;\n    siteName?: string;\n    authInstructions?: string;\n    settings?: AuthEmailSignupSettings;\n    countries?: CoreCountry[];\n    categories?: AuthEmailSignupProfileFieldsCategory[];\n    settingsLoaded = false;\n    allRequiredSupported = true;\n    signupUrl?: string;\n    captcha = {\n        recaptcharesponse: '',\n    };\n\n    // Data for age verification.\n    ageVerificationForm: FormGroup;\n    countryControl: FormControl;\n    signUpCountryControl?: FormControl;\n    isMinor = false; // Whether the user is minor age.\n    ageDigitalConsentVerification?: boolean; // Whether the age verification is enabled.\n    supportName?: string;\n    supportEmail?: string;\n\n    // Validation errors.\n    usernameErrors: Record<string, string>;\n    passwordErrors: Record<string, string>;\n    emailErrors: Record<string, string>;\n    email2Errors: Record<string, string>;\n    policyErrors: Record<string, string>;\n    namefieldsErrors?: Record<string, Record<string, string>>;\n\n    constructor(\n        protected fb: FormBuilder,\n        protected elementRef: ElementRef,\n        protected changeDetector: ChangeDetectorRef,\n    ) {\n        // Create the ageVerificationForm.\n        this.ageVerificationForm = this.fb.group({\n            age: ['', Validators.required],\n        });\n        this.countryControl = this.fb.control('', Validators.required);\n        this.ageVerificationForm.addControl('country', this.countryControl);\n\n        // Create the signupForm with the basic controls. More controls will be added later.\n        this.signupForm = this.fb.group({\n            username: ['', Validators.required],\n            password: ['', Validators.required],\n            email: ['', Validators.compose([Validators.required, Validators.email])],\n            email2: ['', Validators.compose([Validators.required, Validators.email])],\n        });\n\n        // Setup validation errors.\n        this.usernameErrors = CoreLoginHelper.getErrorMessages('core.login.usernamerequired');\n        this.passwordErrors = CoreLoginHelper.getErrorMessages('core.login.passwordrequired');\n        this.emailErrors = CoreLoginHelper.getErrorMessages('core.login.missingemail');\n        this.policyErrors = CoreLoginHelper.getErrorMessages('core.login.policyagree');\n        this.email2Errors = CoreLoginHelper.getErrorMessages(\n            'core.login.missingemail',\n            undefined,\n            'core.login.emailnotmatch',\n        );\n    }\n\n    /**\n     * Component initialized.\n     */\n    ngOnInit(): void {\n        const siteUrl = CoreNavigator.getRouteParam<string>('siteUrl');\n        if (!siteUrl) {\n            CoreDomUtils.showErrorModal('Site URL not supplied.');\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.siteUrl = siteUrl;\n\n        // Fetch the data.\n        this.fetchData().finally(() => {\n            this.settingsLoaded = true;\n        });\n    }\n\n    /**\n     * Complete the FormGroup using the settings received from server.\n     */\n    protected completeFormGroup(): void {\n        this.signupForm.addControl('city', this.fb.control(this.settings?.defaultcity || ''));\n        this.signUpCountryControl = this.fb.control(this.settings?.country || '');\n        this.signupForm.addControl('country', this.signUpCountryControl);\n\n        // Add the name fields.\n        for (const i in this.settings?.namefields) {\n            this.signupForm.addControl(this.settings?.namefields[i], this.fb.control('', Validators.required));\n        }\n\n        if (this.settings?.sitepolicy) {\n            this.signupForm.addControl('policyagreed', this.fb.control(false, Validators.requiredTrue));\n        }\n    }\n\n    /**\n     * Fetch the required data from the server.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            // Get site config.\n            this.siteConfig = await CoreSites.getSitePublicConfig(this.siteUrl);\n            this.signupUrl = CoreText.concatenatePaths(this.siteConfig.httpswwwroot, 'login/signup.php');\n\n            if (this.treatSiteConfig()) {\n                // Check content verification.\n                if (this.ageDigitalConsentVerification === undefined) {\n\n                    const result = await CoreUtils.ignoreErrors(\n                        CoreWS.callAjax<IsAgeVerificationEnabledWSResponse>(\n                            'core_auth_is_age_digital_consent_verification_enabled',\n                            {},\n                            { siteUrl: this.siteUrl },\n                        ),\n                    );\n\n                    this.ageDigitalConsentVerification = !!result?.status;\n                }\n\n                await this.getSignupSettings();\n            }\n\n            this.completeFormGroup();\n        } catch (error) {\n            if (this.allRequiredSupported) {\n                CoreDomUtils.showErrorModal(error);\n            }\n        }\n    }\n\n    /**\n     * Get signup settings from server.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async getSignupSettings(): Promise<void> {\n        this.settings = await CoreWS.callAjax<AuthEmailSignupSettings>(\n            'auth_email_get_signup_settings',\n            {},\n            { siteUrl: this.siteUrl },\n        );\n\n        if (CoreUserProfileFieldDelegate.hasRequiredUnsupportedField(this.settings.profilefields)) {\n            this.allRequiredSupported = false;\n\n            throw new Error(Translate.instant('core.login.signuprequiredfieldnotsupported'));\n        }\n\n        this.categories = CoreLoginHelper.formatProfileFieldsForSignup(this.settings.profilefields);\n\n        if (this.settings.recaptchapublickey) {\n            this.captcha.recaptcharesponse = ''; // Reset captcha.\n        }\n\n        if (!this.countryControl.value) {\n            this.countryControl.setValue(this.settings.country || '');\n        }\n\n        this.namefieldsErrors = {};\n        if (this.settings.namefields) {\n            this.settings.namefields.forEach((field) => {\n                this.namefieldsErrors![field] = CoreLoginHelper.getErrorMessages('core.login.missing' + field);\n            });\n        }\n\n        this.countries = await CoreUtils.getCountryListSorted();\n    }\n\n    /**\n     * Treat the site config, checking if it's valid and extracting the data we're interested in.\n     *\n     * @return True if success.\n     */\n    protected treatSiteConfig(): boolean {\n        if (this.siteConfig?.registerauth == 'email' && !CoreLoginHelper.isEmailSignupDisabled(this.siteConfig)) {\n            this.siteName = CoreConstants.CONFIG.sitename ? CoreConstants.CONFIG.sitename : this.siteConfig.sitename;\n            this.authInstructions = this.siteConfig.authinstructions;\n            this.ageDigitalConsentVerification = this.siteConfig.agedigitalconsentverification;\n            this.supportName = this.siteConfig.supportname;\n            this.supportEmail = this.siteConfig.supportemail;\n            this.countryControl.setValue(this.siteConfig.country || '');\n\n            return true;\n        } else {\n            CoreDomUtils.showErrorModal(\n                Translate.instant(\n                    'core.login.signupplugindisabled',\n                    { $a: Translate.instant('core.login.auth_email') },\n                ),\n            );\n            CoreNavigator.back();\n\n            return false;\n        }\n    }\n\n    /**\n     * Pull to refresh.\n     *\n     * @param event Event.\n     */\n    refreshSettings(event?: IonRefresher): void {\n        this.fetchData().finally(() => {\n            event?.complete();\n        });\n    }\n\n    /**\n     * Create account.\n     *\n     * @param e Event.\n     * @return Promise resolved when done.\n     */\n    async create(e: Event): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!this.signupForm.valid || (this.settings?.recaptchapublickey && !this.captcha.recaptcharesponse)) {\n            // Form not valid. Mark all controls as dirty to display errors.\n            for (const name in this.signupForm.controls) {\n                this.signupForm.controls[name].markAsDirty();\n            }\n            this.changeDetector.detectChanges();\n\n            // Scroll to the first element with errors.\n            const errorFound = await CoreDom.scrollToInputError(\n                this.elementRef.nativeElement,\n            );\n\n            if (!errorFound) {\n                // Input not found, show an error modal.\n                CoreDomUtils.showErrorModal('core.errorinvalidform', true);\n            }\n\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        const params: SignupUserWSParams = {\n            username: this.signupForm.value.username.trim().toLowerCase(),\n            password: this.signupForm.value.password,\n            firstname: CoreTextUtils.cleanTags(this.signupForm.value.firstname),\n            lastname: CoreTextUtils.cleanTags(this.signupForm.value.lastname),\n            email: this.signupForm.value.email.trim(),\n            city: CoreTextUtils.cleanTags(this.signupForm.value.city),\n            country: this.signupForm.value.country,\n        };\n\n        if (this.siteConfig?.launchurl) {\n            params.redirect = CoreLoginHelper.prepareForSSOLogin(this.siteUrl, undefined, this.siteConfig.launchurl);\n        }\n\n        // Get the recaptcha response (if needed).\n        if (this.settings?.recaptchapublickey && this.captcha.recaptcharesponse) {\n            params.recaptcharesponse = this.captcha.recaptcharesponse;\n        }\n\n        try {\n            // Get the data for the custom profile fields.\n            params.customprofilefields = await CoreUserProfileFieldDelegate.getDataForFields(\n                this.settings?.profilefields,\n                true,\n                'email',\n                this.signupForm.value,\n            );\n\n            const result = await CoreWS.callAjax<SignupUserWSResult>(\n                'auth_email_signup_user',\n                params,\n                { siteUrl: this.siteUrl },\n            );\n\n            if (result.success) {\n\n                CoreForms.triggerFormSubmittedEvent(this.signupFormElement, true);\n\n                // Show alert and ho back.\n                const message = Translate.instant('core.login.emailconfirmsent', { $a: params.email });\n                CoreDomUtils.showAlert(Translate.instant('core.success'), message);\n                CoreNavigator.back();\n            } else {\n                this.recaptchaComponent?.expireRecaptchaAnswer();\n\n                const warning = result.warnings?.[0];\n                if (warning) {\n                    let error = warning.message;\n                    if (error == 'incorrect-captcha-sol' || (!error && warning.item == 'recaptcharesponse')) {\n                        error = Translate.instant('core.login.recaptchaincorrect');\n                    }\n\n                    CoreDomUtils.showErrorModal(error);\n                } else {\n                    CoreDomUtils.showErrorModal('core.login.usernotaddederror', true);\n                }\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.login.usernotaddederror', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Escape mail to avoid special characters to be treated as a RegExp.\n     *\n     * @param text Initial mail.\n     * @return Escaped mail.\n     */\n    escapeMail(text: string): string {\n        return CoreTextUtils.escapeForRegex(text);\n    }\n\n    /**\n     * Show authentication instructions.\n     */\n    showAuthInstructions(): void {\n        CoreTextUtils.viewText(Translate.instant('core.login.instructions'), this.authInstructions!);\n    }\n\n    /**\n     * Show contact information on site (we have to display again the age verification form).\n     */\n    showContactOnSite(): void {\n        CoreUtils.openInBrowser(\n            CoreText.concatenatePaths(this.siteUrl, '/login/verify_age_location.php'),\n            { showBrowserWarning: false },\n        );\n    }\n\n    /**\n     * Verify Age.\n     *\n     * @param e Event.\n     * @return Promise resolved when done.\n     */\n    async verifyAge(e: Event): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!this.ageVerificationForm.valid) {\n            CoreDomUtils.showErrorModal('core.errorinvalidform', true);\n\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        const params = this.ageVerificationForm.value;\n\n        params.age = parseInt(params.age, 10); // Use just the integer part.\n\n        try {\n            const result = await CoreWS.callAjax<IsMinorWSResult>('core_auth_is_minor', params, { siteUrl: this.siteUrl });\n\n            CoreForms.triggerFormSubmittedEvent(this.ageFormElement, true);\n\n            if (!result.status) {\n                if (this.countryControl.value) {\n                    this.signUpCountryControl!.setValue(this.countryControl.value);\n                }\n\n                // Not a minor, go ahead.\n                this.ageDigitalConsentVerification = false;\n            } else {\n                // Is a minor.\n                this.isMinor = true;\n            }\n        } catch (error) {\n            // Something wrong, redirect to the site.\n            CoreDomUtils.showErrorModal('There was an error verifying your age, please try again using the browser.');\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n}\n\n/**\n * Result of WS core_auth_is_age_digital_consent_verification_enabled.\n */\ntype IsAgeVerificationEnabledWSResponse = {\n    status: boolean; // True if digital consent verification is enabled, false otherwise.\n};\n\n/**\n * Params for WS auth_email_signup_user.\n */\ntype SignupUserWSParams = {\n    username: string; // Username.\n    password: string; // Plain text password.\n    firstname: string; // The first name(s) of the user.\n    lastname: string; // The family name of the user.\n    email: string; // A valid and unique email address.\n    city?: string; // Home city of the user.\n    country?: string; // Home country code.\n    recaptchachallengehash?: string; // Recaptcha challenge hash.\n    recaptcharesponse?: string; // Recaptcha response.\n    customprofilefields?: { // User custom fields (also known as user profile fields).\n        type: string; // The type of the custom field.\n        name: string; // The name of the custom field.\n        value: unknown; // Custom field value, can be an encoded json if required.\n    }[];\n    redirect?: string; // Redirect the user to this site url after confirmation.\n};\n\n/**\n * Result of WS auth_email_signup_user.\n */\ntype SignupUserWSResult = {\n    success: boolean; // True if the user was created false otherwise.\n    warnings?: CoreWSExternalWarning[];\n};\n\n/**\n * Result of WS core_auth_is_minor.\n */\ntype IsMinorWSResult = {\n    status: boolean; // True if the user is considered to be a digital minor, false if not.\n};\n"],"sourceRoot":"webpack:///"}