{"version":3,"sources":["./src/addons/mod/feedback/pages/attempt/attempt.html","./src/addons/mod/quiz/pages/attempt/attempt.html","./src/addons/mod/feedback/pages/attempt/attempt.module.ts","./src/addons/mod/feedback/pages/attempt/attempt.ts","./src/addons/mod/quiz/pages/attempt/attempt.module.ts","./src/addons/mod/quiz/pages/attempt/attempt.page.ts","./src/core/classes/items-management/swipe-navigation-items-manager.ts"],"names":[],"mappings":"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","file":"pages-attempt-attempt-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"attempt\\\">{{ attempt.fullname }}</h1>\\r\\n            <h1 *ngIf=\\\"anonAttempt\\\">{{ 'addon.mod_feedback.anonymous_user' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [core-swipe-navigation]=\\\"attempts\\\">\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list class=\\\"ion-no-margin\\\" *ngIf=\\\"attempt || anonAttempt\\\">\\r\\n            <ion-item *ngIf=\\\"attempt\\\" class=\\\"ion-text-wrap\\\" core-user-link [userId]=\\\"attempt.userid\\\"\\r\\n                [attr.aria-label]=\\\"'core.user.viewprofile' | translate\\\" [courseId]=\\\"attempt.courseid\\\">\\r\\n                <core-user-avatar [user]=\\\"attempt\\\" slot=\\\"start\\\" [linkProfile]=\\\"false\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>{{attempt.fullname}}</h2>\\r\\n                    <p *ngIf=\\\"attempt.timemodified\\\">{{attempt.timemodified * 1000 | coreFormatDate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"anonAttempt\\\">\\r\\n                <core-user-avatar [linkProfile]=\\\"false\\\" slot=\\\"start\\\"></core-user-avatar>\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_feedback.anonymous_user' |translate }}</h2>\\r\\n                    <p>{{ 'addon.mod_feedback.response_nr' | translate }}: {{anonAttempt.number}}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ng-container *ngIf=\\\"items && items.length\\\">\\r\\n                <ng-container *ngFor=\\\"let item of items\\\">\\r\\n                    <core-spacer *ngIf=\\\"item.typ == 'pagebreak'\\\"></core-spacer>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"item.typ != 'pagebreak'\\\" [color]=\\\"item.dependitem > 0 ? 'light' : ''\\\">\\r\\n                        <ion-label>\\r\\n                            <h2 *ngIf=\\\"item.name\\\" [core-mark-required]=\\\"item.required\\\">\\r\\n                                <span *ngIf=\\\"feedback!.autonumbering && item.itemnumber\\\">{{item.itemnumber}}. </span>\\r\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.name\\\" contextLevel=\\\"module\\\"\\r\\n                                    [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                                </core-format-text>\\r\\n                            </h2>\\r\\n                            <p *ngIf=\\\"item.submittedValue\\\">\\r\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.submittedValue\\\"\\r\\n                                    contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                                </core-format-text>\\r\\n                            </p>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                </ng-container>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>\\r\\n                <core-format-text *ngIf=\\\"quiz\\\" [text]=\\\"quiz.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"quiz.coursemodule\\\"\\r\\n                    [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-list *ngIf=\\\"attempt\\\">\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.attemptnumber' | translate }}</h2>\\r\\n                    <p *ngIf=\\\"attempt.preview\\\">{{ 'addon.mod_quiz.preview' | translate }}</p>\\r\\n                    <p *ngIf=\\\"!attempt.preview\\\">{{ attempt.attempt }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.attemptstate' | translate }}</h2>\\r\\n                    <p *ngFor=\\\"let sentence of attempt.readableState\\\">{{ sentence }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showMarkColumn && attempt.readableMark !== ''\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.marks' | translate }} / {{ quiz!.sumGradesFormatted }}</h2>\\r\\n                    <p>{{ attempt.readableMark }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showGradeColumn && attempt.readableGrade !== ''\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.grade' | translate }} / {{ quiz!.gradeFormatted }}</h2>\\r\\n                    <p>{{ attempt.readableGrade }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showFeedbackColumn && feedback\\\">\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_quiz.feedback' | translate }}</h2>\\r\\n                    <p>\\r\\n                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"componentId\\\" [text]=\\\"feedback\\\" contextLevel=\\\"module\\\"\\r\\n                            [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                        </core-format-text>\\r\\n                    </p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n\\r\\n            <ion-item class=\\\"ion-text-wrap core-danger-item\\\" *ngIf=\\\"!showReviewColumn\\\">\\r\\n                <ion-label>\\r\\n                    <p>{{ 'addon.mod_quiz.noreviewattempt' | translate }}</p>\\r\\n                </ion-label>\\r\\n            </ion-item>\\r\\n        </ion-list>\\r\\n\\r\\n        <div collapsible-footer appearOnBottom *ngIf=\\\"loaded && attempt && showReviewColumn && attempt.finished\\\" slot=\\\"fixed\\\">\\r\\n            <div class=\\\"list-item-limited-width\\\">\\r\\n                <ion-button class=\\\"ion-margin ion-text-wrap\\\" expand=\\\"block\\\" (click)=\\\"reviewAttempt()\\\">\\r\\n                    <ion-icon name=\\\"fas-search\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                    {{ 'addon.mod_quiz.review' | translate }}\\r\\n                </ion-button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AddonModFeedbackAttemptPage } from './attempt';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonModFeedbackAttemptPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonModFeedbackAttemptPage,\r\n    ],\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonModFeedbackAttemptPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { AddonModFeedbackAttemptsSource } from '../../classes/feedback-attempts-source';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackProvider,\n    AddonModFeedbackWSAnonAttempt,\n    AddonModFeedbackWSAttempt,\n    AddonModFeedbackWSFeedback,\n} from '../../services/feedback';\nimport { AddonModFeedbackFormItem, AddonModFeedbackHelper } from '../../services/feedback-helper';\n\n/**\n * Page that displays a feedback attempt review.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-attempt',\n    templateUrl: 'attempt.html',\n})\nexport class AddonModFeedbackAttemptPage implements OnInit, OnDestroy {\n\n    cmId: number;\n    courseId: number;\n    feedback?: AddonModFeedbackWSFeedback;\n    attempt?: AddonModFeedbackWSAttempt;\n    attempts: AddonModFeedbackAttemptsSwipeManager;\n    anonAttempt?: AddonModFeedbackWSAnonAttempt;\n    items: AddonModFeedbackAttemptItem[] = [];\n    component = AddonModFeedbackProvider.COMPONENT;\n    loaded = false;\n\n    protected attemptId: number;\n\n    constructor() {\n        this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n        this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n        this.attemptId = CoreNavigator.getRequiredRouteNumberParam('attemptId');\n\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n            AddonModFeedbackAttemptsSource,\n            [this.courseId, this.cmId],\n        );\n\n        this.attempts = new AddonModFeedbackAttemptsSwipeManager(source);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        try {\n            this.attempts.start();\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.fetchData();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.attempts.destroy();\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.feedback = await AddonModFeedback.getFeedback(this.courseId, this.cmId);\n\n            const attempt = await AddonModFeedback.getAttempt(this.feedback.id, this.attemptId, { cmId: this.cmId });\n\n            if (this.isAnonAttempt(attempt)) {\n                this.anonAttempt = attempt;\n                delete this.attempt;\n            } else {\n                this.attempt = attempt;\n                delete this.anonAttempt;\n            }\n\n            const items = await AddonModFeedback.getItems(this.feedback.id, { cmId: this.cmId });\n\n            // Add responses and format items.\n            this.items = <AddonModFeedbackAttemptItem[]> items.items.map((item) => {\n                const formItem = AddonModFeedbackHelper.getItemForm(item, true);\n                if (!formItem) {\n                    return;\n                }\n\n                const attemptItem = <AddonModFeedbackAttemptItem> formItem;\n\n                if (item.typ == 'label') {\n                    attemptItem.submittedValue = CoreTextUtils.replacePluginfileUrls(item.presentation, item.itemfiles);\n                } else {\n                    for (const x in attempt.responses) {\n                        if (attempt.responses[x].id == item.id) {\n                            attemptItem.submittedValue = attempt.responses[x].printval;\n                            break;\n                        }\n                    }\n                }\n\n                return attemptItem;\n            }).filter((itemData) => itemData); // Filter items with errors.\n        } catch (message) {\n            // Some call failed on fetch, go back.\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\n            CoreNavigator.back();\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Check if an attempt is anonymous or not.\n     *\n     * @param attempt Attempt to check.\n     */\n    isAnonAttempt(attempt: AddonModFeedbackWSAttempt | AddonModFeedbackWSAnonAttempt): attempt is AddonModFeedbackWSAnonAttempt {\n        return !('fullname' in attempt);\n    }\n\n}\n\ntype AddonModFeedbackAttemptItem = AddonModFeedbackFormItem & {\n    submittedValue?: string;\n};\n\n/**\n * Helper to manage swiping within a collection of discussions.\n */\nclass AddonModFeedbackAttemptsSwipeManager extends CoreSwipeNavigationItemsManager {\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        return route.params.attemptId;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonModQuizAttemptPage } from './attempt.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonModQuizAttemptPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        AddonModQuizAttemptPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonModQuizAttemptPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport {\n    AddonModQuiz,\n    AddonModQuizAttemptWSData,\n    AddonModQuizGetQuizAccessInformationWSResponse,\n    AddonModQuizProvider,\n} from '../../services/quiz';\nimport { AddonModQuizAttempt, AddonModQuizHelper, AddonModQuizQuizData } from '../../services/quiz-helper';\n\n/**\n * Page that displays some summary data about an attempt.\n */\n@Component({\n    selector: 'page-addon-mod-quiz-attempt',\n    templateUrl: 'attempt.html',\n})\nexport class AddonModQuizAttemptPage implements OnInit {\n\n    courseId!: number; // The course ID the quiz belongs to.\n    quiz?: AddonModQuizQuizData; // The quiz the attempt belongs to.\n    attempt?: AddonModQuizAttempt; // The attempt to view.\n    component = AddonModQuizProvider.COMPONENT; // Component to link the files to.\n    componentId?: number; // Component ID to use in conjunction with the component.\n    loaded = false; // Whether data has been loaded.\n    feedback?: string; // Attempt feedback.\n    showReviewColumn = false;\n    cmId!: number; // Course module id the attempt belongs to.\n\n    protected attemptId!: number; // Attempt to view.\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        try {\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.attemptId = CoreNavigator.getRequiredRouteNumberParam('attemptId');\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        this.fetchQuizData().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     */\n    doRefresh(refresher: IonRefresher): void {\n        this.refreshData().finally(() => {\n            refresher.complete();\n        });\n    }\n\n    /**\n     * Get quiz data and attempt data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchQuizData(): Promise<void> {\n        try {\n            this.quiz = await AddonModQuiz.getQuiz(this.courseId, this.cmId);\n\n            this.componentId = this.quiz.coursemodule;\n\n            // Load attempt data.\n            const [options, accessInfo, attempt] = await Promise.all([\n                AddonModQuiz.getCombinedReviewOptions(this.quiz.id, { cmId: this.quiz.coursemodule }),\n                this.fetchAccessInfo(),\n                this.fetchAttempt(),\n            ]);\n\n            // Set calculated data.\n            this.showReviewColumn = accessInfo.canreviewmyattempts;\n            AddonModQuizHelper.setQuizCalculatedData(this.quiz, options);\n\n            this.attempt = await AddonModQuizHelper.setAttemptCalculatedData(this.quiz!, attempt, false, undefined, true);\n\n            // Check if the feedback should be displayed.\n            const grade = Number(this.attempt!.rescaledGrade);\n\n            if (this.quiz.showFeedbackColumn && AddonModQuiz.isAttemptFinished(this.attempt!.state) &&\n                    options.someoptions.overallfeedback && !isNaN(grade)) {\n\n                // Feedback should be displayed, get the feedback for the grade.\n                const response = await AddonModQuiz.getFeedbackForGrade(this.quiz.id, grade, {\n                    cmId: this.quiz.coursemodule,\n                });\n\n                this.feedback = response.feedbacktext;\n            } else {\n                delete this.feedback;\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorgetattempt', true);\n        }\n    }\n\n    /**\n     * Get the attempt.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchAttempt(): Promise<AddonModQuizAttemptWSData> {\n        // Get all the attempts and search the one we want.\n        const attempts = await AddonModQuiz.getUserAttempts(this.quiz!.id, { cmId: this.cmId });\n\n        const attempt = attempts.find(attempt => attempt.id == this.attemptId);\n\n        if (!attempt) {\n            // Attempt not found, error.\n            this.attempt = undefined;\n\n            throw new CoreError(Translate.instant('addon.mod_quiz.errorgetattempt'));\n        }\n\n        return attempt;\n    }\n\n    /**\n     * Get the access info.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchAccessInfo(): Promise<AddonModQuizGetQuizAccessInformationWSResponse> {\n        const accessInfo = await AddonModQuiz.getQuizAccessInformation(this.quiz!.id, { cmId: this.cmId });\n\n        if (!accessInfo.canreviewmyattempts) {\n            return accessInfo;\n        }\n\n        // Check if the user can review the attempt.\n        await CoreUtils.ignoreErrors(AddonModQuiz.invalidateAttemptReviewForPage(this.attemptId, -1));\n\n        try {\n            await AddonModQuiz.getAttemptReview(this.attemptId, { page: -1, cmId: this.quiz!.coursemodule });\n        } catch {\n            // Error getting the review, assume the user cannot review the attempt.\n            accessInfo.canreviewmyattempts = false;\n        }\n\n        return accessInfo;\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async refreshData(): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonModQuiz.invalidateQuizData(this.courseId));\n        promises.push(AddonModQuiz.invalidateAttemptReview(this.attemptId));\n\n        if (this.quiz) {\n            promises.push(AddonModQuiz.invalidateUserAttemptsForUser(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateQuizAccessInformation(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateCombinedReviewOptionsForUser(this.quiz.id));\n\n            if (this.attempt && this.feedback !== undefined) {\n                promises.push(AddonModQuiz.invalidateFeedback(this.quiz.id));\n            }\n        }\n\n        await CoreUtils.ignoreErrors(Promise.all(promises));\n\n        await this.fetchQuizData();\n    }\n\n    /**\n     * Go to the page to review the attempt.\n     *\n     * @return Promise resolved when done.\n     */\n    async reviewAttempt(): Promise<void> {\n        CoreNavigator.navigate(`../../review/${this.attempt!.id}`);\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\n\nimport { CoreNavigator } from '@services/navigator';\n\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\n\n/**\n * Helper class to manage the state and routing of a swipeable page.\n */\nexport class CoreSwipeNavigationItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>\n>\n    extends CoreRoutedItemsManager<Item, Source> {\n\n    /**\n     * Process page started operations.\n     */\n    async start(): Promise<void> {\n        this.updateSelectedItem();\n    }\n\n    /**\n     * Navigate to the next item.\n     */\n    async navigateToNextItem(): Promise<void> {\n        await this.navigateToItemBy(1, 'forward');\n    }\n\n    /**\n     * Navigate to the previous item.\n     */\n    async navigateToPreviousItem(): Promise<void> {\n        await this.navigateToItemBy(-1, 'back');\n    }\n\n    /**\n     * Has a next item.\n     */\n    async hasNextItem(): Promise<boolean> {\n        const item = await this.getItemBy(1);\n\n        return !!item;\n    }\n\n    /**\n     * Has a previous item.\n     */\n    async hasPreviousItem(): Promise<boolean> {\n        const item = await this.getItemBy(-1);\n\n        return !!item;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getCurrentPageRoute(): ActivatedRoute | null {\n        return CoreNavigator.getCurrentRoute();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        const segments: UrlSegment[] = [];\n\n        while (route) {\n            segments.push(...route.url);\n\n            if (!route.firstChild) {\n                break;\n            }\n\n            route = route.firstChild;\n        }\n\n        return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n    }\n\n    /**\n     * Navigate to an item by an offset.\n     *\n     * @param delta Index offset.\n     * @param animationDirection Animation direction.\n     */\n    protected async navigateToItemBy(delta: number, animationDirection: 'forward' | 'back'): Promise<void> {\n        const item = await this.getItemBy(delta);\n\n        if (!item) {\n            return;\n        }\n\n        await this.navigateToItem(item, { animationDirection, replace: true });\n    }\n\n    /**\n     * Get item by an offset.\n     *\n     * @param delta Index offset.\n     */\n    protected async getItemBy(delta: number): Promise<Item | null> {\n        const items = this.getSource().getItems();\n        const selectedIndex = (this.selectedItem && items?.indexOf(this.selectedItem)) ?? -1;\n\n        if (selectedIndex === -1 || items === null) {\n            return null;\n        }\n\n        const deltaStep = delta > 0 ? 1 : -1;\n        let nextIndex = selectedIndex;\n        let deltaMoved = 0;\n\n        while (deltaMoved !== delta) {\n            nextIndex += deltaStep;\n\n            if (nextIndex < 0 || nextIndex >= items.length) {\n                break;\n            }\n\n            if (this.skipItemInSwipe(items[nextIndex])) {\n                continue;\n            }\n\n            deltaMoved += deltaStep;\n        }\n\n        if (deltaMoved === delta) {\n            return items[nextIndex];\n        }\n\n        if (!this.getSource().isCompleted()) {\n            await this.getSource().load();\n\n            return this.getItemBy(delta);\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if an item should be skipped during swipe navigation.\n     *\n     * @param item Item.\n     * @returns Whether to skip this item during swipe navigation.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected skipItemInSwipe(item: Item): boolean {\n        return false;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}