{"version":3,"sources":["./src/addons/calendar/pages/day/day.html","./src/addons/calendar/pages/day/day.module.ts","./src/addons/calendar/pages/day/day.page.ts","./src/addons/calendar/pages/day/day.scss"],"names":[],"mappings":"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","file":"addons-calendar-pages-day-day-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.calendar.calendarevents' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"openFilter()\\\" [attr.aria-label]=\\\"'core.filter' | translate\\\">\\r\\n                <ion-icon slot=\\\"icon-only\\\" name=\\\"fas-filter\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n            <core-context-menu>\\r\\n                <core-context-menu-item *ngIf=\\\"!selectedDayIsCurrent()\\\" [priority]=\\\"900\\\" [content]=\\\"'addon.calendar.today' | translate\\\"\\r\\n                    iconAction=\\\"fas-calendar-day\\\" (action)=\\\"goToCurrentDay()\\\">\\r\\n                </core-context-menu-item>\\r\\n                <core-context-menu-item [hidden]=\\\"!loaded || !selectedDayHasOffline() || !isOnline\\\" [priority]=\\\"400\\\"\\r\\n                    [content]=\\\"'core.settings.synchronizenow' | translate\\\" (action)=\\\"doRefresh(undefined, $event)\\\" [iconAction]=\\\"syncIcon\\\"\\r\\n                    [closeOnClick]=\\\"false\\\">\\r\\n                </core-context-menu-item>\\r\\n            </core-context-menu>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <div class=\\\"core-swipe-slides-container\\\">\\r\\n            <!-- Period name and arrows to navigate. -->\\r\\n            <ion-grid class=\\\"ion-no-padding safe-area-padding\\\">\\r\\n                <ion-row class=\\\"ion-align-items-center\\\">\\r\\n                    <ion-col class=\\\"ion-text-start\\\">\\r\\n                        <ion-button fill=\\\"clear\\\" (click)=\\\"loadPrevious()\\\" [attr.aria-label]=\\\"'addon.calendar.dayprev' | translate\\\">\\r\\n                            <ion-icon name=\\\"fas-chevron-left\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        </ion-button>\\r\\n                    </ion-col>\\r\\n                    <ion-col class=\\\"ion-text-center addon-calendar-period\\\">\\r\\n                        <h3>{{ periodName }}</h3>\\r\\n                    </ion-col>\\r\\n                    <ion-col class=\\\"ion-text-end\\\">\\r\\n                        <ion-button fill=\\\"clear\\\" (click)=\\\"loadNext()\\\" [attr.aria-label]=\\\"'addon.calendar.daynext' | translate\\\">\\r\\n                            <ion-icon name=\\\"fas-chevron-right\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                        </ion-button>\\r\\n                    </ion-col>\\r\\n                </ion-row>\\r\\n            </ion-grid>\\r\\n\\r\\n            <core-swipe-slides [manager]=\\\"manager\\\">\\r\\n                <ng-template let-day=\\\"item\\\">\\r\\n                    <core-loading [hideUntil]=\\\"day.loaded\\\">\\r\\n                        <!-- There is data to be synchronized -->\\r\\n                        <ion-card class=\\\"core-warning-card list-item-limited-width\\\" *ngIf=\\\"day.hasOffline\\\">\\r\\n                            <ion-item>\\r\\n                                <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                                <ion-label>{{ 'core.hasdatatosync' | translate:{$a: 'core.day' | translate} }}</ion-label>\\r\\n                            </ion-item>\\r\\n                        </ion-card>\\r\\n\\r\\n                        <core-empty-box *ngIf=\\\"!day.filteredEvents || !day.filteredEvents.length\\\" icon=\\\"fas-calendar\\\"\\r\\n                            [message]=\\\"'addon.calendar.noevents' | translate\\\">\\r\\n                        </core-empty-box>\\r\\n\\r\\n                        <ion-list *ngIf=\\\"day.filteredEvents && day.filteredEvents.length\\\" class=\\\"list-item-limited-width\\\">\\r\\n                            <ng-container *ngFor=\\\"let event of day.filteredEvents\\\">\\r\\n                                <ion-card>\\r\\n                                    <ion-item class=\\\"addon-calendar-event ion-text-wrap\\\" [attr.aria-label]=\\\"event.name\\\"\\r\\n                                        (click)=\\\"gotoEvent(event.id)\\\" [class.item-dimmed]=\\\"event.ispast\\\"\\r\\n                                        [ngClass]=\\\"['addon-calendar-eventtype-'+event.eventtype]\\\" button [detail]=\\\"false\\\">\\r\\n                                        <core-mod-icon *ngIf=\\\"event.moduleIcon\\\" [modicon]=\\\"event.moduleIcon\\\" slot=\\\"start\\\" [showAlt]=\\\"false\\\"\\r\\n                                            [modname]=\\\"event.modulename\\\" [componentId]=\\\"event.instance\\\">\\r\\n                                        </core-mod-icon>\\r\\n                                        <ion-icon *ngIf=\\\"event.eventIcon && !event.moduleIcon\\\" [name]=\\\"event.eventIcon\\\" slot=\\\"start\\\"\\r\\n                                            aria-hidden=\\\"true\\\">\\r\\n                                        </ion-icon>\\r\\n                                        <ion-label>\\r\\n                                            <!-- Add the icon title so accessibility tools read it. -->\\r\\n                                            <span class=\\\"sr-only\\\">\\r\\n                                                {{ 'addon.calendar.type' + event.formattedType | translate }}\\r\\n                                                <span class=\\\"sr-only\\\" *ngIf=\\\"event.moduleIcon && event.iconTitle\\\">{{ event.iconTitle\\r\\n                                                    }}</span>\\r\\n                                            </span>\\r\\n                                            <p class=\\\"item-heading\\\">\\r\\n                                                <core-format-text [text]=\\\"event.name\\\" [contextLevel]=\\\"event.contextLevel\\\"\\r\\n                                                    [contextInstanceId]=\\\"event.contextInstanceId\\\"></core-format-text>\\r\\n                                            </p>\\r\\n                                            <p [innerHTML]=\\\"event.formattedtime\\\"></p>\\r\\n                                        </ion-label>\\r\\n                                        <ion-note *ngIf=\\\"event.offline && !event.deleted\\\" slot=\\\"end\\\">\\r\\n                                            <ion-icon name=\\\"fas-clock\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                                            <span class=\\\"ion-text-wrap\\\">{{ 'core.notsent' | translate }}</span>\\r\\n                                        </ion-note>\\r\\n                                        <ion-note *ngIf=\\\"event.deleted\\\" slot=\\\"end\\\">\\r\\n                                            <ion-icon name=\\\"fas-trash\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n                                            <span class=\\\"ion-text-wrap\\\">{{ 'core.deletedoffline' | translate }}</span>\\r\\n                                        </ion-note>\\r\\n                                    </ion-item>\\r\\n                                </ion-card>\\r\\n                            </ng-container>\\r\\n                        </ion-list>\\r\\n                    </core-loading>\\r\\n                </ng-template>\\r\\n            </core-swipe-slides>\\r\\n        </div>\\r\\n    </core-loading>\\r\\n\\r\\n    <!-- Create a calendar event. -->\\r\\n    <ion-fab slot=\\\"fixed\\\" core-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" *ngIf=\\\"canCreate && loaded\\\">\\r\\n        <ion-fab-button (click)=\\\"openEdit()\\\" [attr.aria-label]=\\\"'addon.calendar.newevent' | translate\\\">\\r\\n            <ion-icon name=\\\"fas-plus\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            <span class=\\\"sr-only\\\">{{ 'addon.calendar.newevent' | translate }}</span>\\r\\n        </ion-fab-button>\\r\\n    </ion-fab>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonCalendarComponentsModule } from '../../components/components.module';\r\n\r\nimport { AddonCalendarDayPage } from './day.page';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonCalendarDayPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        AddonCalendarComponentsModule,\r\n    ],\r\n    declarations: [\r\n        AddonCalendarDayPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonCalendarDayPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreApp } from '@services/app';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport {\n    AddonCalendarProvider,\n    AddonCalendar,\n    AddonCalendarEventToDisplay,\n    AddonCalendarCalendarDay,\n    AddonCalendarEventType,\n} from '../../services/calendar';\nimport { AddonCalendarOffline } from '../../services/calendar-offline';\nimport { AddonCalendarFilter, AddonCalendarHelper } from '../../services/calendar-helper';\nimport { AddonCalendarSync, AddonCalendarSyncProvider } from '../../services/calendar-sync';\nimport { CoreCategoryData, CoreCourses, CoreEnrolledCourseData } from '@features/courses/services/courses';\nimport { CoreCoursesHelper } from '@features/courses/services/courses-helper';\nimport { AddonCalendarFilterComponent } from '../../components/filter/filter';\nimport moment from 'moment';\nimport { Network, NgZone } from '@singletons';\nimport { CoreNavigator } from '@services/navigator';\nimport { Params } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreSwipeSlidesDynamicItemsManager } from '@classes/items-management/swipe-slides-dynamic-items-manager';\nimport { CoreSwipeSlidesComponent } from '@components/swipe-slides/swipe-slides';\nimport {\n    CoreSwipeSlidesDynamicItem,\n    CoreSwipeSlidesDynamicItemsManagerSource,\n} from '@classes/items-management/swipe-slides-dynamic-items-manager-source';\n\n/**\n * Page that displays the calendar events for a certain day.\n */\n@Component({\n    selector: 'page-addon-calendar-day',\n    templateUrl: 'day.html',\n    styleUrls: ['../../calendar-common.scss', 'day.scss'],\n})\nexport class AddonCalendarDayPage implements OnInit, OnDestroy {\n\n    @ViewChild(CoreSwipeSlidesComponent) slides?: CoreSwipeSlidesComponent<PreloadedDay>;\n\n    protected currentSiteId: string;\n\n    // Observers.\n    protected newEventObserver: CoreEventObserver;\n    protected discardedObserver: CoreEventObserver;\n    protected editEventObserver: CoreEventObserver;\n    protected deleteEventObserver: CoreEventObserver;\n    protected undeleteEventObserver: CoreEventObserver;\n    protected syncObserver: CoreEventObserver;\n    protected manualSyncObserver: CoreEventObserver;\n    protected onlineObserver: Subscription;\n    protected filterChangedObserver: CoreEventObserver;\n    protected managerUnsubscribe?: () => void;\n\n    periodName?: string;\n    manager?: CoreSwipeSlidesDynamicItemsManager<PreloadedDay, AddonCalendarDaySlidesItemsManagerSource>;\n    loaded = false;\n    isOnline = false;\n    syncIcon = CoreConstants.ICON_LOADING;\n    filter: AddonCalendarFilter = {\n        filtered: false,\n        courseId: undefined,\n        categoryId: undefined,\n        course: true,\n        group: true,\n        site: true,\n        user: true,\n        category: true,\n    };\n\n    constructor() {\n        this.currentSiteId = CoreSites.getCurrentSiteId();\n\n        // Listen for events added. When an event is added, reload the data.\n        this.newEventObserver = CoreEvents.on(\n            AddonCalendarProvider.NEW_EVENT_EVENT,\n            (data) => {\n                if (data && data.eventId) {\n                    this.manager?.getSource().markAllItemsUnloaded();\n                    this.refreshData(true, true);\n                }\n            },\n            this.currentSiteId,\n        );\n\n        // Listen for new event discarded event. When it does, reload the data.\n        this.discardedObserver = CoreEvents.on(AddonCalendarProvider.NEW_EVENT_DISCARDED_EVENT, () => {\n            this.manager?.getSource().markAllItemsUnloaded();\n            this.refreshData(true, true);\n        }, this.currentSiteId);\n\n        // Listen for events edited. When an event is edited, reload the data.\n        this.editEventObserver = CoreEvents.on(\n            AddonCalendarProvider.EDIT_EVENT_EVENT,\n            (data) => {\n                if (data && data.eventId) {\n                    this.manager?.getSource().markAllItemsUnloaded();\n                    this.refreshData(true, true);\n                }\n            },\n            this.currentSiteId,\n        );\n\n        // Refresh data if calendar events are synchronized automatically.\n        this.syncObserver = CoreEvents.on(AddonCalendarSyncProvider.AUTO_SYNCED, () => {\n            this.manager?.getSource().markAllItemsUnloaded();\n            this.refreshData(false, true);\n        }, this.currentSiteId);\n\n        // Refresh data if calendar events are synchronized manually but not by this page.\n        this.manualSyncObserver = CoreEvents.on(AddonCalendarSyncProvider.MANUAL_SYNCED, (data) => {\n            const selectedDay = this.manager?.getSelectedItem();\n            if (data && (data.source != 'day' || !selectedDay || !data.moment || !selectedDay.moment.isSame(data.moment, 'day'))) {\n                this.manager?.getSource().markAllItemsUnloaded();\n                this.refreshData(false, true);\n            }\n        }, this.currentSiteId);\n\n        // Update the events when an event is deleted.\n        this.deleteEventObserver = CoreEvents.on(\n            AddonCalendarProvider.DELETED_EVENT_EVENT,\n            (data) => {\n                if (data && !data.sent) {\n                    // Event was deleted in offline. Just mark it as deleted, no need to refresh.\n                    this.manager?.getSource().markAsDeleted(data.eventId, true);\n                } else {\n                    this.manager?.getSource().markAllItemsUnloaded();\n                    this.refreshData(false, true);\n                }\n            },\n            this.currentSiteId,\n        );\n\n        // Listen for events \"undeleted\" (offline).\n        this.undeleteEventObserver = CoreEvents.on(\n            AddonCalendarProvider.UNDELETED_EVENT_EVENT,\n            (data) => {\n                if (!data || !data.eventId) {\n                    return;\n                }\n\n                // Mark it as undeleted, no need to refresh.\n                this.manager?.getSource().markAsDeleted(data.eventId, false);\n            },\n            this.currentSiteId,\n        );\n\n        this.filterChangedObserver = CoreEvents.on(\n            AddonCalendarProvider.FILTER_CHANGED_EVENT,\n            async (data) => {\n                this.filter = data;\n\n                // Course viewed has changed, check if the user can create events for this course calendar.\n                await this.manager?.getSource().loadCanCreate(this.filter.courseId);\n\n                this.manager?.getSource().filterAllDayEvents(this.filter);\n            },\n        );\n\n        // Refresh online status when changes.\n        this.onlineObserver = Network.onChange().subscribe(() => {\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\n            NgZone.run(() => {\n                this.isOnline = CoreApp.isOnline();\n            });\n        });\n    }\n\n    /**\n     * View loaded.\n     */\n    ngOnInit(): void {\n        const types: string[] = [];\n\n        CoreUtils.enumKeys(AddonCalendarEventType).forEach((name) => {\n            const value = AddonCalendarEventType[name];\n            this.filter[name] = CoreNavigator.getRouteBooleanParam(name) ?? true;\n            types.push(value);\n        });\n        this.filter.courseId = CoreNavigator.getRouteNumberParam('courseId');\n        this.filter.categoryId = CoreNavigator.getRouteNumberParam('categoryId');\n\n        this.filter.filtered = this.filter.courseId !== undefined || types.some((name) => !this.filter[name]);\n\n        const month = CoreNavigator.getRouteNumberParam('month');\n        const source = new AddonCalendarDaySlidesItemsManagerSource(this, moment({\n            year: CoreNavigator.getRouteNumberParam('year'),\n            month: month ? month - 1 : undefined,\n            date: CoreNavigator.getRouteNumberParam('day'),\n        }));\n        this.manager = new CoreSwipeSlidesDynamicItemsManager(source);\n        this.managerUnsubscribe = this.manager.addListener({\n            onSelectedItemUpdated: (item) => {\n                this.onDayViewed(item);\n            },\n        });\n\n        this.fetchData(true);\n    }\n\n    get canCreate(): boolean {\n        return this.manager?.getSource().canCreate || false;\n    }\n\n    get timeFormat(): string {\n        return this.manager?.getSource().timeFormat || 'core.strftimetime';\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     *\n     * @param sync Whether it should try to synchronize offline events.\n     * @param showErrors Whether to show sync errors to the user.\n     * @return Promise resolved when done.\n     */\n    async fetchData(sync?: boolean): Promise<void> {\n        this.syncIcon = CoreConstants.ICON_LOADING;\n        this.isOnline = CoreApp.isOnline();\n\n        if (sync) {\n            await this.sync();\n        }\n\n        try {\n            await this.manager?.getSource().fetchData(this.filter.courseId);\n\n            await this.manager?.getSource().load(this.manager?.getSelectedItem());\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.calendar.errorloadevents', true);\n        }\n\n        this.loaded = true;\n        this.syncIcon = CoreConstants.ICON_SYNC;\n    }\n\n    /**\n     * Update data related to day being viewed.\n     *\n     * @param day Day viewed.\n     */\n    onDayViewed(day: DayBasicData): void {\n        this.periodName = CoreTimeUtils.userDate(\n            day.moment.unix() * 1000,\n            'core.strftimedaydate',\n        );\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @param done Function to call when done.\n     * @return Promise resolved when done.\n     */\n    async doRefresh(refresher?: IonRefresher, done?: () => void): Promise<void> {\n        if (!this.loaded) {\n            return;\n        }\n\n        await this.refreshData(true).finally(() => {\n            refresher?.complete();\n            done && done();\n        });\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param sync Whether it should try to synchronize offline events.\n     * @param afterChange Whether the refresh is done after an event has changed or has been synced.\n     * @return Promise resolved when done.\n     */\n    async refreshData(sync?: boolean, afterChange?: boolean): Promise<void> {\n        this.syncIcon = CoreConstants.ICON_LOADING;\n\n        const selectedDay = this.manager?.getSelectedItem() || null;\n\n        // Don't invalidate day events after a change, it has already been handled.\n        await this.manager?.getSource().invalidateContent(selectedDay, !afterChange);\n\n        await this.fetchData(sync);\n    }\n\n    /**\n     * Try to synchronize offline events.\n     *\n     * @param showErrors Whether to show sync errors to the user.\n     * @return Promise resolved when done.\n     */\n    protected async sync(showErrors?: boolean): Promise<void> {\n        try {\n            const result = await AddonCalendarSync.syncEvents();\n\n            if (result.warnings && result.warnings.length) {\n                CoreDomUtils.showErrorModal(result.warnings[0]);\n            }\n\n            if (result.updated) {\n                // Trigger a manual sync event.\n                const selectedDay = this.manager?.getSelectedItem();\n                result.source = 'day';\n                result.moment = selectedDay?.moment;\n\n                this.manager?.getSource().markAllItemsUnloaded();\n                CoreEvents.trigger(AddonCalendarSyncProvider.MANUAL_SYNCED, result, this.currentSiteId);\n            }\n        } catch (error) {\n            if (showErrors) {\n                CoreDomUtils.showErrorModalDefault(error, 'core.errorsync', true);\n            }\n        }\n    }\n\n    /**\n     * Check whether selected day is current day.\n     */\n    selectedDayIsCurrent(): boolean {\n        return !!this.manager?.getSelectedItem()?.isCurrentDay;\n    }\n\n    /**\n     * Navigate to a particular event.\n     *\n     * @param eventId Event to load.\n     */\n    gotoEvent(eventId: number): void {\n        CoreNavigator.navigateToSitePath(`/calendar/event/${eventId}`);\n    }\n\n    /**\n     * Show the filter menu.\n     */\n    async openFilter(): Promise<void> {\n        await CoreDomUtils.openSideModal({\n            component: AddonCalendarFilterComponent,\n            componentProps: {\n                courses: this.manager?.getSource().courses,\n                filter: this.filter,\n            },\n        });\n    }\n\n    /**\n     * Open page to create/edit an event.\n     *\n     * @param eventId Event ID to edit.\n     */\n    openEdit(eventId?: number): void {\n        const params: Params = {};\n\n        if (!eventId) {\n            // It's a new event, set the time.\n            eventId = 0;\n\n            const selectedDay = this.manager?.getSelectedItem();\n            if (selectedDay) {\n                // Use current time but in the specified day.\n                const now = moment();\n                params.timestamp = selectedDay.moment.clone().set({ hour: now.hour(), minute: now.minute() }).unix() * 1000;\n            }\n        }\n\n        if (this.filter.courseId) {\n            params.courseId = this.filter.courseId;\n        }\n\n        CoreNavigator.navigateToSitePath(`/calendar/edit/${eventId}`, { params });\n    }\n\n    /**\n     * Check whether selected day has offline data.\n     *\n     * @return Whether selected day has offline data.\n     */\n    selectedDayHasOffline(): boolean {\n        const selectedDay = this.manager?.getSelectedItem();\n\n        return !!(selectedDay?.hasOffline);\n    }\n\n    /**\n     * Go to current day.\n     */\n    async goToCurrentDay(): Promise<void> {\n        const manager = this.manager;\n        const slides = this.slides;\n        if (!manager || !slides) {\n            return;\n        }\n\n        const currentDay = {\n            moment: moment(),\n        };\n        this.loaded = false;\n\n        try {\n            // Make sure the day is loaded.\n            await manager.getSource().loadItem(currentDay);\n\n            slides.slideToItem(currentDay);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.calendar.errorloadevents', true);\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Load next day.\n     */\n    async loadNext(): Promise<void> {\n        this.slides?.slideNext();\n    }\n\n    /**\n     * Load previous day.\n     */\n    async loadPrevious(): Promise<void> {\n        this.slides?.slidePrev();\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.newEventObserver?.off();\n        this.discardedObserver?.off();\n        this.editEventObserver?.off();\n        this.deleteEventObserver?.off();\n        this.undeleteEventObserver?.off();\n        this.syncObserver?.off();\n        this.manualSyncObserver?.off();\n        this.onlineObserver?.unsubscribe();\n        this.filterChangedObserver?.off();\n        this.managerUnsubscribe && this.managerUnsubscribe();\n    }\n\n}\n\n/**\n * Basic data to identify a day.\n */\ntype DayBasicData = {\n    moment: moment.Moment;\n};\n\n/**\n * Preloaded month.\n */\ntype PreloadedDay = DayBasicData & CoreSwipeSlidesDynamicItem & {\n    events?: AddonCalendarEventToDisplay[]; // Events (both online and offline).\n    onlineEvents?: AddonCalendarEventToDisplay[];\n    filteredEvents?: AddonCalendarEventToDisplay[];\n    isCurrentDay?: boolean;\n    isPastDay?: boolean;\n    hasOffline?: boolean; // Whether the day has offline data.\n};\n\n/**\n * Helper to manage swiping within days.\n */\nclass AddonCalendarDaySlidesItemsManagerSource extends CoreSwipeSlidesDynamicItemsManagerSource<PreloadedDay> {\n\n    courses: Partial<CoreEnrolledCourseData>[] = [];\n    // Offline events classified in month & day.\n    offlineEvents: Record<string, Record<number, AddonCalendarEventToDisplay[]>> = {};\n    offlineEditedEventsIds: number[] = []; // IDs of events edited in offline.\n    categories?: { [id: number]: CoreCategoryData };\n    deletedEvents?: Set<number>; // Events deleted in offline.\n    timeFormat?: string;\n    canCreate = false;\n\n    protected dayPage: AddonCalendarDayPage;\n\n    constructor(page: AddonCalendarDayPage, initialMoment: moment.Moment) {\n        super({ moment: initialMoment });\n\n        this.dayPage = page;\n    }\n\n    /**\n     * Fetch data.\n     *\n     * @param courseId Current selected course id (if any).\n     * @return Promise resolved when done.\n     */\n    async fetchData(courseId?: number): Promise<void> {\n        await Promise.all([\n            this.loadCourses(courseId),\n            this.loadCanCreate(courseId),\n            this.loadCategories(),\n            this.loadOfflineEvents(),\n            this.loadOfflineDeletedEvents(),\n            this.loadTimeFormat(),\n        ]);\n    }\n\n    /**\n     * Filter all loaded days events based on the filter popover.\n     *\n     * @param filter Filter to apply.\n     */\n    filterAllDayEvents(filter: AddonCalendarFilter): void {\n        this.getItems()?.forEach(day => this.filterEvents(day, filter));\n    }\n\n    /**\n     * Filter events of a certain day based on the filter popover.\n     *\n     * @param day Day with the events.\n     * @param filter Filter to apply.\n     */\n    filterEvents(day: PreloadedDay, filter: AddonCalendarFilter): void {\n        day.filteredEvents = AddonCalendarHelper.getFilteredEvents(day.events || [], filter, this.categories || {});\n    }\n\n    /**\n     * Load courses.\n     *\n     * @param courseId Current selected course id (if any).\n     * @return Promise resolved when done.\n     */\n    async loadCourses(courseId?: number): Promise<void> {\n        const data = await CoreCoursesHelper.getCoursesForPopover(courseId);\n\n        this.courses = data.courses;\n    }\n\n    /**\n     * Load whether user can create events.\n     *\n     * @param courseId Current selected course id (if any).\n     * @return Promise resolved when done.\n     */\n    async loadCanCreate(courseId?: number): Promise<void> {\n        this.canCreate = await AddonCalendarHelper.canEditEvents(courseId);\n    }\n\n    /**\n     * Load categories to be able to filter events.\n     *\n     * @return Promise resolved when done.\n     */\n    async loadCategories(): Promise<void> {\n        if (this.categories) {\n            // Already retrieved, stop.\n            return;\n        }\n\n        try {\n            const categories = await CoreCourses.getCategories(0, true);\n\n            // Index categories by ID.\n            this.categories = CoreUtils.arrayToObject(categories, 'id');\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n    /**\n     * Load events created or edited in offline.\n     *\n     * @return Promise resolved when done.\n     */\n    async loadOfflineEvents(): Promise<void> {\n        // Get offline events.\n        const events = await AddonCalendarOffline.getAllEditedEvents();\n\n        // Classify them by month & day.\n        this.offlineEvents = AddonCalendarHelper.classifyIntoMonths(events);\n\n        // Get the IDs of events edited in offline.\n        this.offlineEditedEventsIds = events.filter((event) => event.id > 0).map((event) => event.id);\n    }\n\n    /**\n     * Load events deleted in offline.\n     *\n     * @return Promise resolved when done.\n     */\n    async loadOfflineDeletedEvents(): Promise<void> {\n        const deletedEventsIds = await AddonCalendarOffline.getAllDeletedEventsIds();\n\n        this.deletedEvents = new Set(deletedEventsIds);\n    }\n\n    /**\n     * Load time format.\n     *\n     * @return Promise resolved when done.\n     */\n    async loadTimeFormat(): Promise<void> {\n        this.timeFormat = await AddonCalendar.getCalendarTimeFormat();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getItemId(item: DayBasicData): string | number {\n        return AddonCalendarHelper.getDayId(item.moment);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getPreviousItem(item: DayBasicData): DayBasicData | null {\n        return {\n            moment: item.moment.clone().subtract(1, 'day'),\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getNextItem(item: DayBasicData): DayBasicData | null {\n        return {\n            moment: item.moment.clone().add(1, 'day'),\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async loadItemData(day: DayBasicData, preload = false): Promise<PreloadedDay | null> {\n        const preloadedDay: PreloadedDay = {\n            ...day,\n            hasOffline: false,\n            events: [],\n            onlineEvents: [],\n            filteredEvents: [],\n            isCurrentDay: day.moment.isSame(moment(), 'day'),\n            isPastDay: day.moment.isBefore(moment(), 'day'),\n        };\n\n        if (preload) {\n            return preloadedDay;\n        }\n\n        let result: AddonCalendarCalendarDay;\n\n        try {\n            // Don't pass courseId and categoryId, we'll filter them locally.\n            result = await AddonCalendar.getDayEvents(day.moment.year(), day.moment.month() + 1, day.moment.date());\n            preloadedDay.onlineEvents = await Promise.all(\n                result.events.map((event) => AddonCalendarHelper.formatEventData(event)),\n            );\n        } catch (error) {\n            // Allow navigating to non-cached days in offline (behave as if using emergency cache).\n            if (CoreApp.isOnline()) {\n                throw error;\n            }\n        }\n\n        // Merge the online events with offline data.\n        preloadedDay.events = this.mergeEvents(preloadedDay);\n\n        // Filter events by course.\n        this.filterEvents(preloadedDay, this.dayPage.filter);\n\n        // Re-calculate the formatted time so it uses the device date.\n        const dayTime = day.moment.unix() * 1000;\n        const currentTime = CoreTimeUtils.timestamp();\n\n        const promises = preloadedDay.events.map(async (event) => {\n            event.ispast = preloadedDay.isPastDay || (preloadedDay.isCurrentDay && this.isEventPast(event, currentTime));\n            event.formattedtime = await AddonCalendar.formatEventTime(event, this.dayPage.timeFormat, true, dayTime);\n        });\n\n        await Promise.all(promises);\n\n        return preloadedDay;\n    }\n\n    /**\n     * Returns if the event is in the past or not.\n     *\n     * @param event Event object.\n     * @param currentTime Current time.\n     * @return True if it's in the past.\n     */\n    isEventPast(event: AddonCalendarEventToDisplay, currentTime: number): boolean {\n        return (event.timestart + event.timeduration) < currentTime;\n    }\n\n    /**\n     * Merge online events with the offline events of that period.\n     *\n     * @param day Day with the events.\n     * @return Merged events.\n     */\n    mergeEvents(day: PreloadedDay): AddonCalendarEventToDisplay[] {\n        day.hasOffline = false;\n\n        if (!Object.keys(this.offlineEvents).length && !this.deletedEvents?.size) {\n            // No offline events, nothing to merge.\n            return day.onlineEvents || [];\n        }\n\n        const monthOfflineEvents = this.offlineEvents[AddonCalendarHelper.getMonthId(day.moment)];\n        const dayOfflineEvents = monthOfflineEvents && monthOfflineEvents[day.moment.date()];\n        let result = day.onlineEvents || [];\n\n        if (this.deletedEvents?.size) {\n            // Mark as deleted the events that were deleted in offline.\n            result.forEach((event) => {\n                event.deleted = this.deletedEvents?.has(event.id);\n\n                if (event.deleted) {\n                    day.hasOffline = true;\n                }\n            });\n        }\n\n        if (this.offlineEditedEventsIds.length) {\n            // Remove the online events that were modified in offline.\n            result = result.filter((event) => this.offlineEditedEventsIds.indexOf(event.id) == -1);\n\n            if (result.length != day.onlineEvents?.length) {\n                day.hasOffline = true;\n            }\n        }\n\n        if (dayOfflineEvents && dayOfflineEvents.length) {\n            // Add the offline events (either new or edited).\n            day.hasOffline = true;\n            result = AddonCalendarHelper.sortEvents(result.concat(dayOfflineEvents));\n        }\n\n        return result;\n    }\n\n    /**\n     * Invalidate content.\n     *\n     * @param selectedDay The current selected day.\n     * @param invalidateDayEvents Whether to invalidate selected day events.\n     * @return Promise resolved when done.\n     */\n    async invalidateContent(selectedDay: PreloadedDay | null, invalidateDayEvents?: boolean): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        if (invalidateDayEvents && selectedDay) {\n            promises.push(AddonCalendar.invalidateDayEvents(\n                selectedDay.moment.year(),\n                selectedDay.moment.month() + 1,\n                selectedDay.moment.date(),\n            ));\n        }\n        promises.push(AddonCalendar.invalidateAllowedEventTypes());\n        promises.push(CoreCourses.invalidateCategories(0, true));\n        promises.push(AddonCalendar.invalidateTimeFormat());\n\n        this.categories = undefined; // Get categories again.\n\n        if (selectedDay) {\n            selectedDay.dirty = true;\n        }\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Find an event and mark it as deleted.\n     *\n     * @param eventId Event ID.\n     * @param deleted Whether to mark it as deleted or not.\n     */\n    markAsDeleted(eventId: number, deleted: boolean): void {\n        // Mark the event as deleted or not.\n        this.getItems()?.some(day => {\n            const event = day.onlineEvents?.find((event) => event.id == eventId);\n\n            if (!event) {\n                return false;\n            }\n\n            event.deleted = deleted;\n\n            if (deleted) {\n                day.hasOffline = true;\n            } else {\n                // Re-calculate \"hasOffline\".\n                day.hasOffline = day.events?.length != day.onlineEvents?.length ||\n                    day.events?.some((event) => event.deleted || event.offline);\n            }\n\n            return true;\n        });\n\n        // Add it or remove it from the list of deleted events.\n        if (deleted) {\n            this.deletedEvents?.add(eventId);\n        } else {\n            this.deletedEvents?.delete(eventId);\n        }\n    }\n\n}\n","export default \":host .core-swipe-slides-container ion-grid {\\n  flex: none;\\n  width: 100%;\\n}\\n:host .addon-calendar-period {\\n  flex-grow: 3;\\n}\\n:host .addon-calendar-period h3 {\\n  margin-top: 10px;\\n  font-size: 1.2rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvY2FsZW5kYXIvcGFnZXMvZGF5L2RheS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksVUFBQTtFQUNBLFdBQUE7QUFBUjtBQUdJO0VBQ0ksWUFBQTtBQURSO0FBRVE7RUFDSSxnQkFBQTtFQUNBLGlCQUFBO0FBQVoiLCJmaWxlIjoic3JjL2FkZG9ucy9jYWxlbmRhci9wYWdlcy9kYXkvZGF5LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XHJcbiAgICAuY29yZS1zd2lwZS1zbGlkZXMtY29udGFpbmVyIGlvbi1ncmlkIHtcclxuICAgICAgICBmbGV4OiBub25lO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG5cclxuICAgIC5hZGRvbi1jYWxlbmRhci1wZXJpb2Qge1xyXG4gICAgICAgIGZsZXgtZ3JvdzogMztcclxuICAgICAgICBoMyB7XHJcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0= */\";"],"sourceRoot":"webpack:///"}