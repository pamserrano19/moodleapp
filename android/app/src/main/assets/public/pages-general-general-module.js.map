{"version":3,"sources":["./src/core/features/settings/pages/general/general.html","./src/core/features/settings/pages/general/general.module.ts","./src/core/features/settings/pages/general/general.scss","./src/core/features/settings/pages/general/general.ts"],"names":[],"mappings":"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","file":"pages-general-general-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-title>\\r\\n            <h1>{{ 'core.settings.general' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-list class=\\\"list-item-limited-width\\\">\\r\\n        <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\">\\r\\n            <ion-label>\\r\\n                <h2>{{ 'core.settings.language' | translate }}</h2>\\r\\n            </ion-label>\\r\\n            <ion-select [(ngModel)]=\\\"selectedLanguage\\\" (ionChange)=\\\"languageChanged()\\\" interface=\\\"action-sheet\\\"\\r\\n                [interfaceOptions]=\\\"{header: 'core.settings.language' | translate}\\\">\\r\\n                <ion-select-option *ngFor=\\\"let entry of languages\\\" [value]=\\\"entry.code\\\">{{ entry.name }}</ion-select-option>\\r\\n            </ion-select>\\r\\n        </ion-item>\\r\\n        <ion-item class=\\\"ion-text-wrap core-settings-general-font-size item-interactive\\\" lines=\\\"none\\\">\\r\\n            <ion-label>\\r\\n                <h2>{{ 'core.settings.fontsize' | translate }}</h2>\\r\\n            </ion-label>\\r\\n            <ion-segment [(ngModel)]=\\\"selectedZoomLevel\\\" (ionChange)=\\\"zoomLevelChanged()\\\" color=\\\"primary\\\">\\r\\n                <ion-segment-button *ngFor=\\\"let zoomLevel of zoomLevels\\\" [value]=\\\"zoomLevel.value\\\"\\r\\n                    [ngStyle]=\\\"{'font-size.px': zoomLevel.style}\\\">\\r\\n                    <ion-label>\\r\\n                        {{ 'core.settings.fontsizecharacter' | translate }}\\r\\n                        <!-- Empty element styled with the largest font size, so all buttons share a common baseline. -->\\r\\n                        <span [ngStyle]=\\\"{'font-size.px': zoomLevels[zoomLevels.length - 1].style}\\\"></span>\\r\\n                    </ion-label>\\r\\n                </ion-segment-button>\\r\\n            </ion-segment>\\r\\n        </ion-item>\\r\\n        <ion-item class=\\\"ion-text-wrap core-settings-general-color-scheme\\\" *ngIf=\\\"colorSchemes.length > 0\\\" lines=\\\"none\\\">\\r\\n            <ion-label>\\r\\n                <h2>{{ 'core.settings.colorscheme' | translate }}</h2>\\r\\n                <p *ngIf=\\\"colorSchemeDisabled\\\" class=\\\"text-danger\\\">{{ 'core.settings.forcedsetting' | translate }}</p>\\r\\n            </ion-label>\\r\\n            <ion-select [(ngModel)]=\\\"selectedScheme\\\" (ionChange)=\\\"colorSchemeChanged()\\\" interface=\\\"action-sheet\\\"\\r\\n                [disabled]=\\\"colorSchemeDisabled\\\" [interfaceOptions]=\\\"{header: 'core.settings.colorscheme' | translate}\\\">\\r\\n                <ion-select-option *ngFor=\\\"let scheme of colorSchemes\\\" [value]=\\\"scheme\\\">\\r\\n                    {{ 'core.settings.colorscheme-' + scheme | translate }}</ion-select-option>\\r\\n            </ion-select>\\r\\n        </ion-item>\\r\\n        <ion-item text-wrap *ngIf=\\\"colorSchemes.length > 0 && selectedScheme=='system' && isAndroid\\\" lines=\\\"none\\\">\\r\\n            <ion-label>\\r\\n                <p>{{ 'core.settings.colorscheme-system-notice' | translate }}</p>\\r\\n            </ion-label>\\r\\n        </ion-item>\\r\\n        <ion-item class=\\\"ion-text-wrap\\\">\\r\\n            <ion-label>\\r\\n                <h2>{{ 'core.settings.enablerichtexteditor' | translate }}</h2>\\r\\n                <p>{{ 'core.settings.enablerichtexteditordescription' | translate }}</p>\\r\\n            </ion-label>\\r\\n            <ion-toggle [(ngModel)]=\\\"richTextEditor\\\" (ionChange)=\\\"richTextEditorChanged()\\\"></ion-toggle>\\r\\n        </ion-item>\\r\\n        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"displayIframeHelp\\\">\\r\\n            <ion-label>\\r\\n                <h2>{{ 'core.settings.ioscookies' | translate }}</h2>\\r\\n                <p>{{ 'core.settings.ioscookiesdescription' | translate }}</p>\\r\\n                <ion-button expand=\\\"block\\\" (click)=\\\"openNativeSettings()\\\">\\r\\n                    {{ 'core.opensettings' | translate }}\\r\\n                </ion-button>\\r\\n            </ion-label>\\r\\n        </ion-item>\\r\\n        <ion-item class=\\\"ion-text-wrap\\\">\\r\\n            <ion-label>\\r\\n                <h2>{{ 'core.settings.debugdisplay' | translate }}</h2>\\r\\n                <p>{{ 'core.settings.debugdisplaydescription' | translate }}</p>\\r\\n            </ion-label>\\r\\n            <ion-toggle [(ngModel)]=\\\"debugDisplay\\\" (ionChange)=\\\"debugDisplayChanged()\\\"></ion-toggle>\\r\\n        </ion-item>\\r\\n        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"analyticsSupported\\\">\\r\\n            <ion-label>\\r\\n                <h2>{{ 'core.settings.enablefirebaseanalytics' | translate }}</h2>\\r\\n                <p>{{ 'core.settings.enablefirebaseanalyticsdescription' | translate }}</p>\\r\\n            </ion-label>\\r\\n            <ion-toggle [(ngModel)]=\\\"analyticsEnabled\\\" (ionChange)=\\\"analyticsEnabledChanged()\\\"></ion-toggle>\\r\\n        </ion-item>\\r\\n    </ion-list>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreSettingsGeneralPage } from './general';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreSettingsGeneralPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        CoreSettingsGeneralPage,\r\n    ],\r\n    exports: [RouterModule],\r\n\r\n})\r\nexport class CoreSettingsGeneralPageModule {}\r\n","export default \":host .core-settings-general-font-size ion-segment {\\n  max-width: 250px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb3JlL2ZlYXR1cmVzL3NldHRpbmdzL3BhZ2VzL2dlbmVyYWwvZ2VuZXJhbC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksZ0JBQUE7QUFBUiIsImZpbGUiOiJzcmMvY29yZS9mZWF0dXJlcy9zZXR0aW5ncy9wYWdlcy9nZW5lcmFsL2dlbmVyYWwuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICAgIC5jb3JlLXNldHRpbmdzLWdlbmVyYWwtZm9udC1zaXplIGlvbi1zZWdtZW50IHtcclxuICAgICAgICBtYXgtd2lkdGg6IDI1MHB4O1xyXG4gICAgfVxyXG59XHJcbiJdfQ== */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component } from '@angular/core';\nimport { CoreConstants } from '@/core/constants';\nimport { CoreConfig } from '@services/config';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreLang } from '@services/lang';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CorePushNotifications } from '@features/pushnotifications/services/pushnotifications';\nimport { CoreSettingsHelper, CoreColorScheme, CoreZoomLevel } from '../../services/settings-helper';\nimport { CoreApp } from '@services/app';\nimport { CoreIframeUtils } from '@services/utils/iframe';\nimport { Diagnostic } from '@singletons';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Page that displays the general settings.\n */\n@Component({\n    selector: 'page-core-app-settings-general',\n    templateUrl: 'general.html',\n    styleUrls: ['general.scss'],\n})\nexport class CoreSettingsGeneralPage {\n\n    languages: { code: string; name: string }[] = [];\n    selectedLanguage = '';\n    zoomLevels: { value: CoreZoomLevel; style: number; selected: boolean }[] = [];\n    selectedZoomLevel = CoreZoomLevel.NORMAL;\n    richTextEditor = true;\n    debugDisplay = false;\n    analyticsSupported = false;\n    analyticsEnabled = false;\n    colorSchemes: CoreColorScheme[] = [];\n    selectedScheme: CoreColorScheme = CoreColorScheme.LIGHT;\n    colorSchemeDisabled = false;\n    isAndroid = false;\n    displayIframeHelp = false;\n\n    constructor() {\n        this.asyncInit();\n    }\n\n    /**\n     * Async part of the constructor.\n     */\n    protected async asyncInit(): Promise<void> {\n\n        // Get the supported languages.\n        const languages = CoreConstants.CONFIG.languages;\n        for (const code in languages) {\n            this.languages.push({\n                code: code,\n                name: languages[code],\n            });\n        }\n        // Sort them by name.\n        this.languages.sort((a, b) => a.name.localeCompare(b.name));\n        this.selectedLanguage = await CoreLang.getCurrentLanguage();\n\n        // Configure color schemes.\n        if (!CoreConstants.CONFIG.forceColorScheme) {\n            this.colorSchemeDisabled = CoreSettingsHelper.isColorSchemeDisabledInSite();\n\n            if (this.colorSchemeDisabled) {\n                this.colorSchemes.push(CoreColorScheme.LIGHT);\n                this.selectedScheme = this.colorSchemes[0];\n            } else {\n                this.isAndroid = CoreApp.isAndroid();\n                this.colorSchemes = CoreSettingsHelper.getAllowedColorSchemes();\n                this.selectedScheme = await CoreConfig.get(CoreConstants.SETTINGS_COLOR_SCHEME, CoreColorScheme.LIGHT);\n            }\n        }\n\n        this.selectedZoomLevel = await CoreSettingsHelper.getZoomLevel();\n\n        this.zoomLevels = Object.keys(CoreConstants.CONFIG.zoomlevels).map((value: CoreZoomLevel) =>\n            ({\n                value,\n                // Absolute pixel size based on 1.4rem body text when this size is selected.\n                style: Math.round(CoreConstants.CONFIG.zoomlevels[value] * 16 / 100),\n                selected: value === this.selectedZoomLevel,\n            }));\n\n        this.richTextEditor = await CoreConfig.get(CoreConstants.SETTINGS_RICH_TEXT_EDITOR, true);\n\n        this.debugDisplay = await CoreConfig.get(CoreConstants.SETTINGS_DEBUG_DISPLAY, false);\n\n        this.analyticsSupported = CoreConstants.CONFIG.enableanalytics;\n        if (this.analyticsSupported) {\n            this.analyticsEnabled = await CoreConfig.get(CoreConstants.SETTINGS_ANALYTICS_ENABLED, true);\n        }\n\n        this.displayIframeHelp = CoreIframeUtils.shouldDisplayHelp();\n    }\n\n    /**\n     * Called when a new language is selected.\n     */\n    languageChanged(): void {\n        CoreLang.changeCurrentLanguage(this.selectedLanguage).finally(async () => {\n            // Invalidate cache for all sites to get the content in the right language.\n            const sites = await CoreSites.getSitesInstances();\n            await CoreUtils.ignoreErrors(Promise.all(sites.map((site) => site.invalidateWsCache())));\n\n            CoreEvents.trigger(CoreEvents.LANGUAGE_CHANGED, this.selectedLanguage);\n        });\n    }\n\n    /**\n     * Called when a new zoom level is selected.\n     */\n    zoomLevelChanged(): void {\n        this.zoomLevels = this.zoomLevels.map((fontSize) => {\n            fontSize.selected = fontSize.value === this.selectedZoomLevel;\n\n            return fontSize;\n        });\n\n        CoreSettingsHelper.applyZoomLevel(this.selectedZoomLevel);\n        CoreConfig.set(CoreConstants.SETTINGS_ZOOM_LEVEL, this.selectedZoomLevel);\n    }\n\n    /**\n     * Called when a new color scheme is selected.\n     */\n    colorSchemeChanged(): void {\n        CoreSettingsHelper.setColorScheme(this.selectedScheme);\n        CoreConfig.set(CoreConstants.SETTINGS_COLOR_SCHEME, this.selectedScheme);\n    }\n\n    /**\n     * Called when the rich text editor is enabled or disabled.\n     */\n    richTextEditorChanged(): void {\n        CoreConfig.set(CoreConstants.SETTINGS_RICH_TEXT_EDITOR, this.richTextEditor ? 1 : 0);\n    }\n\n    /**\n     * Called when the debug display setting is enabled or disabled.\n     */\n    debugDisplayChanged(): void {\n        CoreConfig.set(CoreConstants.SETTINGS_DEBUG_DISPLAY, this.debugDisplay ? 1 : 0);\n        CoreDomUtils.setDebugDisplay(this.debugDisplay);\n    }\n\n    /**\n     * Called when the analytics setting is enabled or disabled.\n     */\n    async analyticsEnabledChanged(): Promise<void> {\n        await CorePushNotifications.enableAnalytics(this.analyticsEnabled);\n\n        CoreConfig.set(CoreConstants.SETTINGS_ANALYTICS_ENABLED, this.analyticsEnabled ? 1 : 0);\n    }\n\n    /**\n     * Open native settings.\n     */\n    openNativeSettings(): void {\n        Diagnostic.switchToSettings();\n    }\n\n}\n"],"sourceRoot":"webpack:///"}