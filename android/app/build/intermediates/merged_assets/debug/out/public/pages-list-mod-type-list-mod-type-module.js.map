{"version":3,"sources":["./src/core/features/course/pages/list-mod-type/list-mod-type.html","./src/core/features/course/pages/list-mod-type/list-mod-type.module.ts","./src/core/features/course/pages/list-mod-type/list-mod-type.page.ts"],"names":[],"mappings":"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","file":"pages-list-mod-type-list-mod-type-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ title }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <core-empty-box *ngIf=\\\"!sections || !sections.length\\\" icon=\\\"fas-box-open\\\" [message]=\\\"'core.course.nocontentavailable' | translate\\\">\\r\\n        </core-empty-box>\\r\\n\\r\\n        <ion-list class=\\\"core-course-module-list-wrapper\\\">\\r\\n            <ng-container *ngFor=\\\"let section of sections\\\">\\r\\n                <ng-container *ngFor=\\\"let module of section.modules\\\">\\r\\n                    <core-course-module *ngIf=\\\"module.visibleoncoursepage !== 0\\\" [module]=\\\"module\\\" [section]=\\\"section\\\">\\r\\n                    </core-course-module>\\r\\n                </ng-container>\\r\\n            </ng-container>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreCourseListModTypePage } from './list-mod-type.page';\r\nimport { CoreCourseComponentsModule } from '@features/course/components/components.module';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CoreCourseListModTypePage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CoreCourseListModTypePage,\r\n    ],\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreCourseComponentsModule,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class CoreCourseListModTypePageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseModuleDelegate } from '@features/course/services/module-delegate';\nimport { CoreCourseHelper, CoreCourseSection } from '@features/course/services/course-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreConstants } from '@/core/constants';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Page that displays all modules of a certain type in a course.\n */\n@Component({\n    selector: 'page-core-course-list-mod-type',\n    templateUrl: 'list-mod-type.html',\n})\nexport class CoreCourseListModTypePage implements OnInit {\n\n    sections: CoreCourseSection[] = [];\n    title = '';\n    loaded = false;\n    courseId?: number;\n\n    protected modName?: string;\n    protected archetypes: Record<string, number> = {}; // To speed up the check of modules.\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.title = CoreNavigator.getRouteParam('title') || '';\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId');\n        this.modName = CoreNavigator.getRouteParam('modName');\n\n        try {\n            await this.fetchData();\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Fetches the data.\n     *\n     * @return Resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        if (!this.courseId) {\n            return;\n        }\n\n        try {\n            // Get all the modules in the course.\n            let sections = await CoreCourse.getSections(this.courseId, false, true);\n\n            sections = sections.filter((section) => {\n                if (!section.modules) {\n                    return false;\n                }\n\n                section.modules = section.modules.filter((mod) => {\n                    if (!CoreCourseHelper.canUserViewModule(mod, section) || !CoreCourse.moduleHasView(mod)) {\n                        // Ignore this module.\n                        return false;\n                    }\n\n                    if (this.modName === 'resources') {\n                        // Check that the module is a resource.\n                        if (this.archetypes[mod.modname] === undefined) {\n                            this.archetypes[mod.modname] = CoreCourseModuleDelegate.supportsFeature<number>(\n                                mod.modname,\n                                CoreConstants.FEATURE_MOD_ARCHETYPE,\n                                CoreConstants.MOD_ARCHETYPE_OTHER,\n                            );\n                        }\n\n                        if (this.archetypes[mod.modname] == CoreConstants.MOD_ARCHETYPE_RESOURCE) {\n                            return true;\n                        }\n\n                    } else if (mod.modname == this.modName) {\n                        return true;\n                    }\n                });\n\n                return section.modules.length > 0;\n            });\n\n            const result = await CoreCourseHelper.addHandlerDataForModules(sections, this.courseId);\n\n            this.sections = result.sections;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting data');\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    async refreshData(refresher: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(CoreCourse.invalidateSections(this.courseId || 0));\n\n        try {\n            await this.fetchData();\n        } finally {\n            refresher.complete();\n        }\n    }\n\n}\n"],"sourceRoot":"webpack:///"}