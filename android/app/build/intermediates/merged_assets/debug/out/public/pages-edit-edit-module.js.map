{"version":3,"sources":["./src/addons/mod/glossary/pages/edit/edit.html","./src/addons/mod/glossary/pages/edit/edit.module.ts","./src/addons/mod/glossary/pages/edit/edit.ts","./src/core/classes/items-management/swipe-navigation-items-manager.ts"],"names":[],"mappings":"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","file":"pages-edit-edit-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1 *ngIf=\\\"glossary\\\">\\r\\n                <core-format-text [text]=\\\"glossary.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\r\\n                </core-format-text>\\r\\n            </h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [core-swipe-navigation]=\\\"entries\\\">\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <form #editFormEl *ngIf=\\\"glossary\\\">\\r\\n            <ion-item>\\r\\n                <ion-label position=\\\"stacked\\\">{{ 'addon.mod_glossary.concept' | translate }}</ion-label>\\r\\n                <ion-input type=\\\"text\\\" [placeholder]=\\\"'addon.mod_glossary.concept' | translate\\\" [(ngModel)]=\\\"entry.concept\\\" name=\\\"concept\\\">\\r\\n                </ion-input>\\r\\n            </ion-item>\\r\\n            <ion-item>\\r\\n                <ion-label position=\\\"stacked\\\">{{ 'addon.mod_glossary.definition' | translate }}</ion-label>\\r\\n                <core-rich-text-editor [control]=\\\"definitionControl\\\" (contentChanged)=\\\"onDefinitionChange($event)\\\"\\r\\n                    [placeholder]=\\\"'addon.mod_glossary.definition' | translate\\\" name=\\\"addon_mod_glossary_edit\\\" [component]=\\\"component\\\"\\r\\n                    [componentId]=\\\"cmId\\\" [autoSave]=\\\"true\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" elementId=\\\"definition_editor\\\"\\r\\n                    [draftExtraParams]=\\\"editorExtraParams\\\">\\r\\n                </core-rich-text-editor>\\r\\n            </ion-item>\\r\\n            <ion-item *ngIf=\\\"categories.length > 0\\\">\\r\\n                <ion-label position=\\\"stacked\\\" id=\\\"addon-mod-glossary-categories-label\\\">\\r\\n                    {{ 'addon.mod_glossary.categories' | translate }}\\r\\n                </ion-label>\\r\\n                <ion-select [(ngModel)]=\\\"options.categories\\\" multiple=\\\"true\\\" aria-labelledby=\\\"addon-mod-glossary-categories-label\\\"\\r\\n                    interface=\\\"action-sheet\\\" [placeholder]=\\\"'addon.mod_glossary.categories' | translate\\\" name=\\\"categories\\\"\\r\\n                    [interfaceOptions]=\\\"{header: 'addon.mod_glossary.categories' | translate}\\\">\\r\\n                    <ion-select-option *ngFor=\\\"let category of categories\\\" [value]=\\\"category.id\\\">\\r\\n                        {{ category.name }}\\r\\n                    </ion-select-option>\\r\\n                </ion-select>\\r\\n            </ion-item>\\r\\n            <ion-item>\\r\\n                <ion-label position=\\\"stacked\\\" id=\\\"addon-mod-glossary-aliases-label\\\">\\r\\n                    {{ 'addon.mod_glossary.aliases' | translate }}\\r\\n                </ion-label>\\r\\n                <ion-textarea [(ngModel)]=\\\"options.aliases\\\" rows=\\\"1\\\" [core-auto-rows]=\\\"options.aliases\\\"\\r\\n                    aria-labelledby=\\\"addon-mod-glossary-aliases-label\\\" name=\\\"aliases\\\">\\r\\n                </ion-textarea>\\r\\n            </ion-item>\\r\\n            <ion-item-divider>\\r\\n                <ion-label>\\r\\n                    <h2>{{ 'addon.mod_glossary.attachment' | translate }}</h2>\\r\\n                </ion-label>\\r\\n            </ion-item-divider>\\r\\n            <core-attachments [files]=\\\"attachments\\\" [component]=\\\"component\\\" [componentId]=\\\"glossary.coursemodule\\\" [allowOffline]=\\\"true\\\"\\r\\n                [courseId]=\\\"courseId\\\">\\r\\n            </core-attachments>\\r\\n            <ng-container *ngIf=\\\"glossary.usedynalink\\\">\\r\\n                <ion-item-divider>\\r\\n                    <ion-label>\\r\\n                        <h2>{{ 'addon.mod_glossary.linking' | translate }}</h2>\\r\\n                    </ion-label>\\r\\n                </ion-item-divider>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.entryusedynalink' | translate }}</ion-label>\\r\\n                    <ion-toggle [(ngModel)]=\\\"options.usedynalink\\\" name=\\\"usedynalink\\\"></ion-toggle>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.casesensitive' | translate }}</ion-label>\\r\\n                    <ion-toggle [disabled]=\\\"!options.usedynalink\\\" [(ngModel)]=\\\"options.casesensitive\\\" name=\\\"casesensitive\\\">\\r\\n                    </ion-toggle>\\r\\n                </ion-item>\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <ion-label>{{ 'addon.mod_glossary.fullmatch' | translate }}</ion-label>\\r\\n                    <ion-toggle [disabled]=\\\"!options.usedynalink\\\" [(ngModel)]=\\\"options.fullmatch\\\" name=\\\"fullmatch\\\"></ion-toggle>\\r\\n                </ion-item>\\r\\n            </ng-container>\\r\\n            <ion-button class=\\\"ion-margin\\\" expand=\\\"block\\\" [disabled]=\\\"!entry.concept || !entry.definition\\\" (click)=\\\"save()\\\">\\r\\n                {{ 'core.save' | translate }}\\r\\n            </ion-button>\\r\\n        </form>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { AddonModGlossaryEditPage } from './edit';\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { CoreEditorComponentsModule } from '@features/editor/components/components.module';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CanLeaveGuard } from '@guards/can-leave';\r\n\r\nconst routes: Routes = [{\r\n    path: '',\r\n    component: AddonModGlossaryEditPage,\r\n    canDeactivate: [CanLeaveGuard],\r\n}];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AddonModGlossaryEditPage,\r\n    ],\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n        CoreEditorComponentsModule,\r\n    ],\r\n})\r\nexport class AddonModGlossaryEditPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild, ElementRef, Optional, OnDestroy } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreFileUploader, CoreFileUploaderStoreFilesResult } from '@features/fileuploader/services/fileuploader';\nimport { CanLeave } from '@guards/can-leave';\nimport { FileEntry } from '@ionic-native/file/ngx';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreForms } from '@singletons/form';\nimport { AddonModGlossaryEntriesSource } from '../../classes/glossary-entries-source';\nimport { AddonModGlossaryEntriesSwipeManager } from '../../classes/glossary-entries-swipe-manager';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryCategory,\n    AddonModGlossaryEntryOption,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryNewEntry,\n    AddonModGlossaryNewEntryWithFiles,\n    AddonModGlossaryProvider,\n} from '../../services/glossary';\nimport { AddonModGlossaryHelper } from '../../services/glossary-helper';\nimport { AddonModGlossaryOffline } from '../../services/glossary-offline';\n\n/**\n * Page that displays the edit form.\n */\n@Component({\n    selector: 'page-addon-mod-glossary-edit',\n    templateUrl: 'edit.html',\n})\nexport class AddonModGlossaryEditPage implements OnInit, OnDestroy, CanLeave {\n\n    @ViewChild('editFormEl') formElement?: ElementRef;\n\n    component = AddonModGlossaryProvider.COMPONENT;\n    cmId!: number;\n    courseId!: number;\n    loaded = false;\n    glossary?: AddonModGlossaryGlossary;\n    attachments: FileEntry[] = [];\n    definitionControl = new FormControl();\n    categories: AddonModGlossaryCategory[] = [];\n    editorExtraParams: Record<string, unknown> = {};\n    entry: AddonModGlossaryNewEntry = {\n        concept: '',\n        definition: '',\n        timecreated: 0,\n    };\n\n    entries?: AddonModGlossaryEditEntriesSwipeManager;\n\n    options = {\n        categories: <string[]> [],\n        aliases: '',\n        usedynalink: false,\n        casesensitive: false,\n        fullmatch: false,\n    };\n\n    protected timecreated!: number;\n    protected concept = '';\n    protected syncId?: string;\n    protected syncObserver?: CoreEventObserver;\n    protected isDestroyed = false;\n    protected originalData?: AddonModGlossaryNewEntryWithFiles;\n    protected saved = false;\n\n    constructor(protected route: ActivatedRoute, @Optional() protected splitView: CoreSplitViewComponent) {}\n\n    /**\n     * Component being initialized.\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            const routeData = this.route.snapshot.data;\n            this.cmId = CoreNavigator.getRequiredRouteNumberParam('cmId');\n            this.courseId = CoreNavigator.getRequiredRouteNumberParam('courseId');\n            this.timecreated = CoreNavigator.getRequiredRouteNumberParam('timecreated');\n            this.concept = CoreNavigator.getRouteParam<string>('concept') || '';\n            this.editorExtraParams.timecreated = this.timecreated;\n\n            if (this.timecreated !== 0 && (routeData.swipeEnabled ?? true)) {\n                const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n                    AddonModGlossaryEntriesSource,\n                    [this.courseId, this.cmId, routeData.glossaryPathPrefix ?? ''],\n                );\n\n                this.entries = new AddonModGlossaryEditEntriesSwipeManager(source);\n\n                await this.entries.start();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            this.goBack();\n\n            return;\n        }\n\n        this.fetchData();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.entries?.destroy();\n    }\n\n    /**\n     * Fetch required data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.glossary = await AddonModGlossary.getGlossary(this.courseId, this.cmId);\n\n            if (this.timecreated > 0) {\n                await this.loadOfflineData();\n            }\n\n            this.categories = await AddonModGlossary.getAllCategories(this.glossary.id, {\n                cmId: this.cmId,\n            });\n\n            this.loaded = true;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingglossary', true);\n\n            this.goBack();\n        }\n    }\n\n    /**\n     * Load offline data when editing an offline entry.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async loadOfflineData(): Promise<void> {\n        if (!this.glossary) {\n            return;\n        }\n\n        const entry = await AddonModGlossaryOffline.getNewEntry(this.glossary.id, this.concept, this.timecreated);\n\n        this.entry.concept = entry.concept || '';\n        this.entry.definition = entry.definition || '';\n        this.entry.timecreated = entry.timecreated;\n\n        this.originalData = {\n            concept: this.entry.concept,\n            definition: this.entry.definition,\n            files: [],\n            timecreated: entry.timecreated,\n        };\n\n        if (entry.options) {\n            this.options.categories = (entry.options.categories && (<string> entry.options.categories).split(',')) || [];\n            this.options.aliases = <string> entry.options.aliases || '';\n            this.options.usedynalink = !!entry.options.usedynalink;\n            if (this.options.usedynalink) {\n                this.options.casesensitive = !!entry.options.casesensitive;\n                this.options.fullmatch = !!entry.options.fullmatch;\n            }\n        }\n\n        // Treat offline attachments if any.\n        if (entry.attachments?.offline) {\n            this.attachments = await AddonModGlossaryHelper.getStoredFiles(this.glossary.id, entry.concept, entry.timecreated);\n\n            this.originalData.files = this.attachments.slice();\n        }\n\n        this.definitionControl.setValue(this.entry.definition);\n    }\n\n    /**\n     * Reset the form data.\n     */\n    protected resetForm(): void {\n        this.entry.concept = '';\n        this.entry.definition = '';\n        this.entry.timecreated = 0;\n        this.originalData = undefined;\n\n        this.options.categories = [];\n        this.options.aliases = '';\n        this.options.usedynalink = false;\n        this.options.casesensitive = false;\n        this.options.fullmatch = false;\n        this.attachments.length = 0; // Empty the array.\n\n        this.definitionControl.setValue('');\n    }\n\n    /**\n     * Definition changed.\n     *\n     * @param text The new text.\n     */\n    onDefinitionChange(text: string): void {\n        this.entry.definition = text;\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @return Resolved if we can leave it, rejected if not.\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.saved) {\n            return true;\n        }\n\n        if (AddonModGlossaryHelper.hasEntryDataChanged(this.entry, this.attachments, this.originalData)) {\n            // Show confirmation if some data has been modified.\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n        }\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(this.attachments);\n\n        CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n        return true;\n    }\n\n    /**\n     * Save the entry.\n     */\n    async save(): Promise<void> {\n        let definition = this.entry.definition;\n        let entryId: number | undefined;\n        const timecreated = this.entry.timecreated || Date.now();\n\n        if (!this.entry.concept || !definition) {\n            CoreDomUtils.showErrorModal('addon.mod_glossary.fillfields', true);\n\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n        definition = CoreTextUtils.formatHtmlLines(definition);\n\n        try {\n            if (!this.glossary) {\n                return;\n            }\n\n            // Upload attachments first if any.\n            const { saveOffline, attachmentsResult } = await this.uploadAttachments(timecreated);\n\n            const options: Record<string, AddonModGlossaryEntryOption> = {\n                aliases: this.options.aliases,\n                categories: this.options.categories.join(','),\n            };\n\n            if (this.glossary.usedynalink) {\n                options.usedynalink = this.options.usedynalink ? 1 : 0;\n                if (this.options.usedynalink) {\n                    options.casesensitive = this.options.casesensitive ? 1 : 0;\n                    options.fullmatch = this.options.fullmatch ? 1 : 0;\n                }\n            }\n\n            if (saveOffline) {\n                if (this.entry && !this.glossary.allowduplicatedentries) {\n                    // Check if the entry is duplicated in online or offline mode.\n                    const isUsed = await AddonModGlossary.isConceptUsed(this.glossary.id, this.entry.concept, {\n                        timeCreated: this.entry.timecreated,\n                        cmId: this.cmId,\n                    });\n\n                    if (isUsed) {\n                        // There's a entry with same name, reject with error message.\n                        throw new CoreError(Translate.instant('addon.mod_glossary.errconceptalreadyexists'));\n                    }\n                }\n\n                // Save entry in offline.\n                await AddonModGlossaryOffline.addNewEntry(\n                    this.glossary.id,\n                    this.entry.concept,\n                    definition,\n                    this.courseId,\n                    options,\n                    <CoreFileUploaderStoreFilesResult> attachmentsResult,\n                    timecreated,\n                    undefined,\n                    undefined,\n                    this.entry,\n                );\n            } else {\n                // Try to send it to server.\n                // Don't allow offline if there are attachments since they were uploaded fine.\n                await AddonModGlossary.addEntry(\n                    this.glossary.id,\n                    this.entry.concept,\n                    definition,\n                    this.courseId,\n                    options,\n                    attachmentsResult,\n                    {\n                        timeCreated: timecreated,\n                        discardEntry: this.entry,\n                        allowOffline: !this.attachments.length,\n                        checkDuplicates: !this.glossary.allowduplicatedentries,\n                    },\n                );\n            }\n\n            // Delete the local files from the tmp folder.\n            CoreFileUploader.clearTmpFiles(this.attachments);\n\n            if (entryId) {\n                // Data sent to server, delete stored files (if any).\n                AddonModGlossaryHelper.deleteStoredFiles(this.glossary.id, this.entry.concept, timecreated);\n                CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'glossary' });\n            }\n\n            CoreEvents.trigger(AddonModGlossaryProvider.ADD_ENTRY_EVENT, {\n                glossaryId: this.glossary.id,\n                entryId: entryId,\n            }, CoreSites.getCurrentSiteId());\n\n            CoreForms.triggerFormSubmittedEvent(this.formElement, !!entryId, CoreSites.getCurrentSiteId());\n\n            if (this.splitView?.outletActivated) {\n                if (this.timecreated > 0) {\n                    // Reload the data.\n                    await this.loadOfflineData();\n                } else {\n                    // Empty form.\n                    this.resetForm();\n                }\n            } else {\n                this.saved = true;\n                CoreNavigator.back();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.cannoteditentry', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Upload entry attachments if any.\n     *\n     * @param timecreated Entry's timecreated.\n     * @return Promise resolved when done.\n     */\n    protected async uploadAttachments(\n        timecreated: number,\n    ): Promise<{saveOffline: boolean; attachmentsResult?: number | CoreFileUploaderStoreFilesResult}> {\n        if (!this.attachments.length || !this.glossary) {\n            return {\n                saveOffline: false,\n            };\n        }\n\n        try {\n            const attachmentsResult = await CoreFileUploader.uploadOrReuploadFiles(\n                this.attachments,\n                AddonModGlossaryProvider.COMPONENT,\n                this.glossary.id,\n            );\n\n            return {\n                saveOffline: false,\n                attachmentsResult,\n            };\n        } catch (error) {\n            if (CoreUtils.isWebServiceError(error)) {\n                throw error;\n            }\n\n            // Cannot upload them in online, save them in offline.\n            const attachmentsResult = await AddonModGlossaryHelper.storeFiles(\n                this.glossary.id,\n                this.entry.concept,\n                timecreated,\n                this.attachments,\n            );\n\n            return {\n                saveOffline: true,\n                attachmentsResult,\n            };\n        }\n    }\n\n    /**\n     * Helper function to go back.\n     */\n    protected goBack(): void {\n        if (this.splitView?.outletActivated) {\n            CoreNavigator.navigate('../../');\n        } else {\n            CoreNavigator.back();\n        }\n    }\n\n}\n\n/**\n * Helper to manage swiping within a collection of glossary entries.\n */\nclass AddonModGlossaryEditEntriesSwipeManager extends AddonModGlossaryEntriesSwipeManager {\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        return `${this.getSource().GLOSSARY_PATH_PREFIX}edit/${route.params.timecreated}`;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\n\nimport { CoreNavigator } from '@services/navigator';\n\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\n\n/**\n * Helper class to manage the state and routing of a swipeable page.\n */\nexport class CoreSwipeNavigationItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>\n>\n    extends CoreRoutedItemsManager<Item, Source> {\n\n    /**\n     * Process page started operations.\n     */\n    async start(): Promise<void> {\n        this.updateSelectedItem();\n    }\n\n    /**\n     * Navigate to the next item.\n     */\n    async navigateToNextItem(): Promise<void> {\n        await this.navigateToItemBy(1, 'forward');\n    }\n\n    /**\n     * Navigate to the previous item.\n     */\n    async navigateToPreviousItem(): Promise<void> {\n        await this.navigateToItemBy(-1, 'back');\n    }\n\n    /**\n     * Has a next item.\n     */\n    async hasNextItem(): Promise<boolean> {\n        const item = await this.getItemBy(1);\n\n        return !!item;\n    }\n\n    /**\n     * Has a previous item.\n     */\n    async hasPreviousItem(): Promise<boolean> {\n        const item = await this.getItemBy(-1);\n\n        return !!item;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getCurrentPageRoute(): ActivatedRoute | null {\n        return CoreNavigator.getCurrentRoute();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        const segments: UrlSegment[] = [];\n\n        while (route) {\n            segments.push(...route.url);\n\n            if (!route.firstChild) {\n                break;\n            }\n\n            route = route.firstChild;\n        }\n\n        return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n    }\n\n    /**\n     * Navigate to an item by an offset.\n     *\n     * @param delta Index offset.\n     * @param animationDirection Animation direction.\n     */\n    protected async navigateToItemBy(delta: number, animationDirection: 'forward' | 'back'): Promise<void> {\n        const item = await this.getItemBy(delta);\n\n        if (!item) {\n            return;\n        }\n\n        await this.navigateToItem(item, { animationDirection, replace: true });\n    }\n\n    /**\n     * Get item by an offset.\n     *\n     * @param delta Index offset.\n     */\n    protected async getItemBy(delta: number): Promise<Item | null> {\n        const items = this.getSource().getItems();\n        const selectedIndex = (this.selectedItem && items?.indexOf(this.selectedItem)) ?? -1;\n\n        if (selectedIndex === -1 || items === null) {\n            return null;\n        }\n\n        const deltaStep = delta > 0 ? 1 : -1;\n        let nextIndex = selectedIndex;\n        let deltaMoved = 0;\n\n        while (deltaMoved !== delta) {\n            nextIndex += deltaStep;\n\n            if (nextIndex < 0 || nextIndex >= items.length) {\n                break;\n            }\n\n            if (this.skipItemInSwipe(items[nextIndex])) {\n                continue;\n            }\n\n            deltaMoved += deltaStep;\n        }\n\n        if (deltaMoved === delta) {\n            return items[nextIndex];\n        }\n\n        if (!this.getSource().isCompleted()) {\n            await this.getSource().load();\n\n            return this.getItemBy(delta);\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if an item should be skipped during swipe navigation.\n     *\n     * @param item Item.\n     * @returns Whether to skip this item during swipe navigation.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected skipItemInSwipe(item: Item): boolean {\n        return false;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}