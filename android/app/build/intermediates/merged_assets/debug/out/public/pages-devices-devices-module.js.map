{"version":3,"sources":["./src/addons/messageoutput/airnotifier/pages/devices/devices.html","./src/addons/messageoutput/airnotifier/pages/devices/devices.module.ts","./src/addons/messageoutput/airnotifier/pages/devices/devices.ts"],"names":[],"mappings":"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","file":"pages-devices-devices-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messageoutput_airnotifier.processorsettingsdesc' | translate }}</h1>\\r\\n        </ion-title>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!devicesLoaded\\\" (ionRefresh)=\\\"refreshDevices($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"devicesLoaded\\\">\\r\\n        <ion-list>\\r\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let device of devices\\\" [class.item-current]=\\\"device.current\\\">\\r\\n                <ion-label [class.core-bold]=\\\"device.current\\\">\\r\\n                    <p class=\\\"item-heading\\\">\\r\\n                        {{ device.name }} {{ device.model }}\\r\\n                        <span *ngIf=\\\"device.current\\\">({{ 'core.currentdevice' | translate }})</span>\\r\\n                    </p>\\r\\n                    <p>{{ device.platform }} {{ device.version }}</p>\\r\\n                </ion-label>\\r\\n                <core-button-with-spinner [loading]=\\\"device.updating\\\" slot=\\\"end\\\">\\r\\n                    <ion-toggle [(ngModel)]=\\\"device.enable\\\" (ngModelChange)=\\\"enableDevice(device, device.enable)\\\">\\r\\n                    </ion-toggle>\\r\\n                </core-button-with-spinner>\\r\\n            </ion-item>\\r\\n        </ion-list>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\nimport { AddonMessageOutputAirnotifierDevicesPage } from './devices';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonMessageOutputAirnotifierDevicesPage,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        AddonMessageOutputAirnotifierDevicesPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonMessageOutputAirnotifierDevicesPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { IonRefresher } from '@ionic/angular';\r\n\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { CorePushNotifications } from '@features/pushnotifications/services/pushnotifications';\r\nimport { AddonMessageOutputAirnotifier, AddonMessageOutputAirnotifierDevice } from '../../services/airnotifier';\r\nimport { CoreUtils } from '@services/utils/utils';\r\n\r\n/**\r\n * Page that displays the list of devices.\r\n */\r\n@Component({\r\n    selector: 'page-addon-message-output-airnotifier-devices',\r\n    templateUrl: 'devices.html',\r\n})\r\nexport class AddonMessageOutputAirnotifierDevicesPage implements OnInit, OnDestroy {\r\n\r\n    devices?: AddonMessageOutputAirnotifierDeviceFormatted[] = [];\r\n    devicesLoaded = false;\r\n\r\n    protected updateTimeout?: number;\r\n\r\n    /**\r\n     * Component being initialized.\r\n     */\r\n    ngOnInit(): void {\r\n        this.fetchDevices();\r\n    }\r\n\r\n    /**\r\n     * Fetches the list of devices.\r\n     *\r\n     * @return Promise resolved when done.\r\n     */\r\n    protected async fetchDevices(): Promise<void> {\r\n        try {\r\n            const devices = await AddonMessageOutputAirnotifier.getUserDevices();\r\n\r\n            this.devices = this.formatDevices(devices);\r\n        } catch (error) {\r\n            CoreDomUtils.showErrorModal(error);\r\n        } finally {\r\n            this.devicesLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add some calculated data for devices.\r\n     *\r\n     * @param devices Devices to format.\r\n     * @return Formatted devices.\r\n     */\r\n    protected formatDevices(devices: AddonMessageOutputAirnotifierDevice[]): AddonMessageOutputAirnotifierDeviceFormatted[] {\r\n        const formattedDevices: AddonMessageOutputAirnotifierDeviceFormatted[] = devices;\r\n        const pushId = CorePushNotifications.getPushId();\r\n\r\n        // Convert enabled to boolean and search current device.\r\n        formattedDevices.forEach((device) => {\r\n            device.enable = !!device.enable;\r\n            device.current = !!(pushId && pushId == device.pushid);\r\n        });\r\n\r\n        return formattedDevices.sort((a, b) => {\r\n            const compareA = a.name.toLowerCase();\r\n            const compareB = b.name.toLowerCase();\r\n\r\n            return compareA.localeCompare(compareB);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update list of devices after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\r\n     */\r\n    protected updateDevicesAfterDelay(): void {\r\n        // Cancel pending updates.\r\n        if (this.updateTimeout) {\r\n            clearTimeout(this.updateTimeout);\r\n        }\r\n\r\n        this.updateTimeout = window.setTimeout(() => {\r\n            this.updateTimeout = undefined;\r\n            this.updateDevices();\r\n        }, 5000);\r\n    }\r\n\r\n    /**\r\n     * Fetch devices. The purpose is to store the updated data, it won't be reflected in the view.\r\n     */\r\n    protected async updateDevices(): Promise<void> {\r\n        await CoreUtils.ignoreErrors(AddonMessageOutputAirnotifier.invalidateUserDevices());\r\n\r\n        await AddonMessageOutputAirnotifier.getUserDevices();\r\n    }\r\n\r\n    /**\r\n     * Refresh the list of devices.\r\n     *\r\n     * @param refresher Refresher.\r\n     */\r\n    async refreshDevices(refresher: IonRefresher): Promise<void> {\r\n        try {\r\n            await CoreUtils.ignoreErrors(AddonMessageOutputAirnotifier.invalidateUserDevices());\r\n\r\n            await this.fetchDevices();\r\n        } finally {\r\n            refresher?.complete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable or disable a certain device.\r\n     *\r\n     * @param device The device object.\r\n     * @param enable True to enable the device, false to disable it.\r\n     */\r\n    async enableDevice(device: AddonMessageOutputAirnotifierDeviceFormatted, enable: boolean): Promise<void> {\r\n        device.updating = true;\r\n\r\n        try {\r\n            await AddonMessageOutputAirnotifier.enableDevice(device.id, enable);\r\n\r\n            // Update the list of devices since it was modified.\r\n            this.updateDevicesAfterDelay();\r\n        } catch (error) {\r\n            // Show error and revert change.\r\n            CoreDomUtils.showErrorModal(error);\r\n            device.enable = !device.enable;\r\n        } finally {\r\n            device.updating = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        // If there is a pending action to update devices, execute it right now.\r\n        if (this.updateTimeout) {\r\n            clearTimeout(this.updateTimeout);\r\n            this.updateDevices();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * User device with some calculated data.\r\n */\r\ntype AddonMessageOutputAirnotifierDeviceFormatted = AddonMessageOutputAirnotifierDevice & {\r\n    current?: boolean; // Calculated in the app. Whether it's the current device.\r\n    updating?: boolean; // Calculated in the app. Whether the device enable is being updated right now.\r\n};\r\n"],"sourceRoot":"webpack:///"}