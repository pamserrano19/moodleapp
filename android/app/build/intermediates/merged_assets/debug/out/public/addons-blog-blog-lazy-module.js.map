{"version":3,"sources":["./src/addons/blog/pages/entries/entries.html","./src/addons/blog/blog-lazy.module.ts","./src/addons/blog/pages/entries/entries.ts"],"names":[],"mappings":"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","file":"addons-blog-blog-lazy-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ title | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <core-user-menu-button></core-user-menu-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content class=\\\"limited-width\\\">\\r\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refresh($event.target)\\\">\\r\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n    </ion-refresher>\\r\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\r\\n        <ion-item *ngIf=\\\"showMyEntriesToggle\\\">\\r\\n            <ion-label>{{ 'addon.blog.showonlyyourentries' | translate }}</ion-label>\\r\\n            <ion-toggle [(ngModel)]=\\\"onlyMyEntries\\\" (ionChange)=\\\"onlyMyEntriesToggleChanged(onlyMyEntries)\\\"></ion-toggle>\\r\\n        </ion-item>\\r\\n        <core-empty-box *ngIf=\\\"entries && entries.length == 0\\\" icon=\\\"far-newspaper\\\" [message]=\\\"'addon.blog.noentriesyet' | translate\\\">\\r\\n        </core-empty-box>\\r\\n        <ng-container *ngFor=\\\"let entry of entries\\\">\\r\\n            <ion-card *ngIf=\\\"!onlyMyEntries || entry.userid == currentUserId\\\">\\r\\n                <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                    <core-user-avatar [user]=\\\"entry.user\\\" slot=\\\"start\\\" [courseId]=\\\"entry.courseid\\\"></core-user-avatar>\\r\\n                    <ion-label>\\r\\n                        <p class=\\\"item-heading\\\">\\r\\n                            <core-format-text [text]=\\\"entry.subject\\\" [contextLevel]=\\\"contextLevel\\\" [contextInstanceId]=\\\"contextInstanceId\\\">\\r\\n                            </core-format-text>\\r\\n                            <ion-note class=\\\"ion-float-end ion-padding-start ion-text-end\\\">\\r\\n                                {{ 'addon.blog.' + entry.publishTranslated! | translate}}\\r\\n                            </ion-note>\\r\\n                        </p>\\r\\n                        <p>\\r\\n                            <ion-note class=\\\"ion-float-end ion-text-end\\\">\\r\\n                                {{entry.created | coreDateDayOrTime}}\\r\\n                            </ion-note>\\r\\n                            {{entry.user && entry.user!.fullname}}\\r\\n                        </p>\\r\\n                    </ion-label>\\r\\n                </ion-item>\\r\\n                <ion-card-content>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\">\\r\\n                        <ion-label>\\r\\n                            <core-format-text [text]=\\\"entry.summary\\\" [component]=\\\"this.component\\\" [componentId]=\\\"entry.id\\\"\\r\\n                                [contextLevel]=\\\"contextLevel\\\" [contextInstanceId]=\\\"contextInstanceId\\\">\\r\\n                            </core-format-text>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"tagsEnabled && entry.tags && entry.tags!.length > 0\\\">\\r\\n                        <ion-label>\\r\\n                            <div slot=\\\"start\\\">{{ 'core.tag.tags' | translate }}:</div>\\r\\n                            <core-tag-list [tags]=\\\"entry.tags\\\"></core-tag-list>\\r\\n                        </ion-label>\\r\\n                    </ion-item>\\r\\n                    <core-comments *ngIf=\\\"commentsEnabled\\\" [component]=\\\"this.component\\\" [itemId]=\\\"entry.id\\\" area=\\\"format_blog\\\"\\r\\n                        [instanceId]=\\\"entry.userid\\\" contextLevel=\\\"user\\\" [showItem]=\\\"true\\\">\\r\\n                    </core-comments>\\r\\n                    <core-file *ngFor=\\\"let file of entry.attachmentfiles\\\" [file]=\\\"file\\\" [component]=\\\"this.component\\\"\\r\\n                        [componentId]=\\\"entry.id\\\">\\r\\n                    </core-file>\\r\\n                    <ion-item *ngIf=\\\"entry.uniquehash\\\" [href]=\\\"entry.uniquehash\\\" core-link detail=\\\"true\\\">\\r\\n                        <ion-label>{{ 'addon.blog.linktooriginalentry' | translate }}</ion-label>\\r\\n                    </ion-item>\\r\\n                </ion-card-content>\\r\\n                <div class=\\\"ion-text-center ion-margin-bottom\\\" *ngIf=\\\"entry.lastmodified > entry.created\\\">\\r\\n                    <ion-note>\\r\\n                        <ion-icon name=\\\"fas-clock\\\" [attr.aria-label]=\\\"'core.lastmodified' | translate\\\"></ion-icon> {{entry.lastmodified\\r\\n                        |\\r\\n                        coreTimeAgo}}\\r\\n                    </ion-note>\\r\\n                </div>\\r\\n            </ion-card>\\r\\n        </ng-container>\\r\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" (action)=\\\"loadMore($event)\\\" [error]=\\\"loadMoreError\\\"></core-infinite-loading>\\r\\n    </core-loading>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injector, NgModule } from '@angular/core';\nimport { RouterModule, ROUTES, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonBlogEntriesPage } from './pages/entries/entries';\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\n\nimport { CoreTagComponentsModule } from '@features/tag/components/components.module';\nimport { buildTabMainRoutes } from '@features/mainmenu/mainmenu-tab-routing.module';\nimport { AddonBlogMainMenuHandlerService } from './services/handlers/mainmenu';\nimport { CoreMainMenuComponentsModule } from '@features/mainmenu/components/components.module';\n\nfunction buildRoutes(injector: Injector): Routes {\n    return [\n        ...buildTabMainRoutes(injector, {\n            data: {\n                mainMenuTabRoot: AddonBlogMainMenuHandlerService.PAGE_NAME,\n            },\n            component: AddonBlogEntriesPage,\n        }),\n    ];\n}\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n        CoreCommentsComponentsModule,\n        CoreTagComponentsModule,\n        CoreMainMenuComponentsModule,\n    ],\n    exports: [RouterModule],\n    providers: [\n        {\n            provide: ROUTES,\n            multi: true,\n            deps: [Injector],\n            useFactory: buildRoutes,\n        },\n    ],\n    declarations: [\n        AddonBlogEntriesPage,\n    ],\n})\nexport class AddonBlogLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ContextLevel } from '@/core/constants';\nimport { AddonBlog, AddonBlogFilter, AddonBlogPost, AddonBlogProvider } from '@addons/blog/services/blog';\nimport { Component, OnInit } from '@angular/core';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreMainMenuDeepLinkManager } from '@features/mainmenu/classes/deep-link-manager';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { CoreUser, CoreUserProfile } from '@features/user/services/user';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Page that displays the list of blog entries.\n */\n@Component({\n    selector: 'page-addon-blog-entries',\n    templateUrl: 'entries.html',\n})\nexport class AddonBlogEntriesPage implements OnInit {\n\n    title = '';\n\n    protected filter: AddonBlogFilter = {};\n    protected pageLoaded = 0;\n    protected userPageLoaded = 0;\n    protected canLoadMoreEntries = false;\n    protected canLoadMoreUserEntries = true;\n    protected siteHomeId: number;\n    protected fetchSuccess = false;\n\n    loaded = false;\n    canLoadMore = false;\n    loadMoreError = false;\n    entries: AddonBlogPostFormatted[] = [];\n    currentUserId: number;\n    showMyEntriesToggle = false;\n    onlyMyEntries = false;\n    component = AddonBlogProvider.COMPONENT;\n    commentsEnabled = false;\n    tagsEnabled = false;\n    contextLevel: ContextLevel = ContextLevel.SYSTEM;\n    contextInstanceId = 0;\n\n    constructor() {\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n        this.siteHomeId = CoreSites.getCurrentSiteHomeId();\n    }\n\n    /**\n     * View loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        const userId = CoreNavigator.getRouteNumberParam('userId');\n        const courseId = CoreNavigator.getRouteNumberParam('courseId');\n        const cmId = CoreNavigator.getRouteNumberParam('cmId');\n        const entryId = CoreNavigator.getRouteNumberParam('entryId');\n        const groupId = CoreNavigator.getRouteNumberParam('groupId');\n        const tagId = CoreNavigator.getRouteNumberParam('tagId');\n\n        if (!userId && !courseId && !cmId && !entryId && !groupId && !tagId) {\n            this.title = 'addon.blog.siteblogheading';\n        } else {\n            this.title = 'addon.blog.blogentries';\n        }\n\n        if (userId) {\n            this.filter.userid = userId;\n        }\n        this.showMyEntriesToggle = !userId;\n\n        if (courseId) {\n            this.filter.courseid = courseId;\n        }\n\n        if (cmId) {\n            this.filter.cmid = cmId;\n        }\n\n        if (entryId) {\n            this.filter.entryid = entryId;\n        }\n\n        if (groupId) {\n            this.filter.groupid = groupId;\n        }\n\n        if (tagId) {\n            this.filter.tagid = tagId;\n        }\n\n        // Calculate the context level.\n        if (userId && !courseId && !cmId) {\n            this.contextLevel = ContextLevel.USER;\n            this.contextInstanceId = userId;\n        } else if (courseId && courseId != this.siteHomeId) {\n            this.contextLevel = ContextLevel.COURSE;\n            this.contextInstanceId = courseId;\n        } else {\n            this.contextLevel = ContextLevel.SYSTEM;\n            this.contextInstanceId = 0;\n        }\n\n        this.commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n        this.tagsEnabled = CoreTag.areTagsAvailableInSite();\n\n        const deepLinkManager = new CoreMainMenuDeepLinkManager();\n        deepLinkManager.treatLink();\n\n        await this.fetchEntries();\n    }\n\n    /**\n     * Fetch blog entries.\n     *\n     * @param refresh Empty events array first.\n     * @return Promise with the entries.\n     */\n    protected async fetchEntries(refresh: boolean = false): Promise<void> {\n        this.loadMoreError = false;\n\n        if (refresh) {\n            this.pageLoaded = 0;\n            this.userPageLoaded = 0;\n        }\n\n        const loadPage = this.onlyMyEntries ? this.userPageLoaded : this.pageLoaded;\n\n        try {\n            const result = await AddonBlog.getEntries(this.filter, loadPage);\n\n            const promises = result.entries.map(async (entry: AddonBlogPostFormatted) => {\n                switch (entry.publishstate) {\n                    case 'draft':\n                        entry.publishTranslated = 'publishtonoone';\n                        break;\n                    case 'site':\n                        entry.publishTranslated = 'publishtosite';\n                        break;\n                    case 'public':\n                        entry.publishTranslated = 'publishtoworld';\n                        break;\n                    default:\n                        entry.publishTranslated = 'privacy:unknown';\n                        break;\n                }\n\n                // Calculate the context. This code was inspired by calendar events, Moodle doesn't do this for blogs.\n                if (entry.moduleid || entry.coursemoduleid) {\n                    entry.contextLevel = ContextLevel.MODULE;\n                    entry.contextInstanceId = entry.moduleid || entry.coursemoduleid;\n                } else if (entry.courseid) {\n                    entry.contextLevel = ContextLevel.COURSE;\n                    entry.contextInstanceId = entry.courseid;\n                } else {\n                    entry.contextLevel = ContextLevel.USER;\n                    entry.contextInstanceId = entry.userid;\n                }\n\n                entry.summary = CoreTextUtils.replacePluginfileUrls(entry.summary, entry.summaryfiles || []);\n\n                entry.user = await CoreUtils.ignoreErrors(CoreUser.getProfile(entry.userid, entry.courseid, true));\n            });\n\n            if (refresh) {\n                this.entries = result.entries;\n            } else {\n                this.entries = CoreUtils.uniqueArray(this.entries\n                    .concat(result.entries), 'id')\n                    .sort((a, b) => b.created - a.created);\n            }\n\n            if (this.onlyMyEntries) {\n                const count = this.entries.filter((entry) => entry.userid == this.currentUserId).length;\n                this.canLoadMoreUserEntries = result.totalentries > count;\n                this.canLoadMore = this.canLoadMoreUserEntries;\n                this.userPageLoaded++;\n            } else {\n                this.canLoadMoreEntries = result.totalentries > this.entries.length;\n                this.canLoadMore = this.canLoadMoreEntries;\n                this.pageLoaded++;\n            }\n\n            await Promise.all(promises);\n\n            if (!this.fetchSuccess) {\n                this.fetchSuccess = true;\n                CoreUtils.ignoreErrors(AddonBlog.logView(this.filter));\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.blog.errorloadentries', true);\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Toggle between showing only my entries or not.\n     *\n     * @param enabled If true, filter my entries. False otherwise.\n     */\n    onlyMyEntriesToggleChanged(enabled: boolean): void {\n        this.canLoadMore = enabled ? this.canLoadMoreUserEntries : this.canLoadMoreEntries;\n\n        if (!enabled) {\n            delete this.filter.userid;\n\n            return;\n        }\n\n        const count = this.entries.filter((entry) => entry.userid == this.currentUserId).length;\n        this.userPageLoaded = Math.floor(count / AddonBlogProvider.ENTRIES_PER_PAGE);\n        this.filter.userid = this.currentUserId;\n\n        if (count == 0 && this.canLoadMoreUserEntries) {\n            // First time but no entry loaded. Try to load some.\n            this.loadMore();\n        }\n    }\n\n    /**\n     * Function to load more entries.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @return Resolved when done.\n     */\n    loadMore(infiniteComplete?: () => void): Promise<void> {\n        return this.fetchEntries().finally(() => {\n            infiniteComplete && infiniteComplete();\n        });\n    }\n\n    /**\n     * Refresh blog entries on PTR.\n     *\n     * @param refresher Refresher instance.\n     */\n    refresh(refresher?: IonRefresher): void {\n        const promises = this.entries.map((entry) =>\n            CoreComments.invalidateCommentsData('user', entry.userid, this.component, entry.id, 'format_blog'));\n\n        promises.push(AddonBlog.invalidateEntries(this.filter));\n\n        if (this.showMyEntriesToggle) {\n            this.filter['userid'] = this.currentUserId;\n            promises.push(AddonBlog.invalidateEntries(this.filter));\n\n            if (!this.onlyMyEntries) {\n                delete this.filter['userid'];\n            }\n\n        }\n\n        CoreUtils.allPromises(promises).finally(() => {\n            this.fetchEntries(true).finally(() => {\n                if (refresher) {\n                    refresher?.complete();\n                }\n            });\n        });\n    }\n\n}\n\n/**\n * Blog post with some calculated data.\n */\ntype AddonBlogPostFormatted = AddonBlogPost & {\n    publishTranslated?: string; // Calculated in the app. Key of the string to translate the publish state of the post.\n    user?: CoreUserProfile; // Calculated in the app. Data of the user that wrote the post.\n    contextLevel?: string; // Calculated in the app. The context level of the entry.\n    contextInstanceId?: number; // Calculated in the app. The context instance id.\n};\n"],"sourceRoot":"webpack:///"}