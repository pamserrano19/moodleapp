{"version":3,"sources":["./src/addons/messages/pages/contacts/contacts.html","./src/addons/messages/pages/contacts/contacts.module.ts","./src/addons/messages/pages/contacts/contacts.page.ts"],"names":[],"mappings":"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","file":"pages-contacts-contacts-module.js","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n        <ion-title>\\r\\n            <h1>{{ 'addon.messages.contacts' | translate }}</h1>\\r\\n        </ion-title>\\r\\n        <ion-buttons slot=\\\"end\\\">\\r\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"gotoSearch()\\\" [attr.aria-label]=\\\"'addon.messages.searchcombined' | translate\\\">\\r\\n                <ion-icon name=\\\"fas-search\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\r\\n            </ion-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n    <core-split-view>\\r\\n        <core-tabs [hideUntil]=\\\"true\\\">\\r\\n\\r\\n            <!-- Contacts tab. -->\\r\\n            <core-tab [title]=\\\"'addon.messages.contacts' | translate\\\" (ionSelect)=\\\"selectTab('confirmed')\\\">\\r\\n                <ng-template>\\r\\n                    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!confirmedLoaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n                        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n                    </ion-refresher>\\r\\n                    <core-loading [hideUntil]=\\\"confirmedLoaded\\\">\\r\\n                        <ion-list class=\\\"ion-no-margin\\\" *ngIf=\\\"confirmedContacts.length\\\">\\r\\n                            <ion-item class=\\\"ion-text-wrap addon-messages-conversation-item\\\" (click)=\\\"selectUser(contact.id)\\\" button\\r\\n                                *ngFor=\\\"let contact of confirmedContacts\\\" [attr.aria-label]=\\\"contact.fullname\\\" detail=\\\"true\\\"\\r\\n                                [attr.aria-current]=\\\"contact.id == selectedUserId ? 'page' : 'false'\\\">\\r\\n                                <core-user-avatar slot=\\\"start\\\" [user]=\\\"contact\\\" [checkOnline]=\\\"contact.showonlinestatus\\\"\\r\\n                                    [linkProfile]=\\\"false\\\">\\r\\n                                </core-user-avatar>\\r\\n                                <ion-label>\\r\\n                                    <p class=\\\"item-heading\\\">\\r\\n                                        <core-format-text [text]=\\\"contact.fullname\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\">\\r\\n                                        </core-format-text>\\r\\n                                        <ion-icon *ngIf=\\\"contact.isblocked\\\" name=\\\"fas-user-slash\\\" slot=\\\"end\\\"\\r\\n                                            [attr.aria-label]=\\\"'addon.messages.contactblocked' | translate\\\">\\r\\n                                        </ion-icon>\\r\\n                                    </p>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </ion-list>\\r\\n\\r\\n                        <core-empty-box *ngIf=\\\"!confirmedContacts.length\\\" icon=\\\"far-address-book\\\"\\r\\n                            [message]=\\\"'addon.messages.nocontactsgetstarted' | translate\\\">\\r\\n                        </core-empty-box>\\r\\n\\r\\n                        <core-infinite-loading [enabled]=\\\"confirmedCanLoadMore\\\" (action)=\\\"loadMore($event)\\\" [error]=\\\"confirmedLoadMoreError\\\"\\r\\n                            position=\\\"bottom\\\">\\r\\n                        </core-infinite-loading>\\r\\n                    </core-loading>\\r\\n                </ng-template>\\r\\n            </core-tab>\\r\\n\\r\\n            <!-- Requests tab. -->\\r\\n            <core-tab [title]=\\\"'addon.messages.requests' | translate\\\" (ionSelect)=\\\"selectTab('requests')\\\" [badge]=\\\"requestsBadge\\\"\\r\\n                badgeA11yText=\\\"addon.messages.pendingcontactrequests\\\">\\r\\n                <ng-template>\\r\\n                    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!requestsLoaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\r\\n                        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\r\\n                    </ion-refresher>\\r\\n                    <core-loading [hideUntil]=\\\"requestsLoaded\\\">\\r\\n                        <ion-list class=\\\"ion-no-margin\\\" *ngIf=\\\"requests.length\\\">\\r\\n                            <ion-item class=\\\"ion-text-wrap addon-messages-conversation-item\\\" *ngFor=\\\"let request of requests\\\"\\r\\n                                [attr.aria-label]=\\\"request.fullname\\\" (click)=\\\"selectUser(request.id)\\\" button\\r\\n                                [attr.aria-current]=\\\"request.id == selectedUserId ? 'page' : 'false'\\\" detail=\\\"true\\\">\\r\\n                                <core-user-avatar slot=\\\"start\\\" [user]=\\\"request\\\" [linkProfile]=\\\"false\\\"></core-user-avatar>\\r\\n                                <ion-label>\\r\\n                                    <core-format-text [text]=\\\"request.fullname\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\">\\r\\n                                    </core-format-text>\\r\\n                                    <p *ngIf=\\\"!request.iscontact\\\">\\r\\n                                        {{ 'addon.messages.wouldliketocontactyou' | translate }}\\r\\n                                    </p>\\r\\n                                </ion-label>\\r\\n                            </ion-item>\\r\\n                        </ion-list>\\r\\n                        <core-empty-box *ngIf=\\\"!requests.length\\\" icon=\\\"far-address-book\\\"\\r\\n                            [message]=\\\"'addon.messages.nocontactrequests' | translate\\\">\\r\\n                        </core-empty-box>\\r\\n                        <core-infinite-loading [enabled]=\\\"requestsCanLoadMore\\\" (action)=\\\"loadMore($event)\\\" [error]=\\\"requestsLoadMoreError\\\"\\r\\n                            position=\\\"bottom\\\">\\r\\n                        </core-infinite-loading>\\r\\n                    </core-loading>\\r\\n                </ng-template>\\r\\n            </core-tab>\\r\\n        </core-tabs>\\r\\n    </core-split-view>\\r\\n</ion-content>\\r\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { conditionalRoutes } from '@/app/app-routing.module';\r\nimport { AddonMessagesDiscussionRoute } from '@addons/messages/messages-lazy.module';\r\nimport { CoreScreen } from '@services/screen';\r\n\r\nimport { CoreSharedModule } from '@/core/shared.module';\r\n\r\nimport { AddonMessagesContactsPage } from './contacts.page';\r\n\r\nconst mobileRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonMessagesContactsPage,\r\n    },\r\n    AddonMessagesDiscussionRoute,\r\n];\r\n\r\nconst tabletRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AddonMessagesContactsPage,\r\n        children: [\r\n            AddonMessagesDiscussionRoute,\r\n        ],\r\n    },\r\n];\r\n\r\nconst routes: Routes = [\r\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\r\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CoreSharedModule,\r\n    ],\r\n    declarations: [\r\n        AddonMessagesContactsPage,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class AddonMessagesContactsPageModule {}\r\n","// (C) Copyright 2015 Moodle Pty Ltd.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\r\nimport { CoreSites } from '@services/sites';\r\nimport {\r\n    AddonMessages,\r\n    AddonMessagesConversationMember,\r\n    AddonMessagesProvider,\r\n} from '../../services/messages';\r\nimport { CoreNavigator } from '@services/navigator';\r\nimport { CoreScreen } from '@services/screen';\r\nimport { CoreDomUtils } from '@services/utils/dom';\r\nimport { IonRefresher } from '@ionic/angular';\r\n\r\n/**\r\n * Page that displays contacts and contact requests.\r\n */\r\n@Component({\r\n    selector: 'page-addon-messages-contacts',\r\n    templateUrl: 'contacts.html',\r\n    styleUrls: [\r\n        '../../messages-common.scss',\r\n    ],\r\n})\r\nexport class AddonMessagesContactsPage implements OnInit, OnDestroy {\r\n\r\n    selected: 'confirmed' | 'requests' = 'confirmed';\r\n    requestsBadge = '';\r\n    selectedUserId?: number; // User id of the conversation opened in the split view.\r\n\r\n    confirmedLoaded = false;\r\n    confirmedInitialising = false;\r\n    confirmedCanLoadMore = false;\r\n    confirmedLoadMoreError = false;\r\n    confirmedContacts: AddonMessagesConversationMember[] = [];\r\n\r\n    requestsLoaded = false;\r\n    requestsInitialising = false;\r\n    requestsCanLoadMore = false;\r\n    requestsLoadMoreError = false;\r\n    requests: AddonMessagesConversationMember[] = [];\r\n\r\n    protected siteId: string;\r\n    protected contactRequestsCountObserver: CoreEventObserver;\r\n    protected memberInfoObserver: CoreEventObserver;\r\n\r\n    constructor() {\r\n\r\n        this.siteId = CoreSites.getCurrentSiteId();\r\n\r\n        // Update the contact requests badge.\r\n        this.contactRequestsCountObserver = CoreEvents.on(\r\n            AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT,\r\n            (data) => {\r\n                this.requestsBadge = data.count > 0 ? String(data.count) : '';\r\n            },\r\n            this.siteId,\r\n        );\r\n\r\n        // Update block status of a user.\r\n        this.memberInfoObserver = CoreEvents.on(\r\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\r\n            (data) => {\r\n                if (data.userBlocked || data.userUnblocked) {\r\n                    const user = this.confirmedContacts.find((user) => user.id == data.userId);\r\n                    if (user) {\r\n                        user.isblocked = !!data.userBlocked;\r\n                    }\r\n                } else if (data.contactRemoved) {\r\n                    const index = this.confirmedContacts.findIndex((contact) => contact.id == data.userId);\r\n                    if (index >= 0) {\r\n                        this.confirmedContacts.splice(index, 1);\r\n                    }\r\n                } else if (data.contactRequestConfirmed) {\r\n                    this.confirmedFetchData(true);\r\n                }\r\n\r\n                if (data.contactRequestConfirmed || data.contactRequestDeclined) {\r\n                    const index = this.requests.findIndex((request) => request.id == data.userId);\r\n                    if (index >= 0) {\r\n                        this.requests.splice(index, 1);\r\n                    }\r\n                }\r\n            },\r\n            CoreSites.getCurrentSiteId(),\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * Page being initialized.\r\n     */\r\n    async ngOnInit(): Promise<void> {\r\n        AddonMessages.getContactRequestsCount(this.siteId); // Badge already updated by the observer.\r\n\r\n        this.selected === 'confirmed'\r\n            ? await this.initConfirmed()\r\n            : await this.initRequests();\r\n    }\r\n\r\n    /**\r\n     * Initialise confirmed contacts.\r\n     */\r\n    async initConfirmed(): Promise<void> {\r\n        if (this.confirmedInitialising) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.confirmedInitialising = true;\r\n\r\n            await this.confirmedFetchData();\r\n\r\n            if (this.confirmedContacts.length && CoreScreen.isTablet) {\r\n                this.selectUser(this.confirmedContacts[0].id, true);\r\n            }\r\n        } finally {\r\n            this.confirmedInitialising = false;\r\n            this.confirmedLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialise contact requests.\r\n     */\r\n    async initRequests(): Promise<void> {\r\n        if (this.requestsInitialising) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this.requestsInitialising = true;\r\n\r\n            await this.requestsFetchData();\r\n\r\n            if (this.requests.length && CoreScreen.isTablet) {\r\n                this.selectUser(this.requests[0].id, true);\r\n            }\r\n        } finally {\r\n            this.requestsInitialising = false;\r\n            this.requestsLoaded = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch contacts.\r\n     *\r\n     * @param refresh True if we are refreshing contacts, false if we are loading more.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async confirmedFetchData(refresh: boolean = false): Promise<void> {\r\n        this.confirmedLoadMoreError = false;\r\n\r\n        const limitFrom = refresh ? 0 : this.confirmedContacts.length;\r\n\r\n        if (limitFrom === 0) {\r\n            // Always try to get latest data from server.\r\n            await AddonMessages.invalidateUserContacts();\r\n        }\r\n\r\n        try {\r\n            const result = await AddonMessages.getUserContacts(limitFrom);\r\n            this.confirmedContacts = refresh ? result.contacts : this.confirmedContacts.concat(result.contacts);\r\n            this.confirmedCanLoadMore = result.canLoadMore;\r\n        } catch (error) {\r\n            this.confirmedLoadMoreError = true;\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch contact requests.\r\n     *\r\n     * @param refresh True if we are refreshing contact requests, false if we are loading more.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async requestsFetchData(refresh: boolean = false): Promise<void> {\r\n        this.requestsLoadMoreError = false;\r\n\r\n        const limitFrom = refresh ? 0 : this.requests.length;\r\n\r\n        if (limitFrom === 0) {\r\n            // Always try to get latest data from server.\r\n            await AddonMessages.invalidateContactRequestsCache();\r\n        }\r\n\r\n        try {\r\n            const result = await AddonMessages.getContactRequests(limitFrom);\r\n            this.requests = refresh ? result.requests : this.requests.concat(result.requests);\r\n            this.requestsCanLoadMore = result.canLoadMore;\r\n        } catch (error) {\r\n            this.requestsLoadMoreError = true;\r\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh contacts or requests.\r\n     *\r\n     * @param refresher Refresher.\r\n     * @return Promise resolved when done.\r\n     */\r\n    async refreshData(refresher?: IonRefresher): Promise<void> {\r\n        try {\r\n            if (this.selected == 'confirmed') {\r\n                // No need to invalidate contacts, we always try to get the latest.\r\n                await this.confirmedFetchData(true);\r\n            } else {\r\n                // Refresh the number of contacts requests to update badges.\r\n                AddonMessages.refreshContactRequestsCount();\r\n\r\n                // No need to invalidate contact requests, we always try to get the latest.\r\n                await this.requestsFetchData(true);\r\n            }\r\n        } finally {\r\n            refresher?.complete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load more contacts or requests.\r\n     *\r\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\r\n     * @return Resolved when done.\r\n     */\r\n    async loadMore(infiniteComplete?: () => void): Promise<void> {\r\n        try {\r\n            if (this.selected == 'confirmed') {\r\n                // No need to invalidate contacts, we always try to get the latest.\r\n                await this.confirmedFetchData();\r\n            } else {\r\n                await this.requestsFetchData();\r\n            }\r\n        } finally {\r\n            infiniteComplete && infiniteComplete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Navigate to the search page.\r\n     */\r\n    gotoSearch(): void {\r\n        CoreNavigator.navigateToSitePath('search');\r\n    }\r\n\r\n    selectTab(selected: string): void {\r\n        if (selected !== 'confirmed' && selected !== 'requests') {\r\n            return;\r\n        }\r\n\r\n        this.selected = selected;\r\n\r\n        if (this.selected == 'confirmed' && !this.confirmedLoaded) {\r\n            this.initConfirmed();\r\n        }\r\n\r\n        if (this.selected == 'requests' && !this.requestsLoaded) {\r\n            this.initRequests();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the selected user and open the conversation in the split view if needed.\r\n     *\r\n     * @param userId Id of the selected user, undefined to use the last selected user in the tab.\r\n     * @param onInit Whether the contact was selected on initial load.\r\n     */\r\n    selectUser(userId: number, onInit = false): void {\r\n        if (userId == this.selectedUserId && CoreScreen.isTablet) {\r\n            // No user conversation to open or it is already opened.\r\n            return;\r\n        }\r\n\r\n        if (onInit && CoreScreen.isMobile) {\r\n            // Do not open a conversation by default when split view is not visible.\r\n            return;\r\n        }\r\n\r\n        this.selectedUserId = userId;\r\n\r\n        const splitViewLoaded = CoreNavigator.isCurrentPathInTablet('**/messages/contacts/discussion');\r\n        const path = (splitViewLoaded ? '../' : '') + 'discussion';\r\n\r\n        CoreNavigator.navigate(path, { params : { userId } });\r\n    }\r\n\r\n    /**\r\n     * Page destroyed.\r\n     */\r\n    ngOnDestroy(): void {\r\n        this.contactRequestsCountObserver?.off();\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}